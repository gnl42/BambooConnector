/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import me.glindholm.mylyn.bamboo.internal.rest.model.WeightedDescriptor;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * NotificationType
 */
@JsonPropertyOrder({
  NotificationType.JSON_PROPERTY_EDIT_HTML,
  NotificationType.JSON_PROPERTY_CONFIGURATION_DATA,
  NotificationType.JSON_PROPERTY_VIEW_HTML,
  NotificationType.JSON_PROPERTY_NAME,
  NotificationType.JSON_PROPERTY_KEY,
  NotificationType.JSON_PROPERTY_DESCRIPTION,
  NotificationType.JSON_PROPERTY_SCOPE,
  NotificationType.JSON_PROPERTY_MODULE_DESCRIPTOR
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NotificationType implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_EDIT_HTML = "editHtml";
  private String editHtml;

  public static final String JSON_PROPERTY_CONFIGURATION_DATA = "configurationData";
  private String configurationData;

  public static final String JSON_PROPERTY_VIEW_HTML = "viewHtml";
  private String viewHtml;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_KEY = "key";
  private String key;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  /**
   * Gets or Sets scope
   */
  public enum ScopeEnum {
    PLAN("PLAN"),
    
    CHAIN("CHAIN"),
    
    SYSTEM("SYSTEM"),
    
    DEPLOYMENT("DEPLOYMENT");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ScopeEnum fromValue(String value) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SCOPE = "scope";
  private ScopeEnum scope;

  public static final String JSON_PROPERTY_MODULE_DESCRIPTOR = "moduleDescriptor";
  private WeightedDescriptor moduleDescriptor;

  public NotificationType() { 
  }

  public NotificationType editHtml(String editHtml) {
    this.editHtml = editHtml;
    return this;
  }

   /**
   * Get editHtml
   * @return editHtml
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_EDIT_HTML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEditHtml() {
    return editHtml;
  }


  @JsonProperty(JSON_PROPERTY_EDIT_HTML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEditHtml(String editHtml) {
    this.editHtml = editHtml;
  }


  public NotificationType configurationData(String configurationData) {
    this.configurationData = configurationData;
    return this;
  }

   /**
   * Get configurationData
   * @return configurationData
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CONFIGURATION_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getConfigurationData() {
    return configurationData;
  }


  @JsonProperty(JSON_PROPERTY_CONFIGURATION_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfigurationData(String configurationData) {
    this.configurationData = configurationData;
  }


  public NotificationType viewHtml(String viewHtml) {
    this.viewHtml = viewHtml;
    return this;
  }

   /**
   * Get viewHtml
   * @return viewHtml
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_VIEW_HTML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getViewHtml() {
    return viewHtml;
  }


  @JsonProperty(JSON_PROPERTY_VIEW_HTML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setViewHtml(String viewHtml) {
    this.viewHtml = viewHtml;
  }


  public NotificationType name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public NotificationType key(String key) {
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKey(String key) {
    this.key = key;
  }


  public NotificationType description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public NotificationType scope(ScopeEnum scope) {
    this.scope = scope;
    return this;
  }

   /**
   * Get scope
   * @return scope
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SCOPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ScopeEnum getScope() {
    return scope;
  }


  @JsonProperty(JSON_PROPERTY_SCOPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }


  public NotificationType moduleDescriptor(WeightedDescriptor moduleDescriptor) {
    this.moduleDescriptor = moduleDescriptor;
    return this;
  }

   /**
   * Get moduleDescriptor
   * @return moduleDescriptor
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MODULE_DESCRIPTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public WeightedDescriptor getModuleDescriptor() {
    return moduleDescriptor;
  }


  @JsonProperty(JSON_PROPERTY_MODULE_DESCRIPTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModuleDescriptor(WeightedDescriptor moduleDescriptor) {
    this.moduleDescriptor = moduleDescriptor;
  }


  /**
   * Return true if this NotificationType object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationType notificationType = (NotificationType) o;
    return Objects.equals(this.editHtml, notificationType.editHtml) &&
        Objects.equals(this.configurationData, notificationType.configurationData) &&
        Objects.equals(this.viewHtml, notificationType.viewHtml) &&
        Objects.equals(this.name, notificationType.name) &&
        Objects.equals(this.key, notificationType.key) &&
        Objects.equals(this.description, notificationType.description) &&
        Objects.equals(this.scope, notificationType.scope) &&
        Objects.equals(this.moduleDescriptor, notificationType.moduleDescriptor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(editHtml, configurationData, viewHtml, name, key, description, scope, moduleDescriptor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationType {\n");
    sb.append("    editHtml: ").append(toIndentedString(editHtml)).append("\n");
    sb.append("    configurationData: ").append(toIndentedString(configurationData)).append("\n");
    sb.append("    viewHtml: ").append(toIndentedString(viewHtml)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    moduleDescriptor: ").append(toIndentedString(moduleDescriptor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

