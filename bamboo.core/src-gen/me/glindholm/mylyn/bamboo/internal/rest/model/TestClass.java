/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import me.glindholm.mylyn.bamboo.internal.rest.model.Plan;
import me.glindholm.mylyn.bamboo.internal.rest.model.TestCase;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * TestClass
 */
@JsonPropertyOrder({
  TestClass.JSON_PROPERTY_PLAN,
  TestClass.JSON_PROPERTY_TEST_CASES,
  TestClass.JSON_PROPERTY_MASTER_JOB_ID,
  TestClass.JSON_PROPERTY_TEST_CASE_COLLECTION,
  TestClass.JSON_PROPERTY_NAME,
  TestClass.JSON_PROPERTY_SHORT_NAME,
  TestClass.JSON_PROPERTY_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TestClass implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_PLAN = "plan";
  private Plan plan;

  public static final String JSON_PROPERTY_TEST_CASES = "testCases";
  private List<TestCase> testCases;

  public static final String JSON_PROPERTY_MASTER_JOB_ID = "masterJobId";
  private Long masterJobId;

  public static final String JSON_PROPERTY_TEST_CASE_COLLECTION = "testCaseCollection";
  private List<TestCase> testCaseCollection;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_SHORT_NAME = "shortName";
  private String shortName;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public TestClass() { 
  }

  public TestClass plan(Plan plan) {
    this.plan = plan;
    return this;
  }

   /**
   * Get plan
   * @return plan
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Plan getPlan() {
    return plan;
  }


  @JsonProperty(JSON_PROPERTY_PLAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlan(Plan plan) {
    this.plan = plan;
  }


  public TestClass testCases(List<TestCase> testCases) {
    this.testCases = testCases;
    return this;
  }

  public TestClass addTestCasesItem(TestCase testCasesItem) {
    if (this.testCases == null) {
      this.testCases = new ArrayList<>();
    }
    this.testCases.add(testCasesItem);
    return this;
  }

   /**
   * Get testCases
   * @return testCases
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TEST_CASES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<TestCase> getTestCases() {
    return testCases;
  }


  @JsonProperty(JSON_PROPERTY_TEST_CASES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTestCases(List<TestCase> testCases) {
    this.testCases = testCases;
  }


  public TestClass masterJobId(Long masterJobId) {
    this.masterJobId = masterJobId;
    return this;
  }

   /**
   * Get masterJobId
   * @return masterJobId
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MASTER_JOB_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getMasterJobId() {
    return masterJobId;
  }


  @JsonProperty(JSON_PROPERTY_MASTER_JOB_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMasterJobId(Long masterJobId) {
    this.masterJobId = masterJobId;
  }


  public TestClass testCaseCollection(List<TestCase> testCaseCollection) {
    this.testCaseCollection = testCaseCollection;
    return this;
  }

  public TestClass addTestCaseCollectionItem(TestCase testCaseCollectionItem) {
    if (this.testCaseCollection == null) {
      this.testCaseCollection = new ArrayList<>();
    }
    this.testCaseCollection.add(testCaseCollectionItem);
    return this;
  }

   /**
   * Get testCaseCollection
   * @return testCaseCollection
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TEST_CASE_COLLECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<TestCase> getTestCaseCollection() {
    return testCaseCollection;
  }


  @JsonProperty(JSON_PROPERTY_TEST_CASE_COLLECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTestCaseCollection(List<TestCase> testCaseCollection) {
    this.testCaseCollection = testCaseCollection;
  }


  public TestClass name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public TestClass shortName(String shortName) {
    this.shortName = shortName;
    return this;
  }

   /**
   * Get shortName
   * @return shortName
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SHORT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getShortName() {
    return shortName;
  }


  @JsonProperty(JSON_PROPERTY_SHORT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShortName(String shortName) {
    this.shortName = shortName;
  }


  public TestClass id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  /**
   * Return true if this TestClass object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestClass testClass = (TestClass) o;
    return Objects.equals(this.plan, testClass.plan) &&
        Objects.equals(this.testCases, testClass.testCases) &&
        Objects.equals(this.masterJobId, testClass.masterJobId) &&
        Objects.equals(this.testCaseCollection, testClass.testCaseCollection) &&
        Objects.equals(this.name, testClass.name) &&
        Objects.equals(this.shortName, testClass.shortName) &&
        Objects.equals(this.id, testClass.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(plan, testCases, masterJobId, testCaseCollection, name, shortName, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestClass {\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    testCases: ").append(toIndentedString(testCases)).append("\n");
    sb.append("    masterJobId: ").append(toIndentedString(masterJobId)).append("\n");
    sb.append("    testCaseCollection: ").append(toIndentedString(testCaseCollection)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    shortName: ").append(toIndentedString(shortName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

