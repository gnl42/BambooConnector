/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import me.glindholm.mylyn.bamboo.internal.rest.model.WeightedDescriptor;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * NotificationRecipient
 */
@JsonPropertyOrder({
  NotificationRecipient.JSON_PROPERTY_EDIT_HTML,
  NotificationRecipient.JSON_PROPERTY_VIEW_HTML,
  NotificationRecipient.JSON_PROPERTY_TRANSPORTS,
  NotificationRecipient.JSON_PROPERTY_RECIPIENT_CONFIG,
  NotificationRecipient.JSON_PROPERTY_DESCRIPTION,
  NotificationRecipient.JSON_PROPERTY_SCOPES,
  NotificationRecipient.JSON_PROPERTY_MODULE_DESCRIPTOR,
  NotificationRecipient.JSON_PROPERTY_KEY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NotificationRecipient implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_EDIT_HTML = "editHtml";
  private String editHtml;

  public static final String JSON_PROPERTY_VIEW_HTML = "viewHtml";
  private String viewHtml;

  public static final String JSON_PROPERTY_TRANSPORTS = "transports";
  private List<Object> transports;

  public static final String JSON_PROPERTY_RECIPIENT_CONFIG = "recipientConfig";
  private String recipientConfig;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  /**
   * Gets or Sets scopes
   */
  public enum ScopesEnum {
    CHAIN("CHAIN"),
    
    SYSTEM("SYSTEM"),
    
    DEPLOYMENT("DEPLOYMENT");

    private String value;

    ScopesEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ScopesEnum fromValue(String value) {
      for (ScopesEnum b : ScopesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SCOPES = "scopes";
  private Set<ScopesEnum> scopes;

  public static final String JSON_PROPERTY_MODULE_DESCRIPTOR = "moduleDescriptor";
  private WeightedDescriptor moduleDescriptor;

  public static final String JSON_PROPERTY_KEY = "key";
  private String key;

  public NotificationRecipient() { 
  }

  public NotificationRecipient editHtml(String editHtml) {
    this.editHtml = editHtml;
    return this;
  }

   /**
   * Get editHtml
   * @return editHtml
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_EDIT_HTML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEditHtml() {
    return editHtml;
  }


  @JsonProperty(JSON_PROPERTY_EDIT_HTML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEditHtml(String editHtml) {
    this.editHtml = editHtml;
  }


  public NotificationRecipient viewHtml(String viewHtml) {
    this.viewHtml = viewHtml;
    return this;
  }

   /**
   * Get viewHtml
   * @return viewHtml
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_VIEW_HTML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getViewHtml() {
    return viewHtml;
  }


  @JsonProperty(JSON_PROPERTY_VIEW_HTML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setViewHtml(String viewHtml) {
    this.viewHtml = viewHtml;
  }


  public NotificationRecipient transports(List<Object> transports) {
    this.transports = transports;
    return this;
  }

  public NotificationRecipient addTransportsItem(Object transportsItem) {
    if (this.transports == null) {
      this.transports = new ArrayList<>();
    }
    this.transports.add(transportsItem);
    return this;
  }

   /**
   * Get transports
   * @return transports
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TRANSPORTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Object> getTransports() {
    return transports;
  }


  @JsonProperty(JSON_PROPERTY_TRANSPORTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransports(List<Object> transports) {
    this.transports = transports;
  }


  public NotificationRecipient recipientConfig(String recipientConfig) {
    this.recipientConfig = recipientConfig;
    return this;
  }

   /**
   * Get recipientConfig
   * @return recipientConfig
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_RECIPIENT_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRecipientConfig() {
    return recipientConfig;
  }


  @JsonProperty(JSON_PROPERTY_RECIPIENT_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRecipientConfig(String recipientConfig) {
    this.recipientConfig = recipientConfig;
  }


  public NotificationRecipient description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public NotificationRecipient scopes(Set<ScopesEnum> scopes) {
    this.scopes = scopes;
    return this;
  }

  public NotificationRecipient addScopesItem(ScopesEnum scopesItem) {
    if (this.scopes == null) {
      this.scopes = new LinkedHashSet<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

   /**
   * Get scopes
   * @return scopes
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SCOPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ScopesEnum> getScopes() {
    return scopes;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_SCOPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScopes(Set<ScopesEnum> scopes) {
    this.scopes = scopes;
  }


  public NotificationRecipient moduleDescriptor(WeightedDescriptor moduleDescriptor) {
    this.moduleDescriptor = moduleDescriptor;
    return this;
  }

   /**
   * Get moduleDescriptor
   * @return moduleDescriptor
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MODULE_DESCRIPTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public WeightedDescriptor getModuleDescriptor() {
    return moduleDescriptor;
  }


  @JsonProperty(JSON_PROPERTY_MODULE_DESCRIPTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModuleDescriptor(WeightedDescriptor moduleDescriptor) {
    this.moduleDescriptor = moduleDescriptor;
  }


  public NotificationRecipient key(String key) {
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKey(String key) {
    this.key = key;
  }


  /**
   * Return true if this NotificationRecipient object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationRecipient notificationRecipient = (NotificationRecipient) o;
    return Objects.equals(this.editHtml, notificationRecipient.editHtml) &&
        Objects.equals(this.viewHtml, notificationRecipient.viewHtml) &&
        Objects.equals(this.transports, notificationRecipient.transports) &&
        Objects.equals(this.recipientConfig, notificationRecipient.recipientConfig) &&
        Objects.equals(this.description, notificationRecipient.description) &&
        Objects.equals(this.scopes, notificationRecipient.scopes) &&
        Objects.equals(this.moduleDescriptor, notificationRecipient.moduleDescriptor) &&
        Objects.equals(this.key, notificationRecipient.key);
  }

  @Override
  public int hashCode() {
    return Objects.hash(editHtml, viewHtml, transports, recipientConfig, description, scopes, moduleDescriptor, key);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationRecipient {\n");
    sb.append("    editHtml: ").append(toIndentedString(editHtml)).append("\n");
    sb.append("    viewHtml: ").append(toIndentedString(viewHtml)).append("\n");
    sb.append("    transports: ").append(toIndentedString(transports)).append("\n");
    sb.append("    recipientConfig: ").append(toIndentedString(recipientConfig)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    moduleDescriptor: ").append(toIndentedString(moduleDescriptor)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

