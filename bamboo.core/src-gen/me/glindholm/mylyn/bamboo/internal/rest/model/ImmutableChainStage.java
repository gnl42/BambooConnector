/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import me.glindholm.mylyn.bamboo.internal.rest.model.BambooEntityOid;
import me.glindholm.mylyn.bamboo.internal.rest.model.ImmutableChain;
import me.glindholm.mylyn.bamboo.internal.rest.model.ImmutableJob;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * ImmutableChainStage
 */
@JsonPropertyOrder({
  ImmutableChainStage.JSON_PROPERTY_JOBS,
  ImmutableChainStage.JSON_PROPERTY_DATABASE_ID,
  ImmutableChainStage.JSON_PROPERTY_ENTITY_TYPE,
  ImmutableChainStage.JSON_PROPERTY_MANUAL,
  ImmutableChainStage.JSON_PROPERTY_CHAIN,
  ImmutableChainStage.JSON_PROPERTY_NAME,
  ImmutableChainStage.JSON_PROPERTY_ID,
  ImmutableChainStage.JSON_PROPERTY_FINAL,
  ImmutableChainStage.JSON_PROPERTY_MASTER,
  ImmutableChainStage.JSON_PROPERTY_DESCRIPTION,
  ImmutableChainStage.JSON_PROPERTY_MARKED_FOR_DELETION,
  ImmutableChainStage.JSON_PROPERTY_OID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ImmutableChainStage implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_JOBS = "jobs";
  private Set<ImmutableJob> jobs;

  public static final String JSON_PROPERTY_DATABASE_ID = "databaseId";
  private Long databaseId;

  /**
   * Gets or Sets entityType
   */
  public enum EntityTypeEnum {
    CHAIN("CHAIN"),
    
    STAGE("STAGE"),
    
    JOB("JOB"),
    
    REPOSITORY("REPOSITORY"),
    
    CHAIN_BRANCH("CHAIN_BRANCH"),
    
    JOB_BRANCH("JOB_BRANCH"),
    
    TASK("TASK"),
    
    PROJECT("PROJECT"),
    
    ARTIFACT_DEFINITION("ARTIFACT_DEFINITION"),
    
    DEPLOYMENT_PROJECT("DEPLOYMENT_PROJECT"),
    
    SHARED_CREDENTIAL("SHARED_CREDENTIAL");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ENTITY_TYPE = "entityType";
  private EntityTypeEnum entityType;

  public static final String JSON_PROPERTY_MANUAL = "manual";
  private Boolean manual;

  public static final String JSON_PROPERTY_CHAIN = "chain";
  private ImmutableChain chain;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_FINAL = "final";
  private Boolean _final;

  public static final String JSON_PROPERTY_MASTER = "master";
  private ImmutableChainStage master;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_MARKED_FOR_DELETION = "markedForDeletion";
  private Boolean markedForDeletion;

  public static final String JSON_PROPERTY_OID = "oid";
  private BambooEntityOid oid;

  public ImmutableChainStage() { 
  }

  public ImmutableChainStage jobs(Set<ImmutableJob> jobs) {
    this.jobs = jobs;
    return this;
  }

  public ImmutableChainStage addJobsItem(ImmutableJob jobsItem) {
    if (this.jobs == null) {
      this.jobs = new LinkedHashSet<>();
    }
    this.jobs.add(jobsItem);
    return this;
  }

   /**
   * Get jobs
   * @return jobs
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_JOBS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<ImmutableJob> getJobs() {
    return jobs;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_JOBS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setJobs(Set<ImmutableJob> jobs) {
    this.jobs = jobs;
  }


  public ImmutableChainStage databaseId(Long databaseId) {
    this.databaseId = databaseId;
    return this;
  }

   /**
   * Get databaseId
   * @return databaseId
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DATABASE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getDatabaseId() {
    return databaseId;
  }


  @JsonProperty(JSON_PROPERTY_DATABASE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDatabaseId(Long databaseId) {
    this.databaseId = databaseId;
  }


  public ImmutableChainStage entityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * Get entityType
   * @return entityType
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EntityTypeEnum getEntityType() {
    return entityType;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
  }


  public ImmutableChainStage manual(Boolean manual) {
    this.manual = manual;
    return this;
  }

   /**
   * Get manual
   * @return manual
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MANUAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getManual() {
    return manual;
  }


  @JsonProperty(JSON_PROPERTY_MANUAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setManual(Boolean manual) {
    this.manual = manual;
  }


  public ImmutableChainStage chain(ImmutableChain chain) {
    this.chain = chain;
    return this;
  }

   /**
   * Get chain
   * @return chain
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CHAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ImmutableChain getChain() {
    return chain;
  }


  @JsonProperty(JSON_PROPERTY_CHAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChain(ImmutableChain chain) {
    this.chain = chain;
  }


  public ImmutableChainStage name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public ImmutableChainStage id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  public ImmutableChainStage _final(Boolean _final) {
    this._final = _final;
    return this;
  }

   /**
   * Get _final
   * @return _final
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_FINAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getFinal() {
    return _final;
  }


  @JsonProperty(JSON_PROPERTY_FINAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFinal(Boolean _final) {
    this._final = _final;
  }


  public ImmutableChainStage master(ImmutableChainStage master) {
    this.master = master;
    return this;
  }

   /**
   * Get master
   * @return master
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MASTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ImmutableChainStage getMaster() {
    return master;
  }


  @JsonProperty(JSON_PROPERTY_MASTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaster(ImmutableChainStage master) {
    this.master = master;
  }


  public ImmutableChainStage description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public ImmutableChainStage markedForDeletion(Boolean markedForDeletion) {
    this.markedForDeletion = markedForDeletion;
    return this;
  }

   /**
   * Get markedForDeletion
   * @return markedForDeletion
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MARKED_FOR_DELETION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getMarkedForDeletion() {
    return markedForDeletion;
  }


  @JsonProperty(JSON_PROPERTY_MARKED_FOR_DELETION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMarkedForDeletion(Boolean markedForDeletion) {
    this.markedForDeletion = markedForDeletion;
  }


  public ImmutableChainStage oid(BambooEntityOid oid) {
    this.oid = oid;
    return this;
  }

   /**
   * Get oid
   * @return oid
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_OID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BambooEntityOid getOid() {
    return oid;
  }


  @JsonProperty(JSON_PROPERTY_OID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOid(BambooEntityOid oid) {
    this.oid = oid;
  }


  /**
   * Return true if this ImmutableChainStage object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImmutableChainStage immutableChainStage = (ImmutableChainStage) o;
    return Objects.equals(this.jobs, immutableChainStage.jobs) &&
        Objects.equals(this.databaseId, immutableChainStage.databaseId) &&
        Objects.equals(this.entityType, immutableChainStage.entityType) &&
        Objects.equals(this.manual, immutableChainStage.manual) &&
        Objects.equals(this.chain, immutableChainStage.chain) &&
        Objects.equals(this.name, immutableChainStage.name) &&
        Objects.equals(this.id, immutableChainStage.id) &&
        Objects.equals(this._final, immutableChainStage._final) &&
        Objects.equals(this.master, immutableChainStage.master) &&
        Objects.equals(this.description, immutableChainStage.description) &&
        Objects.equals(this.markedForDeletion, immutableChainStage.markedForDeletion) &&
        Objects.equals(this.oid, immutableChainStage.oid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobs, databaseId, entityType, manual, chain, name, id, _final, master, description, markedForDeletion, oid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImmutableChainStage {\n");
    sb.append("    jobs: ").append(toIndentedString(jobs)).append("\n");
    sb.append("    databaseId: ").append(toIndentedString(databaseId)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    manual: ").append(toIndentedString(manual)).append("\n");
    sb.append("    chain: ").append(toIndentedString(chain)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    _final: ").append(toIndentedString(_final)).append("\n");
    sb.append("    master: ").append(toIndentedString(master)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    markedForDeletion: ").append(toIndentedString(markedForDeletion)).append("\n");
    sb.append("    oid: ").append(toIndentedString(oid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

