/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * BranchSpecificConfiguration
 */
@JsonPropertyOrder({
  BranchSpecificConfiguration.JSON_PROPERTY_BRANCH_CLEANUP_DISABLED,
  BranchSpecificConfiguration.JSON_PROPERTY_IGNORE_SPECS,
  BranchSpecificConfiguration.JSON_PROPERTY_NOTIFICATION_STRATEGY,
  BranchSpecificConfiguration.JSON_PROPERTY_PLAN_BRANCH_WORKFLOW,
  BranchSpecificConfiguration.JSON_PROPERTY_AWAITING_SPECS_EXECUTION,
  BranchSpecificConfiguration.JSON_PROPERTY_VALID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BranchSpecificConfiguration implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_BRANCH_CLEANUP_DISABLED = "branchCleanupDisabled";
  private Boolean branchCleanupDisabled;

  public static final String JSON_PROPERTY_IGNORE_SPECS = "ignoreSpecs";
  private Boolean ignoreSpecs;

  /**
   * Gets or Sets notificationStrategy
   */
  public enum NotificationStrategyEnum {
    NOTIFY_COMMITTERS("NOTIFY_COMMITTERS"),
    
    INHERIT("INHERIT"),
    
    NONE("NONE");

    private String value;

    NotificationStrategyEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static NotificationStrategyEnum fromValue(String value) {
      for (NotificationStrategyEnum b : NotificationStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_NOTIFICATION_STRATEGY = "notificationStrategy";
  private NotificationStrategyEnum notificationStrategy;

  /**
   * Gets or Sets planBranchWorkflow
   */
  public enum PlanBranchWorkflowEnum {
    BRANCH_WORKFLOW("BRANCH_WORKFLOW"),
    
    MANUAL_WORKFLOW("MANUAL_WORKFLOW"),
    
    PULL_REQUEST_WORKFLOW("PULL_REQUEST_WORKFLOW"),
    
    FORK_ENABLED_PULL_REQUEST_WORKFLOW("FORK_ENABLED_PULL_REQUEST_WORKFLOW");

    private String value;

    PlanBranchWorkflowEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PlanBranchWorkflowEnum fromValue(String value) {
      for (PlanBranchWorkflowEnum b : PlanBranchWorkflowEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PLAN_BRANCH_WORKFLOW = "planBranchWorkflow";
  private PlanBranchWorkflowEnum planBranchWorkflow;

  public static final String JSON_PROPERTY_AWAITING_SPECS_EXECUTION = "awaitingSpecsExecution";
  private Boolean awaitingSpecsExecution;

  public static final String JSON_PROPERTY_VALID = "valid";
  private Boolean valid;

  public BranchSpecificConfiguration() { 
  }

  public BranchSpecificConfiguration branchCleanupDisabled(Boolean branchCleanupDisabled) {
    this.branchCleanupDisabled = branchCleanupDisabled;
    return this;
  }

   /**
   * Get branchCleanupDisabled
   * @return branchCleanupDisabled
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BRANCH_CLEANUP_DISABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getBranchCleanupDisabled() {
    return branchCleanupDisabled;
  }


  @JsonProperty(JSON_PROPERTY_BRANCH_CLEANUP_DISABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBranchCleanupDisabled(Boolean branchCleanupDisabled) {
    this.branchCleanupDisabled = branchCleanupDisabled;
  }


  public BranchSpecificConfiguration ignoreSpecs(Boolean ignoreSpecs) {
    this.ignoreSpecs = ignoreSpecs;
    return this;
  }

   /**
   * Get ignoreSpecs
   * @return ignoreSpecs
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_IGNORE_SPECS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIgnoreSpecs() {
    return ignoreSpecs;
  }


  @JsonProperty(JSON_PROPERTY_IGNORE_SPECS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIgnoreSpecs(Boolean ignoreSpecs) {
    this.ignoreSpecs = ignoreSpecs;
  }


  public BranchSpecificConfiguration notificationStrategy(NotificationStrategyEnum notificationStrategy) {
    this.notificationStrategy = notificationStrategy;
    return this;
  }

   /**
   * Get notificationStrategy
   * @return notificationStrategy
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NOTIFICATION_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public NotificationStrategyEnum getNotificationStrategy() {
    return notificationStrategy;
  }


  @JsonProperty(JSON_PROPERTY_NOTIFICATION_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotificationStrategy(NotificationStrategyEnum notificationStrategy) {
    this.notificationStrategy = notificationStrategy;
  }


  public BranchSpecificConfiguration planBranchWorkflow(PlanBranchWorkflowEnum planBranchWorkflow) {
    this.planBranchWorkflow = planBranchWorkflow;
    return this;
  }

   /**
   * Get planBranchWorkflow
   * @return planBranchWorkflow
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLAN_BRANCH_WORKFLOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PlanBranchWorkflowEnum getPlanBranchWorkflow() {
    return planBranchWorkflow;
  }


  @JsonProperty(JSON_PROPERTY_PLAN_BRANCH_WORKFLOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlanBranchWorkflow(PlanBranchWorkflowEnum planBranchWorkflow) {
    this.planBranchWorkflow = planBranchWorkflow;
  }


  public BranchSpecificConfiguration awaitingSpecsExecution(Boolean awaitingSpecsExecution) {
    this.awaitingSpecsExecution = awaitingSpecsExecution;
    return this;
  }

   /**
   * Get awaitingSpecsExecution
   * @return awaitingSpecsExecution
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_AWAITING_SPECS_EXECUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAwaitingSpecsExecution() {
    return awaitingSpecsExecution;
  }


  @JsonProperty(JSON_PROPERTY_AWAITING_SPECS_EXECUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAwaitingSpecsExecution(Boolean awaitingSpecsExecution) {
    this.awaitingSpecsExecution = awaitingSpecsExecution;
  }


  public BranchSpecificConfiguration valid(Boolean valid) {
    this.valid = valid;
    return this;
  }

   /**
   * Get valid
   * @return valid
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_VALID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getValid() {
    return valid;
  }


  @JsonProperty(JSON_PROPERTY_VALID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValid(Boolean valid) {
    this.valid = valid;
  }


  /**
   * Return true if this BranchSpecificConfiguration object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BranchSpecificConfiguration branchSpecificConfiguration = (BranchSpecificConfiguration) o;
    return Objects.equals(this.branchCleanupDisabled, branchSpecificConfiguration.branchCleanupDisabled) &&
        Objects.equals(this.ignoreSpecs, branchSpecificConfiguration.ignoreSpecs) &&
        Objects.equals(this.notificationStrategy, branchSpecificConfiguration.notificationStrategy) &&
        Objects.equals(this.planBranchWorkflow, branchSpecificConfiguration.planBranchWorkflow) &&
        Objects.equals(this.awaitingSpecsExecution, branchSpecificConfiguration.awaitingSpecsExecution) &&
        Objects.equals(this.valid, branchSpecificConfiguration.valid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(branchCleanupDisabled, ignoreSpecs, notificationStrategy, planBranchWorkflow, awaitingSpecsExecution, valid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BranchSpecificConfiguration {\n");
    sb.append("    branchCleanupDisabled: ").append(toIndentedString(branchCleanupDisabled)).append("\n");
    sb.append("    ignoreSpecs: ").append(toIndentedString(ignoreSpecs)).append("\n");
    sb.append("    notificationStrategy: ").append(toIndentedString(notificationStrategy)).append("\n");
    sb.append("    planBranchWorkflow: ").append(toIndentedString(planBranchWorkflow)).append("\n");
    sb.append("    awaitingSpecsExecution: ").append(toIndentedString(awaitingSpecsExecution)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

