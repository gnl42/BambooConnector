/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import java.util.Date;
import me.glindholm.mylyn.bamboo.internal.rest.model.CommitFileList;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * ResultChange
 */
@JsonPropertyOrder({
  ResultChange.JSON_PROPERTY_AUTHOR,
  ResultChange.JSON_PROPERTY_COMMENT,
  ResultChange.JSON_PROPERTY_CHANGESET_ID,
  ResultChange.JSON_PROPERTY_COMMIT_URL,
  ResultChange.JSON_PROPERTY_DATE,
  ResultChange.JSON_PROPERTY_FILES
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ResultChange implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_AUTHOR = "author";
  private String author;

  public static final String JSON_PROPERTY_COMMENT = "comment";
  private String comment;

  public static final String JSON_PROPERTY_CHANGESET_ID = "changesetId";
  private String changesetId;

  public static final String JSON_PROPERTY_COMMIT_URL = "commitUrl";
  private String commitUrl;

  public static final String JSON_PROPERTY_DATE = "date";
  private Date date;

  public static final String JSON_PROPERTY_FILES = "files";
  private CommitFileList files;

  public ResultChange() { 
  }

  public ResultChange author(String author) {
    this.author = author;
    return this;
  }

   /**
   * Get author
   * @return author
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_AUTHOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAuthor() {
    return author;
  }


  @JsonProperty(JSON_PROPERTY_AUTHOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthor(String author) {
    this.author = author;
  }


  public ResultChange comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getComment() {
    return comment;
  }


  @JsonProperty(JSON_PROPERTY_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setComment(String comment) {
    this.comment = comment;
  }


  public ResultChange changesetId(String changesetId) {
    this.changesetId = changesetId;
    return this;
  }

   /**
   * Get changesetId
   * @return changesetId
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CHANGESET_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getChangesetId() {
    return changesetId;
  }


  @JsonProperty(JSON_PROPERTY_CHANGESET_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChangesetId(String changesetId) {
    this.changesetId = changesetId;
  }


  public ResultChange commitUrl(String commitUrl) {
    this.commitUrl = commitUrl;
    return this;
  }

   /**
   * Get commitUrl
   * @return commitUrl
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_COMMIT_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCommitUrl() {
    return commitUrl;
  }


  @JsonProperty(JSON_PROPERTY_COMMIT_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommitUrl(String commitUrl) {
    this.commitUrl = commitUrl;
  }


  public ResultChange date(Date date) {
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Date getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDate(Date date) {
    this.date = date;
  }


  public ResultChange files(CommitFileList files) {
    this.files = files;
    return this;
  }

   /**
   * Get files
   * @return files
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CommitFileList getFiles() {
    return files;
  }


  @JsonProperty(JSON_PROPERTY_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFiles(CommitFileList files) {
    this.files = files;
  }


  /**
   * Return true if this ResultChange object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResultChange resultChange = (ResultChange) o;
    return Objects.equals(this.author, resultChange.author) &&
        Objects.equals(this.comment, resultChange.comment) &&
        Objects.equals(this.changesetId, resultChange.changesetId) &&
        Objects.equals(this.commitUrl, resultChange.commitUrl) &&
        Objects.equals(this.date, resultChange.date) &&
        Objects.equals(this.files, resultChange.files);
  }

  @Override
  public int hashCode() {
    return Objects.hash(author, comment, changesetId, commitUrl, date, files);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResultChange {\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    changesetId: ").append(toIndentedString(changesetId)).append("\n");
    sb.append("    commitUrl: ").append(toIndentedString(commitUrl)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

