/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * RestMailConfiguration
 */
@JsonPropertyOrder({
  RestMailConfiguration.JSON_PROPERTY_SELF,
  RestMailConfiguration.JSON_PROPERTY_NAME,
  RestMailConfiguration.JSON_PROPERTY_FROM_ADDRESS,
  RestMailConfiguration.JSON_PROPERTY_SUBJECT_PREFIX,
  RestMailConfiguration.JSON_PROPERTY_PRECEDENCE_BULK_HEADER_EXCLUDED,
  RestMailConfiguration.JSON_PROPERTY_EMAIL_SETTING,
  RestMailConfiguration.JSON_PROPERTY_SMTP_SERVER,
  RestMailConfiguration.JSON_PROPERTY_SMTP_PORT,
  RestMailConfiguration.JSON_PROPERTY_SMTP_USERNAME,
  RestMailConfiguration.JSON_PROPERTY_SMTP_PASSWORD,
  RestMailConfiguration.JSON_PROPERTY_TLS_ENABLED,
  RestMailConfiguration.JSON_PROPERTY_JNDI_LOCATION
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RestMailConfiguration implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_SELF = "self";
  private String self;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_FROM_ADDRESS = "fromAddress";
  private String fromAddress;

  public static final String JSON_PROPERTY_SUBJECT_PREFIX = "subjectPrefix";
  private String subjectPrefix;

  public static final String JSON_PROPERTY_PRECEDENCE_BULK_HEADER_EXCLUDED = "precedenceBulkHeaderExcluded";
  private Boolean precedenceBulkHeaderExcluded;

  public static final String JSON_PROPERTY_EMAIL_SETTING = "emailSetting";
  private String emailSetting;

  public static final String JSON_PROPERTY_SMTP_SERVER = "smtpServer";
  private String smtpServer;

  public static final String JSON_PROPERTY_SMTP_PORT = "smtpPort";
  private String smtpPort;

  public static final String JSON_PROPERTY_SMTP_USERNAME = "smtpUsername";
  private String smtpUsername;

  public static final String JSON_PROPERTY_SMTP_PASSWORD = "smtpPassword";
  private String smtpPassword;

  public static final String JSON_PROPERTY_TLS_ENABLED = "tlsEnabled";
  private Boolean tlsEnabled;

  public static final String JSON_PROPERTY_JNDI_LOCATION = "jndiLocation";
  private String jndiLocation;

  public RestMailConfiguration() { 
  }

  @JsonCreator
  public RestMailConfiguration(
    @JsonProperty(JSON_PROPERTY_SELF) String self
  ) {
  this();
    this.self = self;
  }

   /**
   * Get self
   * @return self
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SELF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSelf() {
    return self;
  }




  public RestMailConfiguration name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @Schema(example = "Amazing SMTP Server", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public RestMailConfiguration fromAddress(String fromAddress) {
    this.fromAddress = fromAddress;
    return this;
  }

   /**
   * Get fromAddress
   * @return fromAddress
  **/
  @jakarta.annotation.Nullable
  @Schema(example = "mail@mailymail.com", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_FROM_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFromAddress() {
    return fromAddress;
  }


  @JsonProperty(JSON_PROPERTY_FROM_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFromAddress(String fromAddress) {
    this.fromAddress = fromAddress;
  }


  public RestMailConfiguration subjectPrefix(String subjectPrefix) {
    this.subjectPrefix = subjectPrefix;
    return this;
  }

   /**
   * Get subjectPrefix
   * @return subjectPrefix
  **/
  @jakarta.annotation.Nullable
  @Schema(example = "[READ THIS FROM BAMBOO]", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SUBJECT_PREFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubjectPrefix() {
    return subjectPrefix;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECT_PREFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubjectPrefix(String subjectPrefix) {
    this.subjectPrefix = subjectPrefix;
  }


  public RestMailConfiguration precedenceBulkHeaderExcluded(Boolean precedenceBulkHeaderExcluded) {
    this.precedenceBulkHeaderExcluded = precedenceBulkHeaderExcluded;
    return this;
  }

   /**
   * Get precedenceBulkHeaderExcluded
   * @return precedenceBulkHeaderExcluded
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PRECEDENCE_BULK_HEADER_EXCLUDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPrecedenceBulkHeaderExcluded() {
    return precedenceBulkHeaderExcluded;
  }


  @JsonProperty(JSON_PROPERTY_PRECEDENCE_BULK_HEADER_EXCLUDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrecedenceBulkHeaderExcluded(Boolean precedenceBulkHeaderExcluded) {
    this.precedenceBulkHeaderExcluded = precedenceBulkHeaderExcluded;
  }


  public RestMailConfiguration emailSetting(String emailSetting) {
    this.emailSetting = emailSetting;
    return this;
  }

   /**
   * Get emailSetting
   * @return emailSetting
  **/
  @jakarta.annotation.Nullable
  @Schema(example = "SMTP", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_EMAIL_SETTING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEmailSetting() {
    return emailSetting;
  }


  @JsonProperty(JSON_PROPERTY_EMAIL_SETTING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmailSetting(String emailSetting) {
    this.emailSetting = emailSetting;
  }


  public RestMailConfiguration smtpServer(String smtpServer) {
    this.smtpServer = smtpServer;
    return this;
  }

   /**
   * Get smtpServer
   * @return smtpServer
  **/
  @jakarta.annotation.Nullable
  @Schema(example = "mail.thisisnotarealserver.com", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SMTP_SERVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSmtpServer() {
    return smtpServer;
  }


  @JsonProperty(JSON_PROPERTY_SMTP_SERVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSmtpServer(String smtpServer) {
    this.smtpServer = smtpServer;
  }


  public RestMailConfiguration smtpPort(String smtpPort) {
    this.smtpPort = smtpPort;
    return this;
  }

   /**
   * Get smtpPort
   * @return smtpPort
  **/
  @jakarta.annotation.Nullable
  @Schema(example = "25", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SMTP_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSmtpPort() {
    return smtpPort;
  }


  @JsonProperty(JSON_PROPERTY_SMTP_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSmtpPort(String smtpPort) {
    this.smtpPort = smtpPort;
  }


  public RestMailConfiguration smtpUsername(String smtpUsername) {
    this.smtpUsername = smtpUsername;
    return this;
  }

   /**
   * Get smtpUsername
   * @return smtpUsername
  **/
  @jakarta.annotation.Nullable
  @Schema(example = "user", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SMTP_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSmtpUsername() {
    return smtpUsername;
  }


  @JsonProperty(JSON_PROPERTY_SMTP_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSmtpUsername(String smtpUsername) {
    this.smtpUsername = smtpUsername;
  }


  public RestMailConfiguration smtpPassword(String smtpPassword) {
    this.smtpPassword = smtpPassword;
    return this;
  }

   /**
   * Get smtpPassword
   * @return smtpPassword
  **/
  @jakarta.annotation.Nullable
  @Schema(example = "pass", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SMTP_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSmtpPassword() {
    return smtpPassword;
  }


  @JsonProperty(JSON_PROPERTY_SMTP_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSmtpPassword(String smtpPassword) {
    this.smtpPassword = smtpPassword;
  }


  public RestMailConfiguration tlsEnabled(Boolean tlsEnabled) {
    this.tlsEnabled = tlsEnabled;
    return this;
  }

   /**
   * Get tlsEnabled
   * @return tlsEnabled
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TLS_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTlsEnabled() {
    return tlsEnabled;
  }


  @JsonProperty(JSON_PROPERTY_TLS_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTlsEnabled(Boolean tlsEnabled) {
    this.tlsEnabled = tlsEnabled;
  }


  public RestMailConfiguration jndiLocation(String jndiLocation) {
    this.jndiLocation = jndiLocation;
    return this;
  }

   /**
   * Get jndiLocation
   * @return jndiLocation
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_JNDI_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getJndiLocation() {
    return jndiLocation;
  }


  @JsonProperty(JSON_PROPERTY_JNDI_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setJndiLocation(String jndiLocation) {
    this.jndiLocation = jndiLocation;
  }


  /**
   * Return true if this RestMailConfiguration object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestMailConfiguration restMailConfiguration = (RestMailConfiguration) o;
    return Objects.equals(this.self, restMailConfiguration.self) &&
        Objects.equals(this.name, restMailConfiguration.name) &&
        Objects.equals(this.fromAddress, restMailConfiguration.fromAddress) &&
        Objects.equals(this.subjectPrefix, restMailConfiguration.subjectPrefix) &&
        Objects.equals(this.precedenceBulkHeaderExcluded, restMailConfiguration.precedenceBulkHeaderExcluded) &&
        Objects.equals(this.emailSetting, restMailConfiguration.emailSetting) &&
        Objects.equals(this.smtpServer, restMailConfiguration.smtpServer) &&
        Objects.equals(this.smtpPort, restMailConfiguration.smtpPort) &&
        Objects.equals(this.smtpUsername, restMailConfiguration.smtpUsername) &&
        Objects.equals(this.smtpPassword, restMailConfiguration.smtpPassword) &&
        Objects.equals(this.tlsEnabled, restMailConfiguration.tlsEnabled) &&
        Objects.equals(this.jndiLocation, restMailConfiguration.jndiLocation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(self, name, fromAddress, subjectPrefix, precedenceBulkHeaderExcluded, emailSetting, smtpServer, smtpPort, smtpUsername, smtpPassword, tlsEnabled, jndiLocation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestMailConfiguration {\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    fromAddress: ").append(toIndentedString(fromAddress)).append("\n");
    sb.append("    subjectPrefix: ").append(toIndentedString(subjectPrefix)).append("\n");
    sb.append("    precedenceBulkHeaderExcluded: ").append(toIndentedString(precedenceBulkHeaderExcluded)).append("\n");
    sb.append("    emailSetting: ").append(toIndentedString(emailSetting)).append("\n");
    sb.append("    smtpServer: ").append(toIndentedString(smtpServer)).append("\n");
    sb.append("    smtpPort: ").append(toIndentedString(smtpPort)).append("\n");
    sb.append("    smtpUsername: ").append(toIndentedString(smtpUsername)).append("\n");
    sb.append("    smtpPassword: ").append(toIndentedString(smtpPassword)).append("\n");
    sb.append("    tlsEnabled: ").append(toIndentedString(tlsEnabled)).append("\n");
    sb.append("    jndiLocation: ").append(toIndentedString(jndiLocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

