/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestTestResultErrorsList;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * RestTestResult
 */
@JsonPropertyOrder({
  RestTestResult.JSON_PROPERTY_TEST_CASE_ID,
  RestTestResult.JSON_PROPERTY_CLASS_NAME,
  RestTestResult.JSON_PROPERTY_METHOD_NAME,
  RestTestResult.JSON_PROPERTY_STATUS,
  RestTestResult.JSON_PROPERTY_DURATION,
  RestTestResult.JSON_PROPERTY_DURATION_IN_SECONDS,
  RestTestResult.JSON_PROPERTY_ERRORS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RestTestResult implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_TEST_CASE_ID = "testCaseId";
  private String testCaseId;

  public static final String JSON_PROPERTY_CLASS_NAME = "className";
  private String className;

  public static final String JSON_PROPERTY_METHOD_NAME = "methodName";
  private String methodName;

  public static final String JSON_PROPERTY_STATUS = "status";
  private String status;

  public static final String JSON_PROPERTY_DURATION = "duration";
  private Long duration;

  public static final String JSON_PROPERTY_DURATION_IN_SECONDS = "durationInSeconds";
  private Long durationInSeconds;

  public static final String JSON_PROPERTY_ERRORS = "errors";
  private RestTestResultErrorsList errors;

  public RestTestResult() { 
  }

  @JsonCreator
  public RestTestResult(
    @JsonProperty(JSON_PROPERTY_DURATION) Long duration, 
    @JsonProperty(JSON_PROPERTY_DURATION_IN_SECONDS) Long durationInSeconds
  ) {
  this();
    this.duration = duration;
    this.durationInSeconds = durationInSeconds;
  }

  public RestTestResult testCaseId(String testCaseId) {
    this.testCaseId = testCaseId;
    return this;
  }

   /**
   * Get testCaseId
   * @return testCaseId
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TEST_CASE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTestCaseId() {
    return testCaseId;
  }


  @JsonProperty(JSON_PROPERTY_TEST_CASE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTestCaseId(String testCaseId) {
    this.testCaseId = testCaseId;
  }


  public RestTestResult className(String className) {
    this.className = className;
    return this;
  }

   /**
   * Get className
   * @return className
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CLASS_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getClassName() {
    return className;
  }


  @JsonProperty(JSON_PROPERTY_CLASS_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClassName(String className) {
    this.className = className;
  }


  public RestTestResult methodName(String methodName) {
    this.methodName = methodName;
    return this;
  }

   /**
   * Get methodName
   * @return methodName
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_METHOD_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMethodName() {
    return methodName;
  }


  @JsonProperty(JSON_PROPERTY_METHOD_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMethodName(String methodName) {
    this.methodName = methodName;
  }


  public RestTestResult status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(String status) {
    this.status = status;
  }


   /**
   * Get duration
   * @return duration
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getDuration() {
    return duration;
  }




   /**
   * Get durationInSeconds
   * @return durationInSeconds
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DURATION_IN_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getDurationInSeconds() {
    return durationInSeconds;
  }




  public RestTestResult errors(RestTestResultErrorsList errors) {
    this.errors = errors;
    return this;
  }

   /**
   * Get errors
   * @return errors
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ERRORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestTestResultErrorsList getErrors() {
    return errors;
  }


  @JsonProperty(JSON_PROPERTY_ERRORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setErrors(RestTestResultErrorsList errors) {
    this.errors = errors;
  }


  /**
   * Return true if this RestTestResult object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestTestResult restTestResult = (RestTestResult) o;
    return Objects.equals(this.testCaseId, restTestResult.testCaseId) &&
        Objects.equals(this.className, restTestResult.className) &&
        Objects.equals(this.methodName, restTestResult.methodName) &&
        Objects.equals(this.status, restTestResult.status) &&
        Objects.equals(this.duration, restTestResult.duration) &&
        Objects.equals(this.durationInSeconds, restTestResult.durationInSeconds) &&
        Objects.equals(this.errors, restTestResult.errors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(testCaseId, className, methodName, status, duration, durationInSeconds, errors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestTestResult {\n");
    sb.append("    testCaseId: ").append(toIndentedString(testCaseId)).append("\n");
    sb.append("    className: ").append(toIndentedString(className)).append("\n");
    sb.append("    methodName: ").append(toIndentedString(methodName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    durationInSeconds: ").append(toIndentedString(durationInSeconds)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

