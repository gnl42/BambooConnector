/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * WebRepositoryViewer
 */
@JsonPropertyOrder({
  WebRepositoryViewer.JSON_PROPERTY_SHORT_KEY,
  WebRepositoryViewer.JSON_PROPERTY_SUPPORTED_REPOSITORIES,
  WebRepositoryViewer.JSON_PROPERTY_NAME,
  WebRepositoryViewer.JSON_PROPERTY_KEY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class WebRepositoryViewer implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_SHORT_KEY = "shortKey";
  private String shortKey;

  public static final String JSON_PROPERTY_SUPPORTED_REPOSITORIES = "supportedRepositories";
  private List<String> supportedRepositories;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_KEY = "key";
  private String key;

  public WebRepositoryViewer() { 
  }

  public WebRepositoryViewer shortKey(String shortKey) {
    this.shortKey = shortKey;
    return this;
  }

   /**
   * Get shortKey
   * @return shortKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SHORT_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getShortKey() {
    return shortKey;
  }


  @JsonProperty(JSON_PROPERTY_SHORT_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShortKey(String shortKey) {
    this.shortKey = shortKey;
  }


  public WebRepositoryViewer supportedRepositories(List<String> supportedRepositories) {
    this.supportedRepositories = supportedRepositories;
    return this;
  }

  public WebRepositoryViewer addSupportedRepositoriesItem(String supportedRepositoriesItem) {
    if (this.supportedRepositories == null) {
      this.supportedRepositories = new ArrayList<>();
    }
    this.supportedRepositories.add(supportedRepositoriesItem);
    return this;
  }

   /**
   * Get supportedRepositories
   * @return supportedRepositories
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SUPPORTED_REPOSITORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getSupportedRepositories() {
    return supportedRepositories;
  }


  @JsonProperty(JSON_PROPERTY_SUPPORTED_REPOSITORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSupportedRepositories(List<String> supportedRepositories) {
    this.supportedRepositories = supportedRepositories;
  }


  public WebRepositoryViewer name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public WebRepositoryViewer key(String key) {
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKey(String key) {
    this.key = key;
  }


  /**
   * Return true if this WebRepositoryViewer object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebRepositoryViewer webRepositoryViewer = (WebRepositoryViewer) o;
    return Objects.equals(this.shortKey, webRepositoryViewer.shortKey) &&
        Objects.equals(this.supportedRepositories, webRepositoryViewer.supportedRepositories) &&
        Objects.equals(this.name, webRepositoryViewer.name) &&
        Objects.equals(this.key, webRepositoryViewer.key);
  }

  @Override
  public int hashCode() {
    return Objects.hash(shortKey, supportedRepositories, name, key);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebRepositoryViewer {\n");
    sb.append("    shortKey: ").append(toIndentedString(shortKey)).append("\n");
    sb.append("    supportedRepositories: ").append(toIndentedString(supportedRepositories)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

