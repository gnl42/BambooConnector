/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import me.glindholm.mylyn.bamboo.internal.rest.model.ImmutableRequirementSet;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestKey;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestOperations;
import me.glindholm.mylyn.bamboo.internal.rest.model.TaskDefinition;
import me.glindholm.mylyn.bamboo.internal.rest.model.TriggerDefinition;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * RestEnvironment
 */
@JsonPropertyOrder({
  RestEnvironment.JSON_PROPERTY_ID,
  RestEnvironment.JSON_PROPERTY_KEY,
  RestEnvironment.JSON_PROPERTY_NAME,
  RestEnvironment.JSON_PROPERTY_DESCRIPTION,
  RestEnvironment.JSON_PROPERTY_DEPLOYMENT_PROJECT_ID,
  RestEnvironment.JSON_PROPERTY_OPERATIONS,
  RestEnvironment.JSON_PROPERTY_POSITION,
  RestEnvironment.JSON_PROPERTY_CONFIGURATION_STATE,
  RestEnvironment.JSON_PROPERTY_SUSPENDED,
  RestEnvironment.JSON_PROPERTY_TRIGGER_DEFINITIONS,
  RestEnvironment.JSON_PROPERTY_REQUIREMENT_SET,
  RestEnvironment.JSON_PROPERTY_TASK_DEFINITIONS_SUPPLIER,
  RestEnvironment.JSON_PROPERTY_TRIGGER_DEFINITIONS_SUPPLIER,
  RestEnvironment.JSON_PROPERTY_TASK_DEFINITIONS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RestEnvironment implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_KEY = "key";
  private RestKey key;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_DEPLOYMENT_PROJECT_ID = "deploymentProjectId";
  private Long deploymentProjectId;

  public static final String JSON_PROPERTY_OPERATIONS = "operations";
  private RestOperations operations;

  public static final String JSON_PROPERTY_POSITION = "position";
  private Integer position;

  /**
   * Gets or Sets configurationState
   */
  public enum ConfigurationStateEnum {
    CREATED("CREATED"),
    
    DETAILED("DETAILED"),
    
    TASKED("TASKED");

    private String value;

    ConfigurationStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ConfigurationStateEnum fromValue(String value) {
      for (ConfigurationStateEnum b : ConfigurationStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CONFIGURATION_STATE = "configurationState";
  private ConfigurationStateEnum configurationState;

  public static final String JSON_PROPERTY_SUSPENDED = "suspended";
  private Boolean suspended;

  public static final String JSON_PROPERTY_TRIGGER_DEFINITIONS = "triggerDefinitions";
  private List<TriggerDefinition> triggerDefinitions;

  public static final String JSON_PROPERTY_REQUIREMENT_SET = "requirementSet";
  private ImmutableRequirementSet requirementSet;

  public static final String JSON_PROPERTY_TASK_DEFINITIONS_SUPPLIER = "taskDefinitionsSupplier";
  private Object taskDefinitionsSupplier;

  public static final String JSON_PROPERTY_TRIGGER_DEFINITIONS_SUPPLIER = "triggerDefinitionsSupplier";
  private Object triggerDefinitionsSupplier;

  public static final String JSON_PROPERTY_TASK_DEFINITIONS = "taskDefinitions";
  private List<TaskDefinition> taskDefinitions;

  public RestEnvironment() { 
  }

  public RestEnvironment id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  public RestEnvironment key(RestKey key) {
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestKey getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKey(RestKey key) {
    this.key = key;
  }


  public RestEnvironment name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public RestEnvironment description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public RestEnvironment deploymentProjectId(Long deploymentProjectId) {
    this.deploymentProjectId = deploymentProjectId;
    return this;
  }

   /**
   * Get deploymentProjectId
   * @return deploymentProjectId
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DEPLOYMENT_PROJECT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getDeploymentProjectId() {
    return deploymentProjectId;
  }


  @JsonProperty(JSON_PROPERTY_DEPLOYMENT_PROJECT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeploymentProjectId(Long deploymentProjectId) {
    this.deploymentProjectId = deploymentProjectId;
  }


  public RestEnvironment operations(RestOperations operations) {
    this.operations = operations;
    return this;
  }

   /**
   * Get operations
   * @return operations
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_OPERATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestOperations getOperations() {
    return operations;
  }


  @JsonProperty(JSON_PROPERTY_OPERATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperations(RestOperations operations) {
    this.operations = operations;
  }


  public RestEnvironment position(Integer position) {
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_POSITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPosition() {
    return position;
  }


  @JsonProperty(JSON_PROPERTY_POSITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPosition(Integer position) {
    this.position = position;
  }


  public RestEnvironment configurationState(ConfigurationStateEnum configurationState) {
    this.configurationState = configurationState;
    return this;
  }

   /**
   * Get configurationState
   * @return configurationState
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CONFIGURATION_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConfigurationStateEnum getConfigurationState() {
    return configurationState;
  }


  @JsonProperty(JSON_PROPERTY_CONFIGURATION_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfigurationState(ConfigurationStateEnum configurationState) {
    this.configurationState = configurationState;
  }


  public RestEnvironment suspended(Boolean suspended) {
    this.suspended = suspended;
    return this;
  }

   /**
   * Get suspended
   * @return suspended
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SUSPENDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSuspended() {
    return suspended;
  }


  @JsonProperty(JSON_PROPERTY_SUSPENDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSuspended(Boolean suspended) {
    this.suspended = suspended;
  }


  public RestEnvironment triggerDefinitions(List<TriggerDefinition> triggerDefinitions) {
    this.triggerDefinitions = triggerDefinitions;
    return this;
  }

  public RestEnvironment addTriggerDefinitionsItem(TriggerDefinition triggerDefinitionsItem) {
    if (this.triggerDefinitions == null) {
      this.triggerDefinitions = new ArrayList<>();
    }
    this.triggerDefinitions.add(triggerDefinitionsItem);
    return this;
  }

   /**
   * Get triggerDefinitions
   * @return triggerDefinitions
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TRIGGER_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<TriggerDefinition> getTriggerDefinitions() {
    return triggerDefinitions;
  }


  @JsonProperty(JSON_PROPERTY_TRIGGER_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTriggerDefinitions(List<TriggerDefinition> triggerDefinitions) {
    this.triggerDefinitions = triggerDefinitions;
  }


  public RestEnvironment requirementSet(ImmutableRequirementSet requirementSet) {
    this.requirementSet = requirementSet;
    return this;
  }

   /**
   * Get requirementSet
   * @return requirementSet
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_REQUIREMENT_SET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ImmutableRequirementSet getRequirementSet() {
    return requirementSet;
  }


  @JsonProperty(JSON_PROPERTY_REQUIREMENT_SET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequirementSet(ImmutableRequirementSet requirementSet) {
    this.requirementSet = requirementSet;
  }


  public RestEnvironment taskDefinitionsSupplier(Object taskDefinitionsSupplier) {
    this.taskDefinitionsSupplier = taskDefinitionsSupplier;
    return this;
  }

   /**
   * Get taskDefinitionsSupplier
   * @return taskDefinitionsSupplier
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TASK_DEFINITIONS_SUPPLIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getTaskDefinitionsSupplier() {
    return taskDefinitionsSupplier;
  }


  @JsonProperty(JSON_PROPERTY_TASK_DEFINITIONS_SUPPLIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaskDefinitionsSupplier(Object taskDefinitionsSupplier) {
    this.taskDefinitionsSupplier = taskDefinitionsSupplier;
  }


  public RestEnvironment triggerDefinitionsSupplier(Object triggerDefinitionsSupplier) {
    this.triggerDefinitionsSupplier = triggerDefinitionsSupplier;
    return this;
  }

   /**
   * Get triggerDefinitionsSupplier
   * @return triggerDefinitionsSupplier
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TRIGGER_DEFINITIONS_SUPPLIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getTriggerDefinitionsSupplier() {
    return triggerDefinitionsSupplier;
  }


  @JsonProperty(JSON_PROPERTY_TRIGGER_DEFINITIONS_SUPPLIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTriggerDefinitionsSupplier(Object triggerDefinitionsSupplier) {
    this.triggerDefinitionsSupplier = triggerDefinitionsSupplier;
  }


  public RestEnvironment taskDefinitions(List<TaskDefinition> taskDefinitions) {
    this.taskDefinitions = taskDefinitions;
    return this;
  }

  public RestEnvironment addTaskDefinitionsItem(TaskDefinition taskDefinitionsItem) {
    if (this.taskDefinitions == null) {
      this.taskDefinitions = new ArrayList<>();
    }
    this.taskDefinitions.add(taskDefinitionsItem);
    return this;
  }

   /**
   * Get taskDefinitions
   * @return taskDefinitions
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TASK_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<TaskDefinition> getTaskDefinitions() {
    return taskDefinitions;
  }


  @JsonProperty(JSON_PROPERTY_TASK_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaskDefinitions(List<TaskDefinition> taskDefinitions) {
    this.taskDefinitions = taskDefinitions;
  }


  /**
   * Return true if this RestEnvironment object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestEnvironment restEnvironment = (RestEnvironment) o;
    return Objects.equals(this.id, restEnvironment.id) &&
        Objects.equals(this.key, restEnvironment.key) &&
        Objects.equals(this.name, restEnvironment.name) &&
        Objects.equals(this.description, restEnvironment.description) &&
        Objects.equals(this.deploymentProjectId, restEnvironment.deploymentProjectId) &&
        Objects.equals(this.operations, restEnvironment.operations) &&
        Objects.equals(this.position, restEnvironment.position) &&
        Objects.equals(this.configurationState, restEnvironment.configurationState) &&
        Objects.equals(this.suspended, restEnvironment.suspended) &&
        Objects.equals(this.triggerDefinitions, restEnvironment.triggerDefinitions) &&
        Objects.equals(this.requirementSet, restEnvironment.requirementSet) &&
        Objects.equals(this.taskDefinitionsSupplier, restEnvironment.taskDefinitionsSupplier) &&
        Objects.equals(this.triggerDefinitionsSupplier, restEnvironment.triggerDefinitionsSupplier) &&
        Objects.equals(this.taskDefinitions, restEnvironment.taskDefinitions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, key, name, description, deploymentProjectId, operations, position, configurationState, suspended, triggerDefinitions, requirementSet, taskDefinitionsSupplier, triggerDefinitionsSupplier, taskDefinitions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestEnvironment {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    deploymentProjectId: ").append(toIndentedString(deploymentProjectId)).append("\n");
    sb.append("    operations: ").append(toIndentedString(operations)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    configurationState: ").append(toIndentedString(configurationState)).append("\n");
    sb.append("    suspended: ").append(toIndentedString(suspended)).append("\n");
    sb.append("    triggerDefinitions: ").append(toIndentedString(triggerDefinitions)).append("\n");
    sb.append("    requirementSet: ").append(toIndentedString(requirementSet)).append("\n");
    sb.append("    taskDefinitionsSupplier: ").append(toIndentedString(taskDefinitionsSupplier)).append("\n");
    sb.append("    triggerDefinitionsSupplier: ").append(toIndentedString(triggerDefinitionsSupplier)).append("\n");
    sb.append("    taskDefinitions: ").append(toIndentedString(taskDefinitions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

