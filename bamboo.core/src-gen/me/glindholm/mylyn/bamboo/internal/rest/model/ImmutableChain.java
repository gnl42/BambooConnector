/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import me.glindholm.mylyn.bamboo.internal.rest.model.BambooEntityOid;
import me.glindholm.mylyn.bamboo.internal.rest.model.BuildDefinition;
import me.glindholm.mylyn.bamboo.internal.rest.model.BuildLogger;
import me.glindholm.mylyn.bamboo.internal.rest.model.ImmutableChainStage;
import me.glindholm.mylyn.bamboo.internal.rest.model.ImmutableJob;
import me.glindholm.mylyn.bamboo.internal.rest.model.ImmutableResultsSummary;
import me.glindholm.mylyn.bamboo.internal.rest.model.ImmutableVcsBambooSpecsSource;
import me.glindholm.mylyn.bamboo.internal.rest.model.NotificationSet;
import me.glindholm.mylyn.bamboo.internal.rest.model.PlanKey;
import me.glindholm.mylyn.bamboo.internal.rest.model.PlanRepositoryDefinition;
import me.glindholm.mylyn.bamboo.internal.rest.model.PlanResultKey;
import me.glindholm.mylyn.bamboo.internal.rest.model.Project;
import me.glindholm.mylyn.bamboo.internal.rest.model.RepositoryDefinition;
import me.glindholm.mylyn.bamboo.internal.rest.model.TriggerDefinition;
import me.glindholm.mylyn.bamboo.internal.rest.model.VariableDefinition;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * ImmutableChain
 */
@JsonPropertyOrder({
  ImmutableChain.JSON_PROPERTY_NOTIFICATION_SET,
  ImmutableChain.JSON_PROPERTY_ALL_JOBS,
  ImmutableChain.JSON_PROPERTY_STORAGE_TAG,
  ImmutableChain.JSON_PROPERTY_VCS_BAMBOO_SPECS_SOURCE,
  ImmutableChain.JSON_PROPERTY_STAGES,
  ImmutableChain.JSON_PROPERTY_ALL_STAGES,
  ImmutableChain.JSON_PROPERTY_JOB_COUNT,
  ImmutableChain.JSON_PROPERTY_PLAN_REPOSITORY_DEFINITIONS,
  ImmutableChain.JSON_PROPERTY_ENTITY_TYPE,
  ImmutableChain.JSON_PROPERTY_EFFECTIVE_REPOSITORY_DEFINITIONS,
  ImmutableChain.JSON_PROPERTY_LAST_RESULT_KEY,
  ImmutableChain.JSON_PROPERTY_CREATION_DATE,
  ImmutableChain.JSON_PROPERTY_MASTER,
  ImmutableChain.JSON_PROPERTY_MARKED_FOR_DELETION,
  ImmutableChain.JSON_PROPERTY_LATEST_RESULTS_SUMMARY,
  ImmutableChain.JSON_PROPERTY_BUILD_DEFINITION,
  ImmutableChain.JSON_PROPERTY_BUSY,
  ImmutableChain.JSON_PROPERTY_EXECUTING,
  ImmutableChain.JSON_PROPERTY_LABEL_NAMES,
  ImmutableChain.JSON_PROPERTY_CURRENT_STATUS,
  ImmutableChain.JSON_PROPERTY_BUILD_LOGGER,
  ImmutableChain.JSON_PROPERTY_FIRST_BUILD_NUMBER,
  ImmutableChain.JSON_PROPERTY_LAST_BUILD_NUMBER,
  ImmutableChain.JSON_PROPERTY_AVERAGE_BUILD_DURATION,
  ImmutableChain.JSON_PROPERTY_EFFECTIVE_VARIABLES,
  ImmutableChain.JSON_PROPERTY_PROJECT,
  ImmutableChain.JSON_PROPERTY_ACTIVE,
  ImmutableChain.JSON_PROPERTY_VARIABLES,
  ImmutableChain.JSON_PROPERTY_KEY,
  ImmutableChain.JSON_PROPERTY_TYPE,
  ImmutableChain.JSON_PROPERTY_BUILD_NAME,
  ImmutableChain.JSON_PROPERTY_BUILD_KEY,
  ImmutableChain.JSON_PROPERTY_PLAN_KEY,
  ImmutableChain.JSON_PROPERTY_PLAN_TYPE,
  ImmutableChain.JSON_PROPERTY_SUSPENDED_FROM_BUILDING,
  ImmutableChain.JSON_PROPERTY_MASTER_ID_IF_EXISTS,
  ImmutableChain.JSON_PROPERTY_MASTER_ID,
  ImmutableChain.JSON_PROPERTY_DATABASE_ID,
  ImmutableChain.JSON_PROPERTY_NAME,
  ImmutableChain.JSON_PROPERTY_ID,
  ImmutableChain.JSON_PROPERTY_DESCRIPTION,
  ImmutableChain.JSON_PROPERTY_OID,
  ImmutableChain.JSON_PROPERTY_SUSPENDED,
  ImmutableChain.JSON_PROPERTY_TRIGGER_DEFINITIONS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ImmutableChain implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_NOTIFICATION_SET = "notificationSet";
  private NotificationSet notificationSet;

  public static final String JSON_PROPERTY_ALL_JOBS = "allJobs";
  private List<ImmutableJob> allJobs;

  public static final String JSON_PROPERTY_STORAGE_TAG = "storageTag";
  private JsonNullable<Object> storageTag = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_VCS_BAMBOO_SPECS_SOURCE = "vcsBambooSpecsSource";
  private ImmutableVcsBambooSpecsSource vcsBambooSpecsSource;

  public static final String JSON_PROPERTY_STAGES = "stages";
  private List<ImmutableChainStage> stages;

  public static final String JSON_PROPERTY_ALL_STAGES = "allStages";
  private List<ImmutableChainStage> allStages;

  public static final String JSON_PROPERTY_JOB_COUNT = "jobCount";
  private Integer jobCount;

  public static final String JSON_PROPERTY_PLAN_REPOSITORY_DEFINITIONS = "planRepositoryDefinitions";
  private List<PlanRepositoryDefinition> planRepositoryDefinitions;

  /**
   * Gets or Sets entityType
   */
  public enum EntityTypeEnum {
    CHAIN("CHAIN"),
    
    STAGE("STAGE"),
    
    JOB("JOB"),
    
    REPOSITORY("REPOSITORY"),
    
    CHAIN_BRANCH("CHAIN_BRANCH"),
    
    JOB_BRANCH("JOB_BRANCH"),
    
    TASK("TASK"),
    
    PROJECT("PROJECT"),
    
    ARTIFACT_DEFINITION("ARTIFACT_DEFINITION"),
    
    DEPLOYMENT_PROJECT("DEPLOYMENT_PROJECT"),
    
    SHARED_CREDENTIAL("SHARED_CREDENTIAL");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ENTITY_TYPE = "entityType";
  private EntityTypeEnum entityType;

  public static final String JSON_PROPERTY_EFFECTIVE_REPOSITORY_DEFINITIONS = "effectiveRepositoryDefinitions";
  private List<RepositoryDefinition> effectiveRepositoryDefinitions;

  public static final String JSON_PROPERTY_LAST_RESULT_KEY = "lastResultKey";
  private PlanResultKey lastResultKey;

  public static final String JSON_PROPERTY_CREATION_DATE = "creationDate";
  private Date creationDate;

  public static final String JSON_PROPERTY_MASTER = "master";
  private ImmutableChain master;

  public static final String JSON_PROPERTY_MARKED_FOR_DELETION = "markedForDeletion";
  private Boolean markedForDeletion;

  public static final String JSON_PROPERTY_LATEST_RESULTS_SUMMARY = "latestResultsSummary";
  private ImmutableResultsSummary latestResultsSummary;

  public static final String JSON_PROPERTY_BUILD_DEFINITION = "buildDefinition";
  private BuildDefinition buildDefinition;

  public static final String JSON_PROPERTY_BUSY = "busy";
  private Boolean busy;

  public static final String JSON_PROPERTY_EXECUTING = "executing";
  private Boolean executing;

  public static final String JSON_PROPERTY_LABEL_NAMES = "labelNames";
  private List<String> labelNames;

  public static final String JSON_PROPERTY_CURRENT_STATUS = "currentStatus";
  private String currentStatus;

  public static final String JSON_PROPERTY_BUILD_LOGGER = "buildLogger";
  private BuildLogger buildLogger;

  public static final String JSON_PROPERTY_FIRST_BUILD_NUMBER = "firstBuildNumber";
  private Integer firstBuildNumber;

  public static final String JSON_PROPERTY_LAST_BUILD_NUMBER = "lastBuildNumber";
  private Integer lastBuildNumber;

  public static final String JSON_PROPERTY_AVERAGE_BUILD_DURATION = "averageBuildDuration";
  private Long averageBuildDuration;

  public static final String JSON_PROPERTY_EFFECTIVE_VARIABLES = "effectiveVariables";
  private List<VariableDefinition> effectiveVariables;

  public static final String JSON_PROPERTY_PROJECT = "project";
  private Project project;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Boolean active;

  public static final String JSON_PROPERTY_VARIABLES = "variables";
  private List<VariableDefinition> variables;

  public static final String JSON_PROPERTY_KEY = "key";
  private String key;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_BUILD_NAME = "buildName";
  private String buildName;

  public static final String JSON_PROPERTY_BUILD_KEY = "buildKey";
  private String buildKey;

  public static final String JSON_PROPERTY_PLAN_KEY = "planKey";
  private PlanKey planKey;

  /**
   * Gets or Sets planType
   */
  public enum PlanTypeEnum {
    CHAIN("CHAIN"),
    
    JOB("JOB"),
    
    CHAIN_BRANCH("CHAIN_BRANCH");

    private String value;

    PlanTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PlanTypeEnum fromValue(String value) {
      for (PlanTypeEnum b : PlanTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PLAN_TYPE = "planType";
  private PlanTypeEnum planType;

  public static final String JSON_PROPERTY_SUSPENDED_FROM_BUILDING = "suspendedFromBuilding";
  private Boolean suspendedFromBuilding;

  public static final String JSON_PROPERTY_MASTER_ID_IF_EXISTS = "masterIdIfExists";
  private Long masterIdIfExists;

  public static final String JSON_PROPERTY_MASTER_ID = "masterId";
  private Long masterId;

  public static final String JSON_PROPERTY_DATABASE_ID = "databaseId";
  private Long databaseId;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_OID = "oid";
  private BambooEntityOid oid;

  public static final String JSON_PROPERTY_SUSPENDED = "suspended";
  private Boolean suspended;

  public static final String JSON_PROPERTY_TRIGGER_DEFINITIONS = "triggerDefinitions";
  private List<TriggerDefinition> triggerDefinitions;

  public ImmutableChain() { 
  }

  public ImmutableChain notificationSet(NotificationSet notificationSet) {
    this.notificationSet = notificationSet;
    return this;
  }

   /**
   * Get notificationSet
   * @return notificationSet
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NOTIFICATION_SET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public NotificationSet getNotificationSet() {
    return notificationSet;
  }


  @JsonProperty(JSON_PROPERTY_NOTIFICATION_SET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotificationSet(NotificationSet notificationSet) {
    this.notificationSet = notificationSet;
  }


  public ImmutableChain allJobs(List<ImmutableJob> allJobs) {
    this.allJobs = allJobs;
    return this;
  }

  public ImmutableChain addAllJobsItem(ImmutableJob allJobsItem) {
    if (this.allJobs == null) {
      this.allJobs = new ArrayList<>();
    }
    this.allJobs.add(allJobsItem);
    return this;
  }

   /**
   * Get allJobs
   * @return allJobs
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ALL_JOBS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ImmutableJob> getAllJobs() {
    return allJobs;
  }


  @JsonProperty(JSON_PROPERTY_ALL_JOBS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllJobs(List<ImmutableJob> allJobs) {
    this.allJobs = allJobs;
  }


  public ImmutableChain storageTag(Object storageTag) {
    this.storageTag = JsonNullable.<Object>of(storageTag);
    return this;
  }

   /**
   * Get storageTag
   * @return storageTag
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonIgnore

  public Object getStorageTag() {
        return storageTag.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STORAGE_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getStorageTag_JsonNullable() {
    return storageTag;
  }
  
  @JsonProperty(JSON_PROPERTY_STORAGE_TAG)
  public void setStorageTag_JsonNullable(JsonNullable<Object> storageTag) {
    this.storageTag = storageTag;
  }

  public void setStorageTag(Object storageTag) {
    this.storageTag = JsonNullable.<Object>of(storageTag);
  }


  public ImmutableChain vcsBambooSpecsSource(ImmutableVcsBambooSpecsSource vcsBambooSpecsSource) {
    this.vcsBambooSpecsSource = vcsBambooSpecsSource;
    return this;
  }

   /**
   * Get vcsBambooSpecsSource
   * @return vcsBambooSpecsSource
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_VCS_BAMBOO_SPECS_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ImmutableVcsBambooSpecsSource getVcsBambooSpecsSource() {
    return vcsBambooSpecsSource;
  }


  @JsonProperty(JSON_PROPERTY_VCS_BAMBOO_SPECS_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVcsBambooSpecsSource(ImmutableVcsBambooSpecsSource vcsBambooSpecsSource) {
    this.vcsBambooSpecsSource = vcsBambooSpecsSource;
  }


  public ImmutableChain stages(List<ImmutableChainStage> stages) {
    this.stages = stages;
    return this;
  }

  public ImmutableChain addStagesItem(ImmutableChainStage stagesItem) {
    if (this.stages == null) {
      this.stages = new ArrayList<>();
    }
    this.stages.add(stagesItem);
    return this;
  }

   /**
   * Get stages
   * @return stages
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_STAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ImmutableChainStage> getStages() {
    return stages;
  }


  @JsonProperty(JSON_PROPERTY_STAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStages(List<ImmutableChainStage> stages) {
    this.stages = stages;
  }


  public ImmutableChain allStages(List<ImmutableChainStage> allStages) {
    this.allStages = allStages;
    return this;
  }

  public ImmutableChain addAllStagesItem(ImmutableChainStage allStagesItem) {
    if (this.allStages == null) {
      this.allStages = new ArrayList<>();
    }
    this.allStages.add(allStagesItem);
    return this;
  }

   /**
   * Get allStages
   * @return allStages
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ALL_STAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ImmutableChainStage> getAllStages() {
    return allStages;
  }


  @JsonProperty(JSON_PROPERTY_ALL_STAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllStages(List<ImmutableChainStage> allStages) {
    this.allStages = allStages;
  }


  public ImmutableChain jobCount(Integer jobCount) {
    this.jobCount = jobCount;
    return this;
  }

   /**
   * Get jobCount
   * @return jobCount
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_JOB_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getJobCount() {
    return jobCount;
  }


  @JsonProperty(JSON_PROPERTY_JOB_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setJobCount(Integer jobCount) {
    this.jobCount = jobCount;
  }


  public ImmutableChain planRepositoryDefinitions(List<PlanRepositoryDefinition> planRepositoryDefinitions) {
    this.planRepositoryDefinitions = planRepositoryDefinitions;
    return this;
  }

  public ImmutableChain addPlanRepositoryDefinitionsItem(PlanRepositoryDefinition planRepositoryDefinitionsItem) {
    if (this.planRepositoryDefinitions == null) {
      this.planRepositoryDefinitions = new ArrayList<>();
    }
    this.planRepositoryDefinitions.add(planRepositoryDefinitionsItem);
    return this;
  }

   /**
   * Get planRepositoryDefinitions
   * @return planRepositoryDefinitions
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLAN_REPOSITORY_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PlanRepositoryDefinition> getPlanRepositoryDefinitions() {
    return planRepositoryDefinitions;
  }


  @JsonProperty(JSON_PROPERTY_PLAN_REPOSITORY_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlanRepositoryDefinitions(List<PlanRepositoryDefinition> planRepositoryDefinitions) {
    this.planRepositoryDefinitions = planRepositoryDefinitions;
  }


  public ImmutableChain entityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * Get entityType
   * @return entityType
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EntityTypeEnum getEntityType() {
    return entityType;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
  }


  public ImmutableChain effectiveRepositoryDefinitions(List<RepositoryDefinition> effectiveRepositoryDefinitions) {
    this.effectiveRepositoryDefinitions = effectiveRepositoryDefinitions;
    return this;
  }

  public ImmutableChain addEffectiveRepositoryDefinitionsItem(RepositoryDefinition effectiveRepositoryDefinitionsItem) {
    if (this.effectiveRepositoryDefinitions == null) {
      this.effectiveRepositoryDefinitions = new ArrayList<>();
    }
    this.effectiveRepositoryDefinitions.add(effectiveRepositoryDefinitionsItem);
    return this;
  }

   /**
   * Get effectiveRepositoryDefinitions
   * @return effectiveRepositoryDefinitions
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_EFFECTIVE_REPOSITORY_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<RepositoryDefinition> getEffectiveRepositoryDefinitions() {
    return effectiveRepositoryDefinitions;
  }


  @JsonProperty(JSON_PROPERTY_EFFECTIVE_REPOSITORY_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEffectiveRepositoryDefinitions(List<RepositoryDefinition> effectiveRepositoryDefinitions) {
    this.effectiveRepositoryDefinitions = effectiveRepositoryDefinitions;
  }


  public ImmutableChain lastResultKey(PlanResultKey lastResultKey) {
    this.lastResultKey = lastResultKey;
    return this;
  }

   /**
   * Get lastResultKey
   * @return lastResultKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_LAST_RESULT_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PlanResultKey getLastResultKey() {
    return lastResultKey;
  }


  @JsonProperty(JSON_PROPERTY_LAST_RESULT_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastResultKey(PlanResultKey lastResultKey) {
    this.lastResultKey = lastResultKey;
  }


  public ImmutableChain creationDate(Date creationDate) {
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Get creationDate
   * @return creationDate
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CREATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Date getCreationDate() {
    return creationDate;
  }


  @JsonProperty(JSON_PROPERTY_CREATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreationDate(Date creationDate) {
    this.creationDate = creationDate;
  }


  public ImmutableChain master(ImmutableChain master) {
    this.master = master;
    return this;
  }

   /**
   * Get master
   * @return master
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MASTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ImmutableChain getMaster() {
    return master;
  }


  @JsonProperty(JSON_PROPERTY_MASTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaster(ImmutableChain master) {
    this.master = master;
  }


  public ImmutableChain markedForDeletion(Boolean markedForDeletion) {
    this.markedForDeletion = markedForDeletion;
    return this;
  }

   /**
   * Get markedForDeletion
   * @return markedForDeletion
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MARKED_FOR_DELETION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getMarkedForDeletion() {
    return markedForDeletion;
  }


  @JsonProperty(JSON_PROPERTY_MARKED_FOR_DELETION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMarkedForDeletion(Boolean markedForDeletion) {
    this.markedForDeletion = markedForDeletion;
  }


  public ImmutableChain latestResultsSummary(ImmutableResultsSummary latestResultsSummary) {
    this.latestResultsSummary = latestResultsSummary;
    return this;
  }

   /**
   * Get latestResultsSummary
   * @return latestResultsSummary
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_LATEST_RESULTS_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ImmutableResultsSummary getLatestResultsSummary() {
    return latestResultsSummary;
  }


  @JsonProperty(JSON_PROPERTY_LATEST_RESULTS_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLatestResultsSummary(ImmutableResultsSummary latestResultsSummary) {
    this.latestResultsSummary = latestResultsSummary;
  }


  public ImmutableChain buildDefinition(BuildDefinition buildDefinition) {
    this.buildDefinition = buildDefinition;
    return this;
  }

   /**
   * Get buildDefinition
   * @return buildDefinition
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BUILD_DEFINITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BuildDefinition getBuildDefinition() {
    return buildDefinition;
  }


  @JsonProperty(JSON_PROPERTY_BUILD_DEFINITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildDefinition(BuildDefinition buildDefinition) {
    this.buildDefinition = buildDefinition;
  }


  public ImmutableChain busy(Boolean busy) {
    this.busy = busy;
    return this;
  }

   /**
   * Get busy
   * @return busy
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BUSY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getBusy() {
    return busy;
  }


  @JsonProperty(JSON_PROPERTY_BUSY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBusy(Boolean busy) {
    this.busy = busy;
  }


  public ImmutableChain executing(Boolean executing) {
    this.executing = executing;
    return this;
  }

   /**
   * Get executing
   * @return executing
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_EXECUTING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getExecuting() {
    return executing;
  }


  @JsonProperty(JSON_PROPERTY_EXECUTING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExecuting(Boolean executing) {
    this.executing = executing;
  }


  public ImmutableChain labelNames(List<String> labelNames) {
    this.labelNames = labelNames;
    return this;
  }

  public ImmutableChain addLabelNamesItem(String labelNamesItem) {
    if (this.labelNames == null) {
      this.labelNames = new ArrayList<>();
    }
    this.labelNames.add(labelNamesItem);
    return this;
  }

   /**
   * Get labelNames
   * @return labelNames
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_LABEL_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getLabelNames() {
    return labelNames;
  }


  @JsonProperty(JSON_PROPERTY_LABEL_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabelNames(List<String> labelNames) {
    this.labelNames = labelNames;
  }


  public ImmutableChain currentStatus(String currentStatus) {
    this.currentStatus = currentStatus;
    return this;
  }

   /**
   * Get currentStatus
   * @return currentStatus
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CURRENT_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrentStatus() {
    return currentStatus;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrentStatus(String currentStatus) {
    this.currentStatus = currentStatus;
  }


  public ImmutableChain buildLogger(BuildLogger buildLogger) {
    this.buildLogger = buildLogger;
    return this;
  }

   /**
   * Get buildLogger
   * @return buildLogger
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BUILD_LOGGER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BuildLogger getBuildLogger() {
    return buildLogger;
  }


  @JsonProperty(JSON_PROPERTY_BUILD_LOGGER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildLogger(BuildLogger buildLogger) {
    this.buildLogger = buildLogger;
  }


  public ImmutableChain firstBuildNumber(Integer firstBuildNumber) {
    this.firstBuildNumber = firstBuildNumber;
    return this;
  }

   /**
   * Get firstBuildNumber
   * @return firstBuildNumber
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_FIRST_BUILD_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFirstBuildNumber() {
    return firstBuildNumber;
  }


  @JsonProperty(JSON_PROPERTY_FIRST_BUILD_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFirstBuildNumber(Integer firstBuildNumber) {
    this.firstBuildNumber = firstBuildNumber;
  }


  public ImmutableChain lastBuildNumber(Integer lastBuildNumber) {
    this.lastBuildNumber = lastBuildNumber;
    return this;
  }

   /**
   * Get lastBuildNumber
   * @return lastBuildNumber
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_LAST_BUILD_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getLastBuildNumber() {
    return lastBuildNumber;
  }


  @JsonProperty(JSON_PROPERTY_LAST_BUILD_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastBuildNumber(Integer lastBuildNumber) {
    this.lastBuildNumber = lastBuildNumber;
  }


  public ImmutableChain averageBuildDuration(Long averageBuildDuration) {
    this.averageBuildDuration = averageBuildDuration;
    return this;
  }

   /**
   * Get averageBuildDuration
   * @return averageBuildDuration
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_AVERAGE_BUILD_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getAverageBuildDuration() {
    return averageBuildDuration;
  }


  @JsonProperty(JSON_PROPERTY_AVERAGE_BUILD_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAverageBuildDuration(Long averageBuildDuration) {
    this.averageBuildDuration = averageBuildDuration;
  }


  public ImmutableChain effectiveVariables(List<VariableDefinition> effectiveVariables) {
    this.effectiveVariables = effectiveVariables;
    return this;
  }

  public ImmutableChain addEffectiveVariablesItem(VariableDefinition effectiveVariablesItem) {
    if (this.effectiveVariables == null) {
      this.effectiveVariables = new ArrayList<>();
    }
    this.effectiveVariables.add(effectiveVariablesItem);
    return this;
  }

   /**
   * Get effectiveVariables
   * @return effectiveVariables
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_EFFECTIVE_VARIABLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<VariableDefinition> getEffectiveVariables() {
    return effectiveVariables;
  }


  @JsonProperty(JSON_PROPERTY_EFFECTIVE_VARIABLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEffectiveVariables(List<VariableDefinition> effectiveVariables) {
    this.effectiveVariables = effectiveVariables;
  }


  public ImmutableChain project(Project project) {
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PROJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Project getProject() {
    return project;
  }


  @JsonProperty(JSON_PROPERTY_PROJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProject(Project project) {
    this.project = project;
  }


  public ImmutableChain active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActive(Boolean active) {
    this.active = active;
  }


  public ImmutableChain variables(List<VariableDefinition> variables) {
    this.variables = variables;
    return this;
  }

  public ImmutableChain addVariablesItem(VariableDefinition variablesItem) {
    if (this.variables == null) {
      this.variables = new ArrayList<>();
    }
    this.variables.add(variablesItem);
    return this;
  }

   /**
   * Get variables
   * @return variables
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_VARIABLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<VariableDefinition> getVariables() {
    return variables;
  }


  @JsonProperty(JSON_PROPERTY_VARIABLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVariables(List<VariableDefinition> variables) {
    this.variables = variables;
  }


  public ImmutableChain key(String key) {
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKey(String key) {
    this.key = key;
  }


  public ImmutableChain type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }


  public ImmutableChain buildName(String buildName) {
    this.buildName = buildName;
    return this;
  }

   /**
   * Get buildName
   * @return buildName
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BUILD_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBuildName() {
    return buildName;
  }


  @JsonProperty(JSON_PROPERTY_BUILD_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildName(String buildName) {
    this.buildName = buildName;
  }


  public ImmutableChain buildKey(String buildKey) {
    this.buildKey = buildKey;
    return this;
  }

   /**
   * Get buildKey
   * @return buildKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BUILD_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBuildKey() {
    return buildKey;
  }


  @JsonProperty(JSON_PROPERTY_BUILD_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildKey(String buildKey) {
    this.buildKey = buildKey;
  }


  public ImmutableChain planKey(PlanKey planKey) {
    this.planKey = planKey;
    return this;
  }

   /**
   * Get planKey
   * @return planKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLAN_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PlanKey getPlanKey() {
    return planKey;
  }


  @JsonProperty(JSON_PROPERTY_PLAN_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlanKey(PlanKey planKey) {
    this.planKey = planKey;
  }


  public ImmutableChain planType(PlanTypeEnum planType) {
    this.planType = planType;
    return this;
  }

   /**
   * Get planType
   * @return planType
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLAN_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PlanTypeEnum getPlanType() {
    return planType;
  }


  @JsonProperty(JSON_PROPERTY_PLAN_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlanType(PlanTypeEnum planType) {
    this.planType = planType;
  }


  public ImmutableChain suspendedFromBuilding(Boolean suspendedFromBuilding) {
    this.suspendedFromBuilding = suspendedFromBuilding;
    return this;
  }

   /**
   * Get suspendedFromBuilding
   * @return suspendedFromBuilding
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SUSPENDED_FROM_BUILDING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSuspendedFromBuilding() {
    return suspendedFromBuilding;
  }


  @JsonProperty(JSON_PROPERTY_SUSPENDED_FROM_BUILDING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSuspendedFromBuilding(Boolean suspendedFromBuilding) {
    this.suspendedFromBuilding = suspendedFromBuilding;
  }


  public ImmutableChain masterIdIfExists(Long masterIdIfExists) {
    this.masterIdIfExists = masterIdIfExists;
    return this;
  }

   /**
   * Get masterIdIfExists
   * @return masterIdIfExists
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MASTER_ID_IF_EXISTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getMasterIdIfExists() {
    return masterIdIfExists;
  }


  @JsonProperty(JSON_PROPERTY_MASTER_ID_IF_EXISTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMasterIdIfExists(Long masterIdIfExists) {
    this.masterIdIfExists = masterIdIfExists;
  }


  public ImmutableChain masterId(Long masterId) {
    this.masterId = masterId;
    return this;
  }

   /**
   * Get masterId
   * @return masterId
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MASTER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getMasterId() {
    return masterId;
  }


  @JsonProperty(JSON_PROPERTY_MASTER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMasterId(Long masterId) {
    this.masterId = masterId;
  }


  public ImmutableChain databaseId(Long databaseId) {
    this.databaseId = databaseId;
    return this;
  }

   /**
   * Get databaseId
   * @return databaseId
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DATABASE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getDatabaseId() {
    return databaseId;
  }


  @JsonProperty(JSON_PROPERTY_DATABASE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDatabaseId(Long databaseId) {
    this.databaseId = databaseId;
  }


  public ImmutableChain name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public ImmutableChain id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  public ImmutableChain description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public ImmutableChain oid(BambooEntityOid oid) {
    this.oid = oid;
    return this;
  }

   /**
   * Get oid
   * @return oid
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_OID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BambooEntityOid getOid() {
    return oid;
  }


  @JsonProperty(JSON_PROPERTY_OID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOid(BambooEntityOid oid) {
    this.oid = oid;
  }


  public ImmutableChain suspended(Boolean suspended) {
    this.suspended = suspended;
    return this;
  }

   /**
   * Get suspended
   * @return suspended
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SUSPENDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSuspended() {
    return suspended;
  }


  @JsonProperty(JSON_PROPERTY_SUSPENDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSuspended(Boolean suspended) {
    this.suspended = suspended;
  }


  public ImmutableChain triggerDefinitions(List<TriggerDefinition> triggerDefinitions) {
    this.triggerDefinitions = triggerDefinitions;
    return this;
  }

  public ImmutableChain addTriggerDefinitionsItem(TriggerDefinition triggerDefinitionsItem) {
    if (this.triggerDefinitions == null) {
      this.triggerDefinitions = new ArrayList<>();
    }
    this.triggerDefinitions.add(triggerDefinitionsItem);
    return this;
  }

   /**
   * Get triggerDefinitions
   * @return triggerDefinitions
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TRIGGER_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<TriggerDefinition> getTriggerDefinitions() {
    return triggerDefinitions;
  }


  @JsonProperty(JSON_PROPERTY_TRIGGER_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTriggerDefinitions(List<TriggerDefinition> triggerDefinitions) {
    this.triggerDefinitions = triggerDefinitions;
  }


  /**
   * Return true if this ImmutableChain object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImmutableChain immutableChain = (ImmutableChain) o;
    return Objects.equals(this.notificationSet, immutableChain.notificationSet) &&
        Objects.equals(this.allJobs, immutableChain.allJobs) &&
        equalsNullable(this.storageTag, immutableChain.storageTag) &&
        Objects.equals(this.vcsBambooSpecsSource, immutableChain.vcsBambooSpecsSource) &&
        Objects.equals(this.stages, immutableChain.stages) &&
        Objects.equals(this.allStages, immutableChain.allStages) &&
        Objects.equals(this.jobCount, immutableChain.jobCount) &&
        Objects.equals(this.planRepositoryDefinitions, immutableChain.planRepositoryDefinitions) &&
        Objects.equals(this.entityType, immutableChain.entityType) &&
        Objects.equals(this.effectiveRepositoryDefinitions, immutableChain.effectiveRepositoryDefinitions) &&
        Objects.equals(this.lastResultKey, immutableChain.lastResultKey) &&
        Objects.equals(this.creationDate, immutableChain.creationDate) &&
        Objects.equals(this.master, immutableChain.master) &&
        Objects.equals(this.markedForDeletion, immutableChain.markedForDeletion) &&
        Objects.equals(this.latestResultsSummary, immutableChain.latestResultsSummary) &&
        Objects.equals(this.buildDefinition, immutableChain.buildDefinition) &&
        Objects.equals(this.busy, immutableChain.busy) &&
        Objects.equals(this.executing, immutableChain.executing) &&
        Objects.equals(this.labelNames, immutableChain.labelNames) &&
        Objects.equals(this.currentStatus, immutableChain.currentStatus) &&
        Objects.equals(this.buildLogger, immutableChain.buildLogger) &&
        Objects.equals(this.firstBuildNumber, immutableChain.firstBuildNumber) &&
        Objects.equals(this.lastBuildNumber, immutableChain.lastBuildNumber) &&
        Objects.equals(this.averageBuildDuration, immutableChain.averageBuildDuration) &&
        Objects.equals(this.effectiveVariables, immutableChain.effectiveVariables) &&
        Objects.equals(this.project, immutableChain.project) &&
        Objects.equals(this.active, immutableChain.active) &&
        Objects.equals(this.variables, immutableChain.variables) &&
        Objects.equals(this.key, immutableChain.key) &&
        Objects.equals(this.type, immutableChain.type) &&
        Objects.equals(this.buildName, immutableChain.buildName) &&
        Objects.equals(this.buildKey, immutableChain.buildKey) &&
        Objects.equals(this.planKey, immutableChain.planKey) &&
        Objects.equals(this.planType, immutableChain.planType) &&
        Objects.equals(this.suspendedFromBuilding, immutableChain.suspendedFromBuilding) &&
        Objects.equals(this.masterIdIfExists, immutableChain.masterIdIfExists) &&
        Objects.equals(this.masterId, immutableChain.masterId) &&
        Objects.equals(this.databaseId, immutableChain.databaseId) &&
        Objects.equals(this.name, immutableChain.name) &&
        Objects.equals(this.id, immutableChain.id) &&
        Objects.equals(this.description, immutableChain.description) &&
        Objects.equals(this.oid, immutableChain.oid) &&
        Objects.equals(this.suspended, immutableChain.suspended) &&
        Objects.equals(this.triggerDefinitions, immutableChain.triggerDefinitions);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(notificationSet, allJobs, hashCodeNullable(storageTag), vcsBambooSpecsSource, stages, allStages, jobCount, planRepositoryDefinitions, entityType, effectiveRepositoryDefinitions, lastResultKey, creationDate, master, markedForDeletion, latestResultsSummary, buildDefinition, busy, executing, labelNames, currentStatus, buildLogger, firstBuildNumber, lastBuildNumber, averageBuildDuration, effectiveVariables, project, active, variables, key, type, buildName, buildKey, planKey, planType, suspendedFromBuilding, masterIdIfExists, masterId, databaseId, name, id, description, oid, suspended, triggerDefinitions);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImmutableChain {\n");
    sb.append("    notificationSet: ").append(toIndentedString(notificationSet)).append("\n");
    sb.append("    allJobs: ").append(toIndentedString(allJobs)).append("\n");
    sb.append("    storageTag: ").append(toIndentedString(storageTag)).append("\n");
    sb.append("    vcsBambooSpecsSource: ").append(toIndentedString(vcsBambooSpecsSource)).append("\n");
    sb.append("    stages: ").append(toIndentedString(stages)).append("\n");
    sb.append("    allStages: ").append(toIndentedString(allStages)).append("\n");
    sb.append("    jobCount: ").append(toIndentedString(jobCount)).append("\n");
    sb.append("    planRepositoryDefinitions: ").append(toIndentedString(planRepositoryDefinitions)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    effectiveRepositoryDefinitions: ").append(toIndentedString(effectiveRepositoryDefinitions)).append("\n");
    sb.append("    lastResultKey: ").append(toIndentedString(lastResultKey)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    master: ").append(toIndentedString(master)).append("\n");
    sb.append("    markedForDeletion: ").append(toIndentedString(markedForDeletion)).append("\n");
    sb.append("    latestResultsSummary: ").append(toIndentedString(latestResultsSummary)).append("\n");
    sb.append("    buildDefinition: ").append(toIndentedString(buildDefinition)).append("\n");
    sb.append("    busy: ").append(toIndentedString(busy)).append("\n");
    sb.append("    executing: ").append(toIndentedString(executing)).append("\n");
    sb.append("    labelNames: ").append(toIndentedString(labelNames)).append("\n");
    sb.append("    currentStatus: ").append(toIndentedString(currentStatus)).append("\n");
    sb.append("    buildLogger: ").append(toIndentedString(buildLogger)).append("\n");
    sb.append("    firstBuildNumber: ").append(toIndentedString(firstBuildNumber)).append("\n");
    sb.append("    lastBuildNumber: ").append(toIndentedString(lastBuildNumber)).append("\n");
    sb.append("    averageBuildDuration: ").append(toIndentedString(averageBuildDuration)).append("\n");
    sb.append("    effectiveVariables: ").append(toIndentedString(effectiveVariables)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    buildName: ").append(toIndentedString(buildName)).append("\n");
    sb.append("    buildKey: ").append(toIndentedString(buildKey)).append("\n");
    sb.append("    planKey: ").append(toIndentedString(planKey)).append("\n");
    sb.append("    planType: ").append(toIndentedString(planType)).append("\n");
    sb.append("    suspendedFromBuilding: ").append(toIndentedString(suspendedFromBuilding)).append("\n");
    sb.append("    masterIdIfExists: ").append(toIndentedString(masterIdIfExists)).append("\n");
    sb.append("    masterId: ").append(toIndentedString(masterId)).append("\n");
    sb.append("    databaseId: ").append(toIndentedString(databaseId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    oid: ").append(toIndentedString(oid)).append("\n");
    sb.append("    suspended: ").append(toIndentedString(suspended)).append("\n");
    sb.append("    triggerDefinitions: ").append(toIndentedString(triggerDefinitions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

