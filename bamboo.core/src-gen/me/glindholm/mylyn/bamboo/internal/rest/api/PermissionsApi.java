/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package me.glindholm.mylyn.bamboo.internal.rest.api;

import me.glindholm.mylyn.bamboo.internal.rest.invoker.ApiClient;
import me.glindholm.mylyn.bamboo.internal.rest.invoker.ApiException;
import me.glindholm.mylyn.bamboo.internal.rest.invoker.ApiResponse;
import me.glindholm.mylyn.bamboo.internal.rest.invoker.Pair;

import me.glindholm.mylyn.bamboo.internal.rest.model.FindAssignedGroups200Response;
import me.glindholm.mylyn.bamboo.internal.rest.model.GetAvailableUsers6200Response;
import me.glindholm.mylyn.bamboo.internal.rest.model.ListGroupPermissions6200Response;
import me.glindholm.mylyn.bamboo.internal.rest.model.ListRolePermissions6200Response;
import me.glindholm.mylyn.bamboo.internal.rest.model.ListUserPermissions6200Response;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestErrorCollection;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PermissionsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public PermissionsApi() {
    this(new ApiClient());
  }

  public PermissionsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * Grants deployment project permissions to a given group.
   * @param name Affected group (required)
   * @param id Deployment project entity key (required)
   * @param requestBody Permission names to grant (optional
   * @throws ApiException if fails to make API call
   */
  public void addPermissionsForGroup(String name, String id, List<String> requestBody) throws ApiException {
    addPermissionsForGroupWithHttpInfo(name, id, requestBody);
  }

  /**
   * 
   * Grants deployment project permissions to a given group.
   * @param name Affected group (required)
   * @param id Deployment project entity key (required)
   * @param requestBody Permission names to grant (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addPermissionsForGroupWithHttpInfo(String name, String id, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addPermissionsForGroupRequestBuilder(name, id, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addPermissionsForGroup", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addPermissionsForGroupRequestBuilder(String name, String id, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling addPermissionsForGroup");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling addPermissionsForGroup");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/deployment/{id}/groups/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Grants deployment environment permissions to a given group.
   * @param name Permission names to grant (required)
   * @param id Deployment environment entity key (required)
   * @param requestBody Permission names to grant (optional
   * @throws ApiException if fails to make API call
   */
  public void addPermissionsForGroup1(String name, String id, List<String> requestBody) throws ApiException {
    addPermissionsForGroup1WithHttpInfo(name, id, requestBody);
  }

  /**
   * 
   * Grants deployment environment permissions to a given group.
   * @param name Permission names to grant (required)
   * @param id Deployment environment entity key (required)
   * @param requestBody Permission names to grant (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addPermissionsForGroup1WithHttpInfo(String name, String id, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addPermissionsForGroup1RequestBuilder(name, id, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addPermissionsForGroup1", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addPermissionsForGroup1RequestBuilder(String name, String id, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling addPermissionsForGroup1");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling addPermissionsForGroup1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/environment/{id}/groups/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Grants global permissions to a given group.
   * @param name Affected group (required)
   * @param ignore  (optional)
   * @param requestBody Permission names to grant (optional
   * @throws ApiException if fails to make API call
   */
  public void addPermissionsForGroup2(String name, String ignore, List<String> requestBody) throws ApiException {
    addPermissionsForGroup2WithHttpInfo(name, ignore, requestBody);
  }

  /**
   * 
   * Grants global permissions to a given group.
   * @param name Affected group (required)
   * @param ignore  (optional)
   * @param requestBody Permission names to grant (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addPermissionsForGroup2WithHttpInfo(String name, String ignore, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addPermissionsForGroup2RequestBuilder(name, ignore, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addPermissionsForGroup2", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addPermissionsForGroup2RequestBuilder(String name, String ignore, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling addPermissionsForGroup2");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/global/groups/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "ignore";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ignore", ignore));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Grants plan permissions to a given group.
   * @param name Affected group (required)
   * @param key Plan entity key (required)
   * @param requestBody Permission names to grant (optional
   * @throws ApiException if fails to make API call
   */
  public void addPermissionsForGroup3(String name, String key, List<String> requestBody) throws ApiException {
    addPermissionsForGroup3WithHttpInfo(name, key, requestBody);
  }

  /**
   * 
   * Grants plan permissions to a given group.
   * @param name Affected group (required)
   * @param key Plan entity key (required)
   * @param requestBody Permission names to grant (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addPermissionsForGroup3WithHttpInfo(String name, String key, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addPermissionsForGroup3RequestBuilder(name, key, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addPermissionsForGroup3", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addPermissionsForGroup3RequestBuilder(String name, String key, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling addPermissionsForGroup3");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling addPermissionsForGroup3");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/plan/{key}/groups/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Grants project permissions to a given group.
   * @param name Affected group (required)
   * @param key Project entity key (required)
   * @param requestBody Permission names to grant (optional
   * @throws ApiException if fails to make API call
   */
  public void addPermissionsForGroup4(String name, String key, List<String> requestBody) throws ApiException {
    addPermissionsForGroup4WithHttpInfo(name, key, requestBody);
  }

  /**
   * 
   * Grants project permissions to a given group.
   * @param name Affected group (required)
   * @param key Project entity key (required)
   * @param requestBody Permission names to grant (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addPermissionsForGroup4WithHttpInfo(String name, String key, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addPermissionsForGroup4RequestBuilder(name, key, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addPermissionsForGroup4", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addPermissionsForGroup4RequestBuilder(String name, String key, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling addPermissionsForGroup4");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling addPermissionsForGroup4");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/project/{key}/groups/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Grants project plan permissions to a given group.
   * @param name Affected group (required)
   * @param key Project entity key (required)
   * @param requestBody Permission names to grant (optional
   * @throws ApiException if fails to make API call
   */
  public void addPermissionsForGroup5(String name, String key, List<String> requestBody) throws ApiException {
    addPermissionsForGroup5WithHttpInfo(name, key, requestBody);
  }

  /**
   * 
   * Grants project plan permissions to a given group.
   * @param name Affected group (required)
   * @param key Project entity key (required)
   * @param requestBody Permission names to grant (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addPermissionsForGroup5WithHttpInfo(String name, String key, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addPermissionsForGroup5RequestBuilder(name, key, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addPermissionsForGroup5", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addPermissionsForGroup5RequestBuilder(String name, String key, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling addPermissionsForGroup5");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling addPermissionsForGroup5");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/projectplan/{key}/groups/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Grants repository permissions to a given group.
   * @param name Affected group (required)
   * @param id Repository entity key (required)
   * @param requestBody Permission names to grant (optional
   * @throws ApiException if fails to make API call
   */
  public void addPermissionsForGroup6(String name, String id, List<String> requestBody) throws ApiException {
    addPermissionsForGroup6WithHttpInfo(name, id, requestBody);
  }

  /**
   * 
   * Grants repository permissions to a given group.
   * @param name Affected group (required)
   * @param id Repository entity key (required)
   * @param requestBody Permission names to grant (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addPermissionsForGroup6WithHttpInfo(String name, String id, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addPermissionsForGroup6RequestBuilder(name, id, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addPermissionsForGroup6", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addPermissionsForGroup6RequestBuilder(String name, String id, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling addPermissionsForGroup6");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling addPermissionsForGroup6");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/repository/{id}/groups/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Grants deployment project permissions to a given role.
   * @param name Affected role (required)
   * @param id Deployment project entity key (required)
   * @param requestBody Permission names to grant (optional
   * @throws ApiException if fails to make API call
   */
  public void addPermissionsForRole(String name, String id, List<String> requestBody) throws ApiException {
    addPermissionsForRoleWithHttpInfo(name, id, requestBody);
  }

  /**
   * 
   * Grants deployment project permissions to a given role.
   * @param name Affected role (required)
   * @param id Deployment project entity key (required)
   * @param requestBody Permission names to grant (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addPermissionsForRoleWithHttpInfo(String name, String id, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addPermissionsForRoleRequestBuilder(name, id, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addPermissionsForRole", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addPermissionsForRoleRequestBuilder(String name, String id, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling addPermissionsForRole");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling addPermissionsForRole");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/deployment/{id}/roles/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Grants deployment environment permissions to a given role.
   * @param name Affected role (required)
   * @param id Deployment environment entity key (required)
   * @param requestBody Permission names to grant (optional
   * @throws ApiException if fails to make API call
   */
  public void addPermissionsForRole1(String name, String id, List<String> requestBody) throws ApiException {
    addPermissionsForRole1WithHttpInfo(name, id, requestBody);
  }

  /**
   * 
   * Grants deployment environment permissions to a given role.
   * @param name Affected role (required)
   * @param id Deployment environment entity key (required)
   * @param requestBody Permission names to grant (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addPermissionsForRole1WithHttpInfo(String name, String id, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addPermissionsForRole1RequestBuilder(name, id, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addPermissionsForRole1", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addPermissionsForRole1RequestBuilder(String name, String id, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling addPermissionsForRole1");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling addPermissionsForRole1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/environment/{id}/roles/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Grants global permissions to a given role.
   * @param name Affected role (required)
   * @param ignore  (optional)
   * @param requestBody Permission names to grant (optional
   * @throws ApiException if fails to make API call
   */
  public void addPermissionsForRole2(String name, String ignore, List<String> requestBody) throws ApiException {
    addPermissionsForRole2WithHttpInfo(name, ignore, requestBody);
  }

  /**
   * 
   * Grants global permissions to a given role.
   * @param name Affected role (required)
   * @param ignore  (optional)
   * @param requestBody Permission names to grant (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addPermissionsForRole2WithHttpInfo(String name, String ignore, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addPermissionsForRole2RequestBuilder(name, ignore, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addPermissionsForRole2", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addPermissionsForRole2RequestBuilder(String name, String ignore, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling addPermissionsForRole2");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/global/roles/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "ignore";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ignore", ignore));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Grants plan permissions to a given role.
   * @param name Affected role (required)
   * @param key Plan entity key (required)
   * @param requestBody Permission names to grant (optional
   * @throws ApiException if fails to make API call
   */
  public void addPermissionsForRole3(String name, String key, List<String> requestBody) throws ApiException {
    addPermissionsForRole3WithHttpInfo(name, key, requestBody);
  }

  /**
   * 
   * Grants plan permissions to a given role.
   * @param name Affected role (required)
   * @param key Plan entity key (required)
   * @param requestBody Permission names to grant (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addPermissionsForRole3WithHttpInfo(String name, String key, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addPermissionsForRole3RequestBuilder(name, key, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addPermissionsForRole3", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addPermissionsForRole3RequestBuilder(String name, String key, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling addPermissionsForRole3");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling addPermissionsForRole3");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/plan/{key}/roles/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Grants project permissions to a given role.
   * @param name Affected role (required)
   * @param key Project entity key (required)
   * @param requestBody Permission names to grant (optional
   * @throws ApiException if fails to make API call
   */
  public void addPermissionsForRole4(String name, String key, List<String> requestBody) throws ApiException {
    addPermissionsForRole4WithHttpInfo(name, key, requestBody);
  }

  /**
   * 
   * Grants project permissions to a given role.
   * @param name Affected role (required)
   * @param key Project entity key (required)
   * @param requestBody Permission names to grant (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addPermissionsForRole4WithHttpInfo(String name, String key, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addPermissionsForRole4RequestBuilder(name, key, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addPermissionsForRole4", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addPermissionsForRole4RequestBuilder(String name, String key, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling addPermissionsForRole4");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling addPermissionsForRole4");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/project/{key}/roles/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Grants project plan permissions to a given role.
   * @param name Affected role (required)
   * @param key Project entity key (required)
   * @param requestBody Permission names to grant (optional
   * @throws ApiException if fails to make API call
   */
  public void addPermissionsForRole5(String name, String key, List<String> requestBody) throws ApiException {
    addPermissionsForRole5WithHttpInfo(name, key, requestBody);
  }

  /**
   * 
   * Grants project plan permissions to a given role.
   * @param name Affected role (required)
   * @param key Project entity key (required)
   * @param requestBody Permission names to grant (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addPermissionsForRole5WithHttpInfo(String name, String key, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addPermissionsForRole5RequestBuilder(name, key, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addPermissionsForRole5", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addPermissionsForRole5RequestBuilder(String name, String key, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling addPermissionsForRole5");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling addPermissionsForRole5");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/projectplan/{key}/roles/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Grants repository permissions to a given role.
   * @param name Affected role (required)
   * @param id Repository entity key (required)
   * @param requestBody Permission names to grant (optional
   * @throws ApiException if fails to make API call
   */
  public void addPermissionsForRole6(String name, String id, List<String> requestBody) throws ApiException {
    addPermissionsForRole6WithHttpInfo(name, id, requestBody);
  }

  /**
   * 
   * Grants repository permissions to a given role.
   * @param name Affected role (required)
   * @param id Repository entity key (required)
   * @param requestBody Permission names to grant (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addPermissionsForRole6WithHttpInfo(String name, String id, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addPermissionsForRole6RequestBuilder(name, id, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addPermissionsForRole6", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addPermissionsForRole6RequestBuilder(String name, String id, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling addPermissionsForRole6");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling addPermissionsForRole6");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/repository/{id}/roles/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Grants deployment project permissions to a given user.
   * @param name Username of the affected user (required)
   * @param id Deployment project entity key (required)
   * @param requestBody Names to grant (optional
   * @throws ApiException if fails to make API call
   */
  public void addPermissionsForUser(String name, String id, List<String> requestBody) throws ApiException {
    addPermissionsForUserWithHttpInfo(name, id, requestBody);
  }

  /**
   * 
   * Grants deployment project permissions to a given user.
   * @param name Username of the affected user (required)
   * @param id Deployment project entity key (required)
   * @param requestBody Names to grant (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addPermissionsForUserWithHttpInfo(String name, String id, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addPermissionsForUserRequestBuilder(name, id, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addPermissionsForUser", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addPermissionsForUserRequestBuilder(String name, String id, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling addPermissionsForUser");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling addPermissionsForUser");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/deployment/{id}/users/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Grants deployment environment permissions to a given user.
   * @param name Username of the affected user (required)
   * @param id Deployment environment entity key (required)
   * @param requestBody Permission names to grant (optional
   * @throws ApiException if fails to make API call
   */
  public void addPermissionsForUser1(String name, String id, List<String> requestBody) throws ApiException {
    addPermissionsForUser1WithHttpInfo(name, id, requestBody);
  }

  /**
   * 
   * Grants deployment environment permissions to a given user.
   * @param name Username of the affected user (required)
   * @param id Deployment environment entity key (required)
   * @param requestBody Permission names to grant (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addPermissionsForUser1WithHttpInfo(String name, String id, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addPermissionsForUser1RequestBuilder(name, id, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addPermissionsForUser1", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addPermissionsForUser1RequestBuilder(String name, String id, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling addPermissionsForUser1");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling addPermissionsForUser1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/environment/{id}/users/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Grants global permissions to a given user.
   * @param name Username of the affected user (required)
   * @param ignore  (optional)
   * @param requestBody Permission names to grant (optional
   * @throws ApiException if fails to make API call
   */
  public void addPermissionsForUser2(String name, String ignore, List<String> requestBody) throws ApiException {
    addPermissionsForUser2WithHttpInfo(name, ignore, requestBody);
  }

  /**
   * 
   * Grants global permissions to a given user.
   * @param name Username of the affected user (required)
   * @param ignore  (optional)
   * @param requestBody Permission names to grant (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addPermissionsForUser2WithHttpInfo(String name, String ignore, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addPermissionsForUser2RequestBuilder(name, ignore, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addPermissionsForUser2", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addPermissionsForUser2RequestBuilder(String name, String ignore, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling addPermissionsForUser2");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/global/users/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "ignore";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ignore", ignore));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Grants plan permissions to a given user.
   * @param name Username of the affected user (required)
   * @param key Plan entity key (required)
   * @param requestBody Permission names to grant (optional
   * @throws ApiException if fails to make API call
   */
  public void addPermissionsForUser3(String name, String key, List<String> requestBody) throws ApiException {
    addPermissionsForUser3WithHttpInfo(name, key, requestBody);
  }

  /**
   * 
   * Grants plan permissions to a given user.
   * @param name Username of the affected user (required)
   * @param key Plan entity key (required)
   * @param requestBody Permission names to grant (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addPermissionsForUser3WithHttpInfo(String name, String key, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addPermissionsForUser3RequestBuilder(name, key, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addPermissionsForUser3", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addPermissionsForUser3RequestBuilder(String name, String key, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling addPermissionsForUser3");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling addPermissionsForUser3");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/plan/{key}/users/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Grants project permissions to a given user.
   * @param name Username of the affected user (required)
   * @param key Project entity key (required)
   * @param requestBody Permission names to grant (optional
   * @throws ApiException if fails to make API call
   */
  public void addPermissionsForUser4(String name, String key, List<String> requestBody) throws ApiException {
    addPermissionsForUser4WithHttpInfo(name, key, requestBody);
  }

  /**
   * 
   * Grants project permissions to a given user.
   * @param name Username of the affected user (required)
   * @param key Project entity key (required)
   * @param requestBody Permission names to grant (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addPermissionsForUser4WithHttpInfo(String name, String key, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addPermissionsForUser4RequestBuilder(name, key, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addPermissionsForUser4", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addPermissionsForUser4RequestBuilder(String name, String key, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling addPermissionsForUser4");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling addPermissionsForUser4");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/project/{key}/users/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Grants project plan permissions to a given user.
   * @param name Username of the affected user (required)
   * @param key Project entity key (required)
   * @param requestBody Permission names to grant (optional
   * @throws ApiException if fails to make API call
   */
  public void addPermissionsForUser5(String name, String key, List<String> requestBody) throws ApiException {
    addPermissionsForUser5WithHttpInfo(name, key, requestBody);
  }

  /**
   * 
   * Grants project plan permissions to a given user.
   * @param name Username of the affected user (required)
   * @param key Project entity key (required)
   * @param requestBody Permission names to grant (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addPermissionsForUser5WithHttpInfo(String name, String key, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addPermissionsForUser5RequestBuilder(name, key, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addPermissionsForUser5", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addPermissionsForUser5RequestBuilder(String name, String key, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling addPermissionsForUser5");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling addPermissionsForUser5");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/projectplan/{key}/users/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Grants repository permissions to a given user.
   * @param name Username of the affected user (required)
   * @param id Repository entity key (required)
   * @param requestBody Permission names to grant (optional
   * @throws ApiException if fails to make API call
   */
  public void addPermissionsForUser6(String name, String id, List<String> requestBody) throws ApiException {
    addPermissionsForUser6WithHttpInfo(name, id, requestBody);
  }

  /**
   * 
   * Grants repository permissions to a given user.
   * @param name Username of the affected user (required)
   * @param id Repository entity key (required)
   * @param requestBody Permission names to grant (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addPermissionsForUser6WithHttpInfo(String name, String id, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addPermissionsForUser6RequestBuilder(name, id, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addPermissionsForUser6", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addPermissionsForUser6RequestBuilder(String name, String id, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling addPermissionsForUser6");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling addPermissionsForUser6");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/repository/{id}/users/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Returns list of groups which weren&#39;t granted explicitly any deployment project permissions. Resource is paged, returns single page of resources.
   * @param id Deployment project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @return FindAssignedGroups200Response
   * @throws ApiException if fails to make API call
   */
  public FindAssignedGroups200Response getAvailableGroups(String id, Integer limit, Integer start, String name) throws ApiException {
    ApiResponse<FindAssignedGroups200Response> localVarResponse = getAvailableGroupsWithHttpInfo(id, limit, start, name);
    return localVarResponse.getData();
  }

  /**
   * 
   * Returns list of groups which weren&#39;t granted explicitly any deployment project permissions. Resource is paged, returns single page of resources.
   * @param id Deployment project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @return ApiResponse&lt;FindAssignedGroups200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FindAssignedGroups200Response> getAvailableGroupsWithHttpInfo(String id, Integer limit, Integer start, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAvailableGroupsRequestBuilder(id, limit, start, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAvailableGroups", localVarResponse);
        }
        return new ApiResponse<FindAssignedGroups200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FindAssignedGroups200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAvailableGroupsRequestBuilder(String id, Integer limit, Integer start, String name) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getAvailableGroups");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/deployment/{id}/available-groups"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Returns list of groups which weren&#39;t granted explicitly any deployment environment permissions. Resource is paged, returns single page of resources.
   * @param id Deployment environment entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @return FindAssignedGroups200Response
   * @throws ApiException if fails to make API call
   */
  public FindAssignedGroups200Response getAvailableGroups1(String id, Integer limit, Integer start, String name) throws ApiException {
    ApiResponse<FindAssignedGroups200Response> localVarResponse = getAvailableGroups1WithHttpInfo(id, limit, start, name);
    return localVarResponse.getData();
  }

  /**
   * 
   * Returns list of groups which weren&#39;t granted explicitly any deployment environment permissions. Resource is paged, returns single page of resources.
   * @param id Deployment environment entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @return ApiResponse&lt;FindAssignedGroups200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FindAssignedGroups200Response> getAvailableGroups1WithHttpInfo(String id, Integer limit, Integer start, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAvailableGroups1RequestBuilder(id, limit, start, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAvailableGroups1", localVarResponse);
        }
        return new ApiResponse<FindAssignedGroups200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FindAssignedGroups200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAvailableGroups1RequestBuilder(String id, Integer limit, Integer start, String name) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getAvailableGroups1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/environment/{id}/available-groups"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Returns list of groups which weren&#39;t granted explicitly any permissions. Resource is paged, returns single page of resources.
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @param ignore  (optional)
   * @return FindAssignedGroups200Response
   * @throws ApiException if fails to make API call
   */
  public FindAssignedGroups200Response getAvailableGroups2(Integer limit, Integer start, String name, String ignore) throws ApiException {
    ApiResponse<FindAssignedGroups200Response> localVarResponse = getAvailableGroups2WithHttpInfo(limit, start, name, ignore);
    return localVarResponse.getData();
  }

  /**
   * 
   * Returns list of groups which weren&#39;t granted explicitly any permissions. Resource is paged, returns single page of resources.
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @param ignore  (optional)
   * @return ApiResponse&lt;FindAssignedGroups200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FindAssignedGroups200Response> getAvailableGroups2WithHttpInfo(Integer limit, Integer start, String name, String ignore) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAvailableGroups2RequestBuilder(limit, start, name, ignore);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAvailableGroups2", localVarResponse);
        }
        return new ApiResponse<FindAssignedGroups200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FindAssignedGroups200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAvailableGroups2RequestBuilder(Integer limit, Integer start, String name, String ignore) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/global/available-groups";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParameterBaseName = "ignore";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ignore", ignore));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Returns list of groups which weren&#39;t granted explicitly any plan permissions. Resource is paged, returns single page of resources.
   * @param key Plan entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @return FindAssignedGroups200Response
   * @throws ApiException if fails to make API call
   */
  public FindAssignedGroups200Response getAvailableGroups3(String key, Integer limit, Integer start, String name) throws ApiException {
    ApiResponse<FindAssignedGroups200Response> localVarResponse = getAvailableGroups3WithHttpInfo(key, limit, start, name);
    return localVarResponse.getData();
  }

  /**
   * 
   * Returns list of groups which weren&#39;t granted explicitly any plan permissions. Resource is paged, returns single page of resources.
   * @param key Plan entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @return ApiResponse&lt;FindAssignedGroups200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FindAssignedGroups200Response> getAvailableGroups3WithHttpInfo(String key, Integer limit, Integer start, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAvailableGroups3RequestBuilder(key, limit, start, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAvailableGroups3", localVarResponse);
        }
        return new ApiResponse<FindAssignedGroups200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FindAssignedGroups200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAvailableGroups3RequestBuilder(String key, Integer limit, Integer start, String name) throws ApiException {
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling getAvailableGroups3");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/plan/{key}/available-groups"
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Returns list of groups which weren&#39;t granted explicitly any project permissions. Resource is paged, returns single page of resources.
   * @param key Project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @return FindAssignedGroups200Response
   * @throws ApiException if fails to make API call
   */
  public FindAssignedGroups200Response getAvailableGroups4(String key, Integer limit, Integer start, String name) throws ApiException {
    ApiResponse<FindAssignedGroups200Response> localVarResponse = getAvailableGroups4WithHttpInfo(key, limit, start, name);
    return localVarResponse.getData();
  }

  /**
   * 
   * Returns list of groups which weren&#39;t granted explicitly any project permissions. Resource is paged, returns single page of resources.
   * @param key Project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @return ApiResponse&lt;FindAssignedGroups200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FindAssignedGroups200Response> getAvailableGroups4WithHttpInfo(String key, Integer limit, Integer start, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAvailableGroups4RequestBuilder(key, limit, start, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAvailableGroups4", localVarResponse);
        }
        return new ApiResponse<FindAssignedGroups200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FindAssignedGroups200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAvailableGroups4RequestBuilder(String key, Integer limit, Integer start, String name) throws ApiException {
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling getAvailableGroups4");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/project/{key}/available-groups"
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Returns list of groups which weren&#39;t granted explicitly any project plan permissions. Resource is paged, returns single page of resources.
   * @param key Project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @return FindAssignedGroups200Response
   * @throws ApiException if fails to make API call
   */
  public FindAssignedGroups200Response getAvailableGroups5(String key, Integer limit, Integer start, String name) throws ApiException {
    ApiResponse<FindAssignedGroups200Response> localVarResponse = getAvailableGroups5WithHttpInfo(key, limit, start, name);
    return localVarResponse.getData();
  }

  /**
   * 
   * Returns list of groups which weren&#39;t granted explicitly any project plan permissions. Resource is paged, returns single page of resources.
   * @param key Project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @return ApiResponse&lt;FindAssignedGroups200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FindAssignedGroups200Response> getAvailableGroups5WithHttpInfo(String key, Integer limit, Integer start, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAvailableGroups5RequestBuilder(key, limit, start, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAvailableGroups5", localVarResponse);
        }
        return new ApiResponse<FindAssignedGroups200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FindAssignedGroups200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAvailableGroups5RequestBuilder(String key, Integer limit, Integer start, String name) throws ApiException {
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling getAvailableGroups5");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/projectplan/{key}/available-groups"
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Returns list of groups which weren&#39;t granted explicitly any repository permissions. Resource is paged, returns single page of resources.
   * @param id Repository entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @return FindAssignedGroups200Response
   * @throws ApiException if fails to make API call
   */
  public FindAssignedGroups200Response getAvailableGroups6(String id, Integer limit, Integer start, String name) throws ApiException {
    ApiResponse<FindAssignedGroups200Response> localVarResponse = getAvailableGroups6WithHttpInfo(id, limit, start, name);
    return localVarResponse.getData();
  }

  /**
   * 
   * Returns list of groups which weren&#39;t granted explicitly any repository permissions. Resource is paged, returns single page of resources.
   * @param id Repository entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @return ApiResponse&lt;FindAssignedGroups200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FindAssignedGroups200Response> getAvailableGroups6WithHttpInfo(String id, Integer limit, Integer start, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAvailableGroups6RequestBuilder(id, limit, start, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAvailableGroups6", localVarResponse);
        }
        return new ApiResponse<FindAssignedGroups200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FindAssignedGroups200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAvailableGroups6RequestBuilder(String id, Integer limit, Integer start, String name) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getAvailableGroups6");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/repository/{id}/available-groups"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Returns list of users which weren&#39;t granted explicitly any deployment project permissions. Resource is paged, returns single page of resources.
   * @param id Deployment project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @return GetAvailableUsers6200Response
   * @throws ApiException if fails to make API call
   */
  public GetAvailableUsers6200Response getAvailableUsers(String id, Integer limit, Integer start, String name) throws ApiException {
    ApiResponse<GetAvailableUsers6200Response> localVarResponse = getAvailableUsersWithHttpInfo(id, limit, start, name);
    return localVarResponse.getData();
  }

  /**
   * 
   * Returns list of users which weren&#39;t granted explicitly any deployment project permissions. Resource is paged, returns single page of resources.
   * @param id Deployment project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @return ApiResponse&lt;GetAvailableUsers6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetAvailableUsers6200Response> getAvailableUsersWithHttpInfo(String id, Integer limit, Integer start, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAvailableUsersRequestBuilder(id, limit, start, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAvailableUsers", localVarResponse);
        }
        return new ApiResponse<GetAvailableUsers6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetAvailableUsers6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAvailableUsersRequestBuilder(String id, Integer limit, Integer start, String name) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getAvailableUsers");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/deployment/{id}/available-users"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Returns list of users which weren&#39;t granted explicitly any deployment environment permissions. Resource is paged, returns single page of resources.
   * @param id Deployment environment entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @return GetAvailableUsers6200Response
   * @throws ApiException if fails to make API call
   */
  public GetAvailableUsers6200Response getAvailableUsers1(String id, Integer limit, Integer start, String name) throws ApiException {
    ApiResponse<GetAvailableUsers6200Response> localVarResponse = getAvailableUsers1WithHttpInfo(id, limit, start, name);
    return localVarResponse.getData();
  }

  /**
   * 
   * Returns list of users which weren&#39;t granted explicitly any deployment environment permissions. Resource is paged, returns single page of resources.
   * @param id Deployment environment entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @return ApiResponse&lt;GetAvailableUsers6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetAvailableUsers6200Response> getAvailableUsers1WithHttpInfo(String id, Integer limit, Integer start, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAvailableUsers1RequestBuilder(id, limit, start, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAvailableUsers1", localVarResponse);
        }
        return new ApiResponse<GetAvailableUsers6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetAvailableUsers6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAvailableUsers1RequestBuilder(String id, Integer limit, Integer start, String name) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getAvailableUsers1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/environment/{id}/available-users"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Returns list of users which weren&#39;t granted explicitly any permissions. Resource is paged, returns single page of resources.
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @param ignore  (optional)
   * @return GetAvailableUsers6200Response
   * @throws ApiException if fails to make API call
   */
  public GetAvailableUsers6200Response getAvailableUsers2(Integer limit, Integer start, String name, String ignore) throws ApiException {
    ApiResponse<GetAvailableUsers6200Response> localVarResponse = getAvailableUsers2WithHttpInfo(limit, start, name, ignore);
    return localVarResponse.getData();
  }

  /**
   * 
   * Returns list of users which weren&#39;t granted explicitly any permissions. Resource is paged, returns single page of resources.
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @param ignore  (optional)
   * @return ApiResponse&lt;GetAvailableUsers6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetAvailableUsers6200Response> getAvailableUsers2WithHttpInfo(Integer limit, Integer start, String name, String ignore) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAvailableUsers2RequestBuilder(limit, start, name, ignore);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAvailableUsers2", localVarResponse);
        }
        return new ApiResponse<GetAvailableUsers6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetAvailableUsers6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAvailableUsers2RequestBuilder(Integer limit, Integer start, String name, String ignore) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/global/available-users";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParameterBaseName = "ignore";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ignore", ignore));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Returns list of users which weren&#39;t granted explicitly any plan permissions. Resource is paged, returns single page of resources.
   * @param key Plan entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @return GetAvailableUsers6200Response
   * @throws ApiException if fails to make API call
   */
  public GetAvailableUsers6200Response getAvailableUsers3(String key, Integer limit, Integer start, String name) throws ApiException {
    ApiResponse<GetAvailableUsers6200Response> localVarResponse = getAvailableUsers3WithHttpInfo(key, limit, start, name);
    return localVarResponse.getData();
  }

  /**
   * 
   * Returns list of users which weren&#39;t granted explicitly any plan permissions. Resource is paged, returns single page of resources.
   * @param key Plan entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @return ApiResponse&lt;GetAvailableUsers6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetAvailableUsers6200Response> getAvailableUsers3WithHttpInfo(String key, Integer limit, Integer start, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAvailableUsers3RequestBuilder(key, limit, start, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAvailableUsers3", localVarResponse);
        }
        return new ApiResponse<GetAvailableUsers6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetAvailableUsers6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAvailableUsers3RequestBuilder(String key, Integer limit, Integer start, String name) throws ApiException {
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling getAvailableUsers3");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/plan/{key}/available-users"
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Returns list of users which weren&#39;t granted explicitly any project permissions. Resource is paged, returns single page of resources.
   * @param key Project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @return GetAvailableUsers6200Response
   * @throws ApiException if fails to make API call
   */
  public GetAvailableUsers6200Response getAvailableUsers4(String key, Integer limit, Integer start, String name) throws ApiException {
    ApiResponse<GetAvailableUsers6200Response> localVarResponse = getAvailableUsers4WithHttpInfo(key, limit, start, name);
    return localVarResponse.getData();
  }

  /**
   * 
   * Returns list of users which weren&#39;t granted explicitly any project permissions. Resource is paged, returns single page of resources.
   * @param key Project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @return ApiResponse&lt;GetAvailableUsers6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetAvailableUsers6200Response> getAvailableUsers4WithHttpInfo(String key, Integer limit, Integer start, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAvailableUsers4RequestBuilder(key, limit, start, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAvailableUsers4", localVarResponse);
        }
        return new ApiResponse<GetAvailableUsers6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetAvailableUsers6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAvailableUsers4RequestBuilder(String key, Integer limit, Integer start, String name) throws ApiException {
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling getAvailableUsers4");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/project/{key}/available-users"
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Returns list of users which weren&#39;t granted explicitly any project plan permissions. Resource is paged, returns single page of resources.
   * @param key Project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @return GetAvailableUsers6200Response
   * @throws ApiException if fails to make API call
   */
  public GetAvailableUsers6200Response getAvailableUsers5(String key, Integer limit, Integer start, String name) throws ApiException {
    ApiResponse<GetAvailableUsers6200Response> localVarResponse = getAvailableUsers5WithHttpInfo(key, limit, start, name);
    return localVarResponse.getData();
  }

  /**
   * 
   * Returns list of users which weren&#39;t granted explicitly any project plan permissions. Resource is paged, returns single page of resources.
   * @param key Project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @return ApiResponse&lt;GetAvailableUsers6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetAvailableUsers6200Response> getAvailableUsers5WithHttpInfo(String key, Integer limit, Integer start, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAvailableUsers5RequestBuilder(key, limit, start, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAvailableUsers5", localVarResponse);
        }
        return new ApiResponse<GetAvailableUsers6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetAvailableUsers6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAvailableUsers5RequestBuilder(String key, Integer limit, Integer start, String name) throws ApiException {
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling getAvailableUsers5");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/projectplan/{key}/available-users"
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Returns list of users which weren&#39;t granted explicitly any repository permissions. Resource is paged, returns single page of resources.
   * @param id Repository entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @return GetAvailableUsers6200Response
   * @throws ApiException if fails to make API call
   */
  public GetAvailableUsers6200Response getAvailableUsers6(String id, Integer limit, Integer start, String name) throws ApiException {
    ApiResponse<GetAvailableUsers6200Response> localVarResponse = getAvailableUsers6WithHttpInfo(id, limit, start, name);
    return localVarResponse.getData();
  }

  /**
   * 
   * Returns list of users which weren&#39;t granted explicitly any repository permissions. Resource is paged, returns single page of resources.
   * @param id Repository entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @return ApiResponse&lt;GetAvailableUsers6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetAvailableUsers6200Response> getAvailableUsers6WithHttpInfo(String id, Integer limit, Integer start, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAvailableUsers6RequestBuilder(id, limit, start, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAvailableUsers6", localVarResponse);
        }
        return new ApiResponse<GetAvailableUsers6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetAvailableUsers6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAvailableUsers6RequestBuilder(String id, Integer limit, Integer start, String name) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getAvailableUsers6");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/repository/{id}/available-users"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a list of groups with their deployment project permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
   * @param id Deployment project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @return ListGroupPermissions6200Response
   * @throws ApiException if fails to make API call
   */
  public ListGroupPermissions6200Response listGroupPermissions(String id, Integer limit, Integer start, String name) throws ApiException {
    ApiResponse<ListGroupPermissions6200Response> localVarResponse = listGroupPermissionsWithHttpInfo(id, limit, start, name);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a list of groups with their deployment project permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
   * @param id Deployment project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @return ApiResponse&lt;ListGroupPermissions6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListGroupPermissions6200Response> listGroupPermissionsWithHttpInfo(String id, Integer limit, Integer start, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listGroupPermissionsRequestBuilder(id, limit, start, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listGroupPermissions", localVarResponse);
        }
        return new ApiResponse<ListGroupPermissions6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListGroupPermissions6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listGroupPermissionsRequestBuilder(String id, Integer limit, Integer start, String name) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling listGroupPermissions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/deployment/{id}/groups"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a list of groups with their deployment environment permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
   * @param id Deployment environment entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @return ListGroupPermissions6200Response
   * @throws ApiException if fails to make API call
   */
  public ListGroupPermissions6200Response listGroupPermissions1(String id, Integer limit, Integer start, String name) throws ApiException {
    ApiResponse<ListGroupPermissions6200Response> localVarResponse = listGroupPermissions1WithHttpInfo(id, limit, start, name);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a list of groups with their deployment environment permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
   * @param id Deployment environment entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @return ApiResponse&lt;ListGroupPermissions6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListGroupPermissions6200Response> listGroupPermissions1WithHttpInfo(String id, Integer limit, Integer start, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listGroupPermissions1RequestBuilder(id, limit, start, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listGroupPermissions1", localVarResponse);
        }
        return new ApiResponse<ListGroupPermissions6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListGroupPermissions6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listGroupPermissions1RequestBuilder(String id, Integer limit, Integer start, String name) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling listGroupPermissions1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/environment/{id}/groups"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a list of groups with their global permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @param ignore  (optional)
   * @return ListGroupPermissions6200Response
   * @throws ApiException if fails to make API call
   */
  public ListGroupPermissions6200Response listGroupPermissions2(Integer limit, Integer start, String name, String ignore) throws ApiException {
    ApiResponse<ListGroupPermissions6200Response> localVarResponse = listGroupPermissions2WithHttpInfo(limit, start, name, ignore);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a list of groups with their global permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @param ignore  (optional)
   * @return ApiResponse&lt;ListGroupPermissions6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListGroupPermissions6200Response> listGroupPermissions2WithHttpInfo(Integer limit, Integer start, String name, String ignore) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listGroupPermissions2RequestBuilder(limit, start, name, ignore);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listGroupPermissions2", localVarResponse);
        }
        return new ApiResponse<ListGroupPermissions6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListGroupPermissions6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listGroupPermissions2RequestBuilder(Integer limit, Integer start, String name, String ignore) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/global/groups";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParameterBaseName = "ignore";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ignore", ignore));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a list of groups with their plan permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
   * @param key Plan entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @return ListGroupPermissions6200Response
   * @throws ApiException if fails to make API call
   */
  public ListGroupPermissions6200Response listGroupPermissions3(String key, Integer limit, Integer start, String name) throws ApiException {
    ApiResponse<ListGroupPermissions6200Response> localVarResponse = listGroupPermissions3WithHttpInfo(key, limit, start, name);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a list of groups with their plan permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
   * @param key Plan entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @return ApiResponse&lt;ListGroupPermissions6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListGroupPermissions6200Response> listGroupPermissions3WithHttpInfo(String key, Integer limit, Integer start, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listGroupPermissions3RequestBuilder(key, limit, start, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listGroupPermissions3", localVarResponse);
        }
        return new ApiResponse<ListGroupPermissions6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListGroupPermissions6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listGroupPermissions3RequestBuilder(String key, Integer limit, Integer start, String name) throws ApiException {
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling listGroupPermissions3");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/plan/{key}/groups"
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a list of groups with their project permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
   * @param key Project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @return ListGroupPermissions6200Response
   * @throws ApiException if fails to make API call
   */
  public ListGroupPermissions6200Response listGroupPermissions4(String key, Integer limit, Integer start, String name) throws ApiException {
    ApiResponse<ListGroupPermissions6200Response> localVarResponse = listGroupPermissions4WithHttpInfo(key, limit, start, name);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a list of groups with their project permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
   * @param key Project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @return ApiResponse&lt;ListGroupPermissions6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListGroupPermissions6200Response> listGroupPermissions4WithHttpInfo(String key, Integer limit, Integer start, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listGroupPermissions4RequestBuilder(key, limit, start, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listGroupPermissions4", localVarResponse);
        }
        return new ApiResponse<ListGroupPermissions6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListGroupPermissions6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listGroupPermissions4RequestBuilder(String key, Integer limit, Integer start, String name) throws ApiException {
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling listGroupPermissions4");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/project/{key}/groups"
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a list of groups with their project plan permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
   * @param key Project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @return ListGroupPermissions6200Response
   * @throws ApiException if fails to make API call
   */
  public ListGroupPermissions6200Response listGroupPermissions5(String key, Integer limit, Integer start, String name) throws ApiException {
    ApiResponse<ListGroupPermissions6200Response> localVarResponse = listGroupPermissions5WithHttpInfo(key, limit, start, name);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a list of groups with their project plan permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
   * @param key Project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @return ApiResponse&lt;ListGroupPermissions6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListGroupPermissions6200Response> listGroupPermissions5WithHttpInfo(String key, Integer limit, Integer start, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listGroupPermissions5RequestBuilder(key, limit, start, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listGroupPermissions5", localVarResponse);
        }
        return new ApiResponse<ListGroupPermissions6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListGroupPermissions6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listGroupPermissions5RequestBuilder(String key, Integer limit, Integer start, String name) throws ApiException {
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling listGroupPermissions5");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/projectplan/{key}/groups"
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a list of groups with their repository permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
   * @param id Repository entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @return ListGroupPermissions6200Response
   * @throws ApiException if fails to make API call
   */
  public ListGroupPermissions6200Response listGroupPermissions6(String id, Integer limit, Integer start, String name) throws ApiException {
    ApiResponse<ListGroupPermissions6200Response> localVarResponse = listGroupPermissions6WithHttpInfo(id, limit, start, name);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a list of groups with their repository permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
   * @param id Repository entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name Group name filter, filter is case insensitive matches group name (optional)
   * @return ApiResponse&lt;ListGroupPermissions6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListGroupPermissions6200Response> listGroupPermissions6WithHttpInfo(String id, Integer limit, Integer start, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listGroupPermissions6RequestBuilder(id, limit, start, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listGroupPermissions6", localVarResponse);
        }
        return new ApiResponse<ListGroupPermissions6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListGroupPermissions6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listGroupPermissions6RequestBuilder(String id, Integer limit, Integer start, String name) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling listGroupPermissions6");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/repository/{id}/groups"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a list of roles with their deployment project permissions. This resource is paged returns a single page of results, although only 2 roles are supported: LOGGED IN users, ANONYMOUS users.
   * @param id Deployment project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return ListRolePermissions6200Response
   * @throws ApiException if fails to make API call
   */
  public ListRolePermissions6200Response listRolePermissions(String id, Integer limit, Integer start) throws ApiException {
    ApiResponse<ListRolePermissions6200Response> localVarResponse = listRolePermissionsWithHttpInfo(id, limit, start);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a list of roles with their deployment project permissions. This resource is paged returns a single page of results, although only 2 roles are supported: LOGGED IN users, ANONYMOUS users.
   * @param id Deployment project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return ApiResponse&lt;ListRolePermissions6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListRolePermissions6200Response> listRolePermissionsWithHttpInfo(String id, Integer limit, Integer start) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listRolePermissionsRequestBuilder(id, limit, start);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listRolePermissions", localVarResponse);
        }
        return new ApiResponse<ListRolePermissions6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListRolePermissions6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listRolePermissionsRequestBuilder(String id, Integer limit, Integer start) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling listRolePermissions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/deployment/{id}/roles"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a list of roles with their deployment environment permissions. This resource is paged returns a single page of results, although only 2 roles are supported: LOGGED IN users, ANONYMOUS users
   * @param id Deployment environment entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return ListRolePermissions6200Response
   * @throws ApiException if fails to make API call
   */
  public ListRolePermissions6200Response listRolePermissions1(String id, Integer limit, Integer start) throws ApiException {
    ApiResponse<ListRolePermissions6200Response> localVarResponse = listRolePermissions1WithHttpInfo(id, limit, start);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a list of roles with their deployment environment permissions. This resource is paged returns a single page of results, although only 2 roles are supported: LOGGED IN users, ANONYMOUS users
   * @param id Deployment environment entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return ApiResponse&lt;ListRolePermissions6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListRolePermissions6200Response> listRolePermissions1WithHttpInfo(String id, Integer limit, Integer start) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listRolePermissions1RequestBuilder(id, limit, start);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listRolePermissions1", localVarResponse);
        }
        return new ApiResponse<ListRolePermissions6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListRolePermissions6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listRolePermissions1RequestBuilder(String id, Integer limit, Integer start) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling listRolePermissions1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/environment/{id}/roles"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a list of roles with their global permissions. This resource is paged returns a single page of results, although only 2 roles are supported: LOGGED IN users, ANONYMOUS users
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param ignore  (optional)
   * @return ListRolePermissions6200Response
   * @throws ApiException if fails to make API call
   */
  public ListRolePermissions6200Response listRolePermissions2(Integer limit, Integer start, String ignore) throws ApiException {
    ApiResponse<ListRolePermissions6200Response> localVarResponse = listRolePermissions2WithHttpInfo(limit, start, ignore);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a list of roles with their global permissions. This resource is paged returns a single page of results, although only 2 roles are supported: LOGGED IN users, ANONYMOUS users
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param ignore  (optional)
   * @return ApiResponse&lt;ListRolePermissions6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListRolePermissions6200Response> listRolePermissions2WithHttpInfo(Integer limit, Integer start, String ignore) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listRolePermissions2RequestBuilder(limit, start, ignore);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listRolePermissions2", localVarResponse);
        }
        return new ApiResponse<ListRolePermissions6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListRolePermissions6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listRolePermissions2RequestBuilder(Integer limit, Integer start, String ignore) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/global/roles";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "ignore";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ignore", ignore));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a list of roles with their plan permissions. This resource is paged returns a single page of results, although only 2 roles are supported: LOGGED IN users, ANONYMOUS users.
   * @param key Plan entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return ListRolePermissions6200Response
   * @throws ApiException if fails to make API call
   */
  public ListRolePermissions6200Response listRolePermissions3(String key, Integer limit, Integer start) throws ApiException {
    ApiResponse<ListRolePermissions6200Response> localVarResponse = listRolePermissions3WithHttpInfo(key, limit, start);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a list of roles with their plan permissions. This resource is paged returns a single page of results, although only 2 roles are supported: LOGGED IN users, ANONYMOUS users.
   * @param key Plan entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return ApiResponse&lt;ListRolePermissions6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListRolePermissions6200Response> listRolePermissions3WithHttpInfo(String key, Integer limit, Integer start) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listRolePermissions3RequestBuilder(key, limit, start);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listRolePermissions3", localVarResponse);
        }
        return new ApiResponse<ListRolePermissions6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListRolePermissions6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listRolePermissions3RequestBuilder(String key, Integer limit, Integer start) throws ApiException {
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling listRolePermissions3");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/plan/{key}/roles"
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a list of roles with their project permissions. This resource is paged returns a single page of results, although only LOGGED IN users role is supported
   * @param key Project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return ListRolePermissions6200Response
   * @throws ApiException if fails to make API call
   */
  public ListRolePermissions6200Response listRolePermissions4(String key, Integer limit, Integer start) throws ApiException {
    ApiResponse<ListRolePermissions6200Response> localVarResponse = listRolePermissions4WithHttpInfo(key, limit, start);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a list of roles with their project permissions. This resource is paged returns a single page of results, although only LOGGED IN users role is supported
   * @param key Project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return ApiResponse&lt;ListRolePermissions6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListRolePermissions6200Response> listRolePermissions4WithHttpInfo(String key, Integer limit, Integer start) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listRolePermissions4RequestBuilder(key, limit, start);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listRolePermissions4", localVarResponse);
        }
        return new ApiResponse<ListRolePermissions6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListRolePermissions6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listRolePermissions4RequestBuilder(String key, Integer limit, Integer start) throws ApiException {
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling listRolePermissions4");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/project/{key}/roles"
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a list of roles with their project plan permissions. This resource is paged returns a single page of results, although only 2 roles are supported: LOGGED IN users, ANONYMOUS users.
   * @param key Project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return ListRolePermissions6200Response
   * @throws ApiException if fails to make API call
   */
  public ListRolePermissions6200Response listRolePermissions5(String key, Integer limit, Integer start) throws ApiException {
    ApiResponse<ListRolePermissions6200Response> localVarResponse = listRolePermissions5WithHttpInfo(key, limit, start);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a list of roles with their project plan permissions. This resource is paged returns a single page of results, although only 2 roles are supported: LOGGED IN users, ANONYMOUS users.
   * @param key Project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return ApiResponse&lt;ListRolePermissions6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListRolePermissions6200Response> listRolePermissions5WithHttpInfo(String key, Integer limit, Integer start) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listRolePermissions5RequestBuilder(key, limit, start);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listRolePermissions5", localVarResponse);
        }
        return new ApiResponse<ListRolePermissions6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListRolePermissions6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listRolePermissions5RequestBuilder(String key, Integer limit, Integer start) throws ApiException {
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling listRolePermissions5");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/projectplan/{key}/roles"
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a list of roles with their repository permissions. This resource is paged returns a single page of results, although only LOGGED IN users role is supported.
   * @param id Repository entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return ListRolePermissions6200Response
   * @throws ApiException if fails to make API call
   */
  public ListRolePermissions6200Response listRolePermissions6(String id, Integer limit, Integer start) throws ApiException {
    ApiResponse<ListRolePermissions6200Response> localVarResponse = listRolePermissions6WithHttpInfo(id, limit, start);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a list of roles with their repository permissions. This resource is paged returns a single page of results, although only LOGGED IN users role is supported.
   * @param id Repository entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return ApiResponse&lt;ListRolePermissions6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListRolePermissions6200Response> listRolePermissions6WithHttpInfo(String id, Integer limit, Integer start) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listRolePermissions6RequestBuilder(id, limit, start);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listRolePermissions6", localVarResponse);
        }
        return new ApiResponse<ListRolePermissions6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListRolePermissions6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listRolePermissions6RequestBuilder(String id, Integer limit, Integer start) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling listRolePermissions6");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/repository/{id}/roles"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
   * @param id Deployment project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @return ListUserPermissions6200Response
   * @throws ApiException if fails to make API call
   */
  public ListUserPermissions6200Response listUserPermissions(String id, Integer limit, Integer start, String name) throws ApiException {
    ApiResponse<ListUserPermissions6200Response> localVarResponse = listUserPermissionsWithHttpInfo(id, limit, start, name);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
   * @param id Deployment project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @return ApiResponse&lt;ListUserPermissions6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListUserPermissions6200Response> listUserPermissionsWithHttpInfo(String id, Integer limit, Integer start, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listUserPermissionsRequestBuilder(id, limit, start, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listUserPermissions", localVarResponse);
        }
        return new ApiResponse<ListUserPermissions6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListUserPermissions6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listUserPermissionsRequestBuilder(String id, Integer limit, Integer start, String name) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling listUserPermissions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/deployment/{id}/users"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
   * @param id Deployment environment entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @return ListUserPermissions6200Response
   * @throws ApiException if fails to make API call
   */
  public ListUserPermissions6200Response listUserPermissions1(String id, Integer limit, Integer start, String name) throws ApiException {
    ApiResponse<ListUserPermissions6200Response> localVarResponse = listUserPermissions1WithHttpInfo(id, limit, start, name);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
   * @param id Deployment environment entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @return ApiResponse&lt;ListUserPermissions6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListUserPermissions6200Response> listUserPermissions1WithHttpInfo(String id, Integer limit, Integer start, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listUserPermissions1RequestBuilder(id, limit, start, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listUserPermissions1", localVarResponse);
        }
        return new ApiResponse<ListUserPermissions6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListUserPermissions6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listUserPermissions1RequestBuilder(String id, Integer limit, Integer start, String name) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling listUserPermissions1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/environment/{id}/users"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a list of users with their global permissions. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @param ignore  (optional)
   * @return ListUserPermissions6200Response
   * @throws ApiException if fails to make API call
   */
  public ListUserPermissions6200Response listUserPermissions2(Integer limit, Integer start, String name, String ignore) throws ApiException {
    ApiResponse<ListUserPermissions6200Response> localVarResponse = listUserPermissions2WithHttpInfo(limit, start, name, ignore);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a list of users with their global permissions. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @param ignore  (optional)
   * @return ApiResponse&lt;ListUserPermissions6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListUserPermissions6200Response> listUserPermissions2WithHttpInfo(Integer limit, Integer start, String name, String ignore) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listUserPermissions2RequestBuilder(limit, start, name, ignore);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listUserPermissions2", localVarResponse);
        }
        return new ApiResponse<ListUserPermissions6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListUserPermissions6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listUserPermissions2RequestBuilder(Integer limit, Integer start, String name, String ignore) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/global/users";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParameterBaseName = "ignore";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ignore", ignore));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
   * @param key Plan entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @return ListUserPermissions6200Response
   * @throws ApiException if fails to make API call
   */
  public ListUserPermissions6200Response listUserPermissions3(String key, Integer limit, Integer start, String name) throws ApiException {
    ApiResponse<ListUserPermissions6200Response> localVarResponse = listUserPermissions3WithHttpInfo(key, limit, start, name);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
   * @param key Plan entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @return ApiResponse&lt;ListUserPermissions6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListUserPermissions6200Response> listUserPermissions3WithHttpInfo(String key, Integer limit, Integer start, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listUserPermissions3RequestBuilder(key, limit, start, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listUserPermissions3", localVarResponse);
        }
        return new ApiResponse<ListUserPermissions6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListUserPermissions6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listUserPermissions3RequestBuilder(String key, Integer limit, Integer start, String name) throws ApiException {
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling listUserPermissions3");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/plan/{key}/users"
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
   * @param key Project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @return ListUserPermissions6200Response
   * @throws ApiException if fails to make API call
   */
  public ListUserPermissions6200Response listUserPermissions4(String key, Integer limit, Integer start, String name) throws ApiException {
    ApiResponse<ListUserPermissions6200Response> localVarResponse = listUserPermissions4WithHttpInfo(key, limit, start, name);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
   * @param key Project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @return ApiResponse&lt;ListUserPermissions6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListUserPermissions6200Response> listUserPermissions4WithHttpInfo(String key, Integer limit, Integer start, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listUserPermissions4RequestBuilder(key, limit, start, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listUserPermissions4", localVarResponse);
        }
        return new ApiResponse<ListUserPermissions6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListUserPermissions6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listUserPermissions4RequestBuilder(String key, Integer limit, Integer start, String name) throws ApiException {
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling listUserPermissions4");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/project/{key}/users"
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
   * @param key Project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @return ListUserPermissions6200Response
   * @throws ApiException if fails to make API call
   */
  public ListUserPermissions6200Response listUserPermissions5(String key, Integer limit, Integer start, String name) throws ApiException {
    ApiResponse<ListUserPermissions6200Response> localVarResponse = listUserPermissions5WithHttpInfo(key, limit, start, name);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
   * @param key Project entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @return ApiResponse&lt;ListUserPermissions6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListUserPermissions6200Response> listUserPermissions5WithHttpInfo(String key, Integer limit, Integer start, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listUserPermissions5RequestBuilder(key, limit, start, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listUserPermissions5", localVarResponse);
        }
        return new ApiResponse<ListUserPermissions6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListUserPermissions6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listUserPermissions5RequestBuilder(String key, Integer limit, Integer start, String name) throws ApiException {
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling listUserPermissions5");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/projectplan/{key}/users"
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
   * @param id Repository entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @return ListUserPermissions6200Response
   * @throws ApiException if fails to make API call
   */
  public ListUserPermissions6200Response listUserPermissions6(String id, Integer limit, Integer start, String name) throws ApiException {
    ApiResponse<ListUserPermissions6200Response> localVarResponse = listUserPermissions6WithHttpInfo(id, limit, start, name);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
   * @param id Repository entity key (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @param name User filter, filter is case insensitive matches: username, user&#39;s full name, user&#39;s email (optional)
   * @return ApiResponse&lt;ListUserPermissions6200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListUserPermissions6200Response> listUserPermissions6WithHttpInfo(String id, Integer limit, Integer start, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listUserPermissions6RequestBuilder(id, limit, start, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listUserPermissions6", localVarResponse);
        }
        return new ApiResponse<ListUserPermissions6200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListUserPermissions6200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listUserPermissions6RequestBuilder(String id, Integer limit, Integer start, String name) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling listUserPermissions6");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/repository/{id}/users"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Revokes deployment project permissions from a given group.
   * @param name Affected group (required)
   * @param id Deployment project entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @throws ApiException if fails to make API call
   */
  public void removePermissionsForGroup(String name, String id, List<String> requestBody) throws ApiException {
    removePermissionsForGroupWithHttpInfo(name, id, requestBody);
  }

  /**
   * 
   * Revokes deployment project permissions from a given group.
   * @param name Affected group (required)
   * @param id Deployment project entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removePermissionsForGroupWithHttpInfo(String name, String id, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removePermissionsForGroupRequestBuilder(name, id, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removePermissionsForGroup", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removePermissionsForGroupRequestBuilder(String name, String id, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling removePermissionsForGroup");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling removePermissionsForGroup");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/deployment/{id}/groups/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Revokes deployment environment permissions from a given group.
   * @param name Affected group (required)
   * @param id Deployment environment entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @throws ApiException if fails to make API call
   */
  public void removePermissionsForGroup1(String name, String id, List<String> requestBody) throws ApiException {
    removePermissionsForGroup1WithHttpInfo(name, id, requestBody);
  }

  /**
   * 
   * Revokes deployment environment permissions from a given group.
   * @param name Affected group (required)
   * @param id Deployment environment entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removePermissionsForGroup1WithHttpInfo(String name, String id, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removePermissionsForGroup1RequestBuilder(name, id, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removePermissionsForGroup1", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removePermissionsForGroup1RequestBuilder(String name, String id, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling removePermissionsForGroup1");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling removePermissionsForGroup1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/environment/{id}/groups/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Revokes global permissions from a given group.
   * @param name Affected group (required)
   * @param ignore  (optional)
   * @param requestBody Permission names to be revoked (optional
   * @throws ApiException if fails to make API call
   */
  public void removePermissionsForGroup2(String name, String ignore, List<String> requestBody) throws ApiException {
    removePermissionsForGroup2WithHttpInfo(name, ignore, requestBody);
  }

  /**
   * 
   * Revokes global permissions from a given group.
   * @param name Affected group (required)
   * @param ignore  (optional)
   * @param requestBody Permission names to be revoked (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removePermissionsForGroup2WithHttpInfo(String name, String ignore, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removePermissionsForGroup2RequestBuilder(name, ignore, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removePermissionsForGroup2", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removePermissionsForGroup2RequestBuilder(String name, String ignore, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling removePermissionsForGroup2");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/global/groups/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "ignore";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ignore", ignore));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Revokes plan permissions from a given group.
   * @param name Affected group (required)
   * @param key Plan entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @throws ApiException if fails to make API call
   */
  public void removePermissionsForGroup3(String name, String key, List<String> requestBody) throws ApiException {
    removePermissionsForGroup3WithHttpInfo(name, key, requestBody);
  }

  /**
   * 
   * Revokes plan permissions from a given group.
   * @param name Affected group (required)
   * @param key Plan entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removePermissionsForGroup3WithHttpInfo(String name, String key, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removePermissionsForGroup3RequestBuilder(name, key, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removePermissionsForGroup3", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removePermissionsForGroup3RequestBuilder(String name, String key, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling removePermissionsForGroup3");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling removePermissionsForGroup3");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/plan/{key}/groups/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Revokes project permissions from a given group.
   * @param name Affected group (required)
   * @param key Project entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @throws ApiException if fails to make API call
   */
  public void removePermissionsForGroup4(String name, String key, List<String> requestBody) throws ApiException {
    removePermissionsForGroup4WithHttpInfo(name, key, requestBody);
  }

  /**
   * 
   * Revokes project permissions from a given group.
   * @param name Affected group (required)
   * @param key Project entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removePermissionsForGroup4WithHttpInfo(String name, String key, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removePermissionsForGroup4RequestBuilder(name, key, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removePermissionsForGroup4", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removePermissionsForGroup4RequestBuilder(String name, String key, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling removePermissionsForGroup4");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling removePermissionsForGroup4");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/project/{key}/groups/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Revokes project plan permissions from a given group.
   * @param name Affected group (required)
   * @param key Project entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @throws ApiException if fails to make API call
   */
  public void removePermissionsForGroup5(String name, String key, List<String> requestBody) throws ApiException {
    removePermissionsForGroup5WithHttpInfo(name, key, requestBody);
  }

  /**
   * 
   * Revokes project plan permissions from a given group.
   * @param name Affected group (required)
   * @param key Project entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removePermissionsForGroup5WithHttpInfo(String name, String key, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removePermissionsForGroup5RequestBuilder(name, key, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removePermissionsForGroup5", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removePermissionsForGroup5RequestBuilder(String name, String key, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling removePermissionsForGroup5");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling removePermissionsForGroup5");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/projectplan/{key}/groups/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Revokes repository permissions from a given group.
   * @param name Affected group (required)
   * @param id Repository entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @throws ApiException if fails to make API call
   */
  public void removePermissionsForGroup6(String name, String id, List<String> requestBody) throws ApiException {
    removePermissionsForGroup6WithHttpInfo(name, id, requestBody);
  }

  /**
   * 
   * Revokes repository permissions from a given group.
   * @param name Affected group (required)
   * @param id Repository entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removePermissionsForGroup6WithHttpInfo(String name, String id, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removePermissionsForGroup6RequestBuilder(name, id, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removePermissionsForGroup6", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removePermissionsForGroup6RequestBuilder(String name, String id, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling removePermissionsForGroup6");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling removePermissionsForGroup6");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/repository/{id}/groups/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Revokes deployment project permissions from a given role.
   * @param name Affected role (required)
   * @param id Deployment project entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @throws ApiException if fails to make API call
   */
  public void removePermissionsForRole(String name, String id, List<String> requestBody) throws ApiException {
    removePermissionsForRoleWithHttpInfo(name, id, requestBody);
  }

  /**
   * 
   * Revokes deployment project permissions from a given role.
   * @param name Affected role (required)
   * @param id Deployment project entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removePermissionsForRoleWithHttpInfo(String name, String id, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removePermissionsForRoleRequestBuilder(name, id, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removePermissionsForRole", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removePermissionsForRoleRequestBuilder(String name, String id, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling removePermissionsForRole");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling removePermissionsForRole");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/deployment/{id}/roles/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Revokes deployment environment permissions from a given role.
   * @param name Affected role (required)
   * @param id Deployment environment entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @throws ApiException if fails to make API call
   */
  public void removePermissionsForRole1(String name, String id, List<String> requestBody) throws ApiException {
    removePermissionsForRole1WithHttpInfo(name, id, requestBody);
  }

  /**
   * 
   * Revokes deployment environment permissions from a given role.
   * @param name Affected role (required)
   * @param id Deployment environment entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removePermissionsForRole1WithHttpInfo(String name, String id, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removePermissionsForRole1RequestBuilder(name, id, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removePermissionsForRole1", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removePermissionsForRole1RequestBuilder(String name, String id, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling removePermissionsForRole1");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling removePermissionsForRole1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/environment/{id}/roles/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Revokes global permissions from a given role.
   * @param name Affected role (required)
   * @param ignore  (optional)
   * @param requestBody Permission names to be revoked (optional
   * @throws ApiException if fails to make API call
   */
  public void removePermissionsForRole2(String name, String ignore, List<String> requestBody) throws ApiException {
    removePermissionsForRole2WithHttpInfo(name, ignore, requestBody);
  }

  /**
   * 
   * Revokes global permissions from a given role.
   * @param name Affected role (required)
   * @param ignore  (optional)
   * @param requestBody Permission names to be revoked (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removePermissionsForRole2WithHttpInfo(String name, String ignore, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removePermissionsForRole2RequestBuilder(name, ignore, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removePermissionsForRole2", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removePermissionsForRole2RequestBuilder(String name, String ignore, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling removePermissionsForRole2");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/global/roles/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "ignore";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ignore", ignore));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Revokes plan permissions from a given role.
   * @param name Affected role (required)
   * @param key Plan entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @throws ApiException if fails to make API call
   */
  public void removePermissionsForRole3(String name, String key, List<String> requestBody) throws ApiException {
    removePermissionsForRole3WithHttpInfo(name, key, requestBody);
  }

  /**
   * 
   * Revokes plan permissions from a given role.
   * @param name Affected role (required)
   * @param key Plan entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removePermissionsForRole3WithHttpInfo(String name, String key, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removePermissionsForRole3RequestBuilder(name, key, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removePermissionsForRole3", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removePermissionsForRole3RequestBuilder(String name, String key, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling removePermissionsForRole3");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling removePermissionsForRole3");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/plan/{key}/roles/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Revokes project permissions from a given role.
   * @param name Affected role (required)
   * @param key Project entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @throws ApiException if fails to make API call
   */
  public void removePermissionsForRole4(String name, String key, List<String> requestBody) throws ApiException {
    removePermissionsForRole4WithHttpInfo(name, key, requestBody);
  }

  /**
   * 
   * Revokes project permissions from a given role.
   * @param name Affected role (required)
   * @param key Project entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removePermissionsForRole4WithHttpInfo(String name, String key, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removePermissionsForRole4RequestBuilder(name, key, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removePermissionsForRole4", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removePermissionsForRole4RequestBuilder(String name, String key, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling removePermissionsForRole4");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling removePermissionsForRole4");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/project/{key}/roles/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Revokes project plan permissions from a given role.
   * @param name Affected role (required)
   * @param key Project entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @throws ApiException if fails to make API call
   */
  public void removePermissionsForRole5(String name, String key, List<String> requestBody) throws ApiException {
    removePermissionsForRole5WithHttpInfo(name, key, requestBody);
  }

  /**
   * 
   * Revokes project plan permissions from a given role.
   * @param name Affected role (required)
   * @param key Project entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removePermissionsForRole5WithHttpInfo(String name, String key, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removePermissionsForRole5RequestBuilder(name, key, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removePermissionsForRole5", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removePermissionsForRole5RequestBuilder(String name, String key, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling removePermissionsForRole5");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling removePermissionsForRole5");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/projectplan/{key}/roles/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Revokes repository permissions from a given role.
   * @param name Affected role (required)
   * @param id Repository entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @throws ApiException if fails to make API call
   */
  public void removePermissionsForRole6(String name, String id, List<String> requestBody) throws ApiException {
    removePermissionsForRole6WithHttpInfo(name, id, requestBody);
  }

  /**
   * 
   * Revokes repository permissions from a given role.
   * @param name Affected role (required)
   * @param id Repository entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removePermissionsForRole6WithHttpInfo(String name, String id, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removePermissionsForRole6RequestBuilder(name, id, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removePermissionsForRole6", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removePermissionsForRole6RequestBuilder(String name, String id, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling removePermissionsForRole6");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling removePermissionsForRole6");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/repository/{id}/roles/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Revokes deployment project permissions from a given user.
   * @param name Username of the affected user (required)
   * @param id Deployment project entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @throws ApiException if fails to make API call
   */
  public void removePermissionsForUser(String name, String id, List<String> requestBody) throws ApiException {
    removePermissionsForUserWithHttpInfo(name, id, requestBody);
  }

  /**
   * 
   * Revokes deployment project permissions from a given user.
   * @param name Username of the affected user (required)
   * @param id Deployment project entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removePermissionsForUserWithHttpInfo(String name, String id, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removePermissionsForUserRequestBuilder(name, id, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removePermissionsForUser", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removePermissionsForUserRequestBuilder(String name, String id, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling removePermissionsForUser");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling removePermissionsForUser");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/deployment/{id}/users/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Revokes deployment environment permissions from a given user.
   * @param name Username of the affected user (required)
   * @param id Deployment environment entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @throws ApiException if fails to make API call
   */
  public void removePermissionsForUser1(String name, String id, List<String> requestBody) throws ApiException {
    removePermissionsForUser1WithHttpInfo(name, id, requestBody);
  }

  /**
   * 
   * Revokes deployment environment permissions from a given user.
   * @param name Username of the affected user (required)
   * @param id Deployment environment entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removePermissionsForUser1WithHttpInfo(String name, String id, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removePermissionsForUser1RequestBuilder(name, id, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removePermissionsForUser1", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removePermissionsForUser1RequestBuilder(String name, String id, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling removePermissionsForUser1");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling removePermissionsForUser1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/environment/{id}/users/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Revokes global permissions from a given user.
   * @param name Username of the affected user (required)
   * @param ignore  (optional)
   * @param requestBody Permission names to be revoked (optional
   * @throws ApiException if fails to make API call
   */
  public void removePermissionsForUser2(String name, String ignore, List<String> requestBody) throws ApiException {
    removePermissionsForUser2WithHttpInfo(name, ignore, requestBody);
  }

  /**
   * 
   * Revokes global permissions from a given user.
   * @param name Username of the affected user (required)
   * @param ignore  (optional)
   * @param requestBody Permission names to be revoked (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removePermissionsForUser2WithHttpInfo(String name, String ignore, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removePermissionsForUser2RequestBuilder(name, ignore, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removePermissionsForUser2", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removePermissionsForUser2RequestBuilder(String name, String ignore, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling removePermissionsForUser2");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/global/users/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "ignore";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ignore", ignore));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Revokes plan permissions from a given user.
   * @param name Username of the affected user (required)
   * @param key Plan entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @throws ApiException if fails to make API call
   */
  public void removePermissionsForUser3(String name, String key, List<String> requestBody) throws ApiException {
    removePermissionsForUser3WithHttpInfo(name, key, requestBody);
  }

  /**
   * 
   * Revokes plan permissions from a given user.
   * @param name Username of the affected user (required)
   * @param key Plan entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removePermissionsForUser3WithHttpInfo(String name, String key, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removePermissionsForUser3RequestBuilder(name, key, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removePermissionsForUser3", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removePermissionsForUser3RequestBuilder(String name, String key, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling removePermissionsForUser3");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling removePermissionsForUser3");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/plan/{key}/users/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Revokes project permissions from a given user.
   * @param name Username of the affected user (required)
   * @param key Project entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @throws ApiException if fails to make API call
   */
  public void removePermissionsForUser4(String name, String key, List<String> requestBody) throws ApiException {
    removePermissionsForUser4WithHttpInfo(name, key, requestBody);
  }

  /**
   * 
   * Revokes project permissions from a given user.
   * @param name Username of the affected user (required)
   * @param key Project entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removePermissionsForUser4WithHttpInfo(String name, String key, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removePermissionsForUser4RequestBuilder(name, key, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removePermissionsForUser4", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removePermissionsForUser4RequestBuilder(String name, String key, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling removePermissionsForUser4");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling removePermissionsForUser4");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/project/{key}/users/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Revokes project plan permissions from a given user.
   * @param name Username of the affected user (required)
   * @param key Project entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @throws ApiException if fails to make API call
   */
  public void removePermissionsForUser5(String name, String key, List<String> requestBody) throws ApiException {
    removePermissionsForUser5WithHttpInfo(name, key, requestBody);
  }

  /**
   * 
   * Revokes project plan permissions from a given user.
   * @param name Username of the affected user (required)
   * @param key Project entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removePermissionsForUser5WithHttpInfo(String name, String key, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removePermissionsForUser5RequestBuilder(name, key, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removePermissionsForUser5", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removePermissionsForUser5RequestBuilder(String name, String key, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling removePermissionsForUser5");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling removePermissionsForUser5");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/projectplan/{key}/users/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Revokes repository permissions from a given user.
   * @param name Username of the affected user (required)
   * @param id Repository entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @throws ApiException if fails to make API call
   */
  public void removePermissionsForUser6(String name, String id, List<String> requestBody) throws ApiException {
    removePermissionsForUser6WithHttpInfo(name, id, requestBody);
  }

  /**
   * 
   * Revokes repository permissions from a given user.
   * @param name Username of the affected user (required)
   * @param id Repository entity key (required)
   * @param requestBody Permission names to be revoked (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removePermissionsForUser6WithHttpInfo(String name, String id, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removePermissionsForUser6RequestBuilder(name, id, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removePermissionsForUser6", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removePermissionsForUser6RequestBuilder(String name, String id, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling removePermissionsForUser6");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling removePermissionsForUser6");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/permissions/repository/{id}/users/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
