/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import me.glindholm.mylyn.bamboo.internal.rest.model.Commit;
import me.glindholm.mylyn.bamboo.internal.rest.model.RepositoryDataEntity;
import me.glindholm.mylyn.bamboo.internal.rest.model.ResultsSummary;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * RepositoryChangeset
 */
@JsonPropertyOrder({
  RepositoryChangeset.JSON_PROPERTY_RESULTS_SUMMARY,
  RepositoryChangeset.JSON_PROPERTY_POSITION,
  RepositoryChangeset.JSON_PROPERTY_CHANGESET_ID,
  RepositoryChangeset.JSON_PROPERTY_BUILD_TRIGGER,
  RepositoryChangeset.JSON_PROPERTY_COMMITS,
  RepositoryChangeset.JSON_PROPERTY_REPOSITORY_DATA,
  RepositoryChangeset.JSON_PROPERTY_SKIPPED_COMMITS_COUNT,
  RepositoryChangeset.JSON_PROPERTY_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RepositoryChangeset implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_RESULTS_SUMMARY = "resultsSummary";
  private ResultsSummary resultsSummary;

  public static final String JSON_PROPERTY_POSITION = "position";
  private Integer position;

  public static final String JSON_PROPERTY_CHANGESET_ID = "changesetId";
  private String changesetId;

  public static final String JSON_PROPERTY_BUILD_TRIGGER = "buildTrigger";
  private Boolean buildTrigger;

  public static final String JSON_PROPERTY_COMMITS = "commits";
  private Set<Commit> commits;

  public static final String JSON_PROPERTY_REPOSITORY_DATA = "repositoryData";
  private RepositoryDataEntity repositoryData;

  public static final String JSON_PROPERTY_SKIPPED_COMMITS_COUNT = "skippedCommitsCount";
  private Long skippedCommitsCount;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public RepositoryChangeset() { 
  }

  public RepositoryChangeset resultsSummary(ResultsSummary resultsSummary) {
    this.resultsSummary = resultsSummary;
    return this;
  }

   /**
   * Get resultsSummary
   * @return resultsSummary
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_RESULTS_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ResultsSummary getResultsSummary() {
    return resultsSummary;
  }


  @JsonProperty(JSON_PROPERTY_RESULTS_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResultsSummary(ResultsSummary resultsSummary) {
    this.resultsSummary = resultsSummary;
  }


  public RepositoryChangeset position(Integer position) {
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_POSITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPosition() {
    return position;
  }


  @JsonProperty(JSON_PROPERTY_POSITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPosition(Integer position) {
    this.position = position;
  }


  public RepositoryChangeset changesetId(String changesetId) {
    this.changesetId = changesetId;
    return this;
  }

   /**
   * Get changesetId
   * @return changesetId
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CHANGESET_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getChangesetId() {
    return changesetId;
  }


  @JsonProperty(JSON_PROPERTY_CHANGESET_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChangesetId(String changesetId) {
    this.changesetId = changesetId;
  }


  public RepositoryChangeset buildTrigger(Boolean buildTrigger) {
    this.buildTrigger = buildTrigger;
    return this;
  }

   /**
   * Get buildTrigger
   * @return buildTrigger
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BUILD_TRIGGER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getBuildTrigger() {
    return buildTrigger;
  }


  @JsonProperty(JSON_PROPERTY_BUILD_TRIGGER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildTrigger(Boolean buildTrigger) {
    this.buildTrigger = buildTrigger;
  }


  public RepositoryChangeset commits(Set<Commit> commits) {
    this.commits = commits;
    return this;
  }

  public RepositoryChangeset addCommitsItem(Commit commitsItem) {
    if (this.commits == null) {
      this.commits = new LinkedHashSet<>();
    }
    this.commits.add(commitsItem);
    return this;
  }

   /**
   * Get commits
   * @return commits
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_COMMITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<Commit> getCommits() {
    return commits;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_COMMITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommits(Set<Commit> commits) {
    this.commits = commits;
  }


  public RepositoryChangeset repositoryData(RepositoryDataEntity repositoryData) {
    this.repositoryData = repositoryData;
    return this;
  }

   /**
   * Get repositoryData
   * @return repositoryData
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_REPOSITORY_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RepositoryDataEntity getRepositoryData() {
    return repositoryData;
  }


  @JsonProperty(JSON_PROPERTY_REPOSITORY_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRepositoryData(RepositoryDataEntity repositoryData) {
    this.repositoryData = repositoryData;
  }


  public RepositoryChangeset skippedCommitsCount(Long skippedCommitsCount) {
    this.skippedCommitsCount = skippedCommitsCount;
    return this;
  }

   /**
   * Get skippedCommitsCount
   * @return skippedCommitsCount
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SKIPPED_COMMITS_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getSkippedCommitsCount() {
    return skippedCommitsCount;
  }


  @JsonProperty(JSON_PROPERTY_SKIPPED_COMMITS_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSkippedCommitsCount(Long skippedCommitsCount) {
    this.skippedCommitsCount = skippedCommitsCount;
  }


  public RepositoryChangeset id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  /**
   * Return true if this RepositoryChangeset object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepositoryChangeset repositoryChangeset = (RepositoryChangeset) o;
    return Objects.equals(this.resultsSummary, repositoryChangeset.resultsSummary) &&
        Objects.equals(this.position, repositoryChangeset.position) &&
        Objects.equals(this.changesetId, repositoryChangeset.changesetId) &&
        Objects.equals(this.buildTrigger, repositoryChangeset.buildTrigger) &&
        Objects.equals(this.commits, repositoryChangeset.commits) &&
        Objects.equals(this.repositoryData, repositoryChangeset.repositoryData) &&
        Objects.equals(this.skippedCommitsCount, repositoryChangeset.skippedCommitsCount) &&
        Objects.equals(this.id, repositoryChangeset.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resultsSummary, position, changesetId, buildTrigger, commits, repositoryData, skippedCommitsCount, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepositoryChangeset {\n");
    sb.append("    resultsSummary: ").append(toIndentedString(resultsSummary)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    changesetId: ").append(toIndentedString(changesetId)).append("\n");
    sb.append("    buildTrigger: ").append(toIndentedString(buildTrigger)).append("\n");
    sb.append("    commits: ").append(toIndentedString(commits)).append("\n");
    sb.append("    repositoryData: ").append(toIndentedString(repositoryData)).append("\n");
    sb.append("    skippedCommitsCount: ").append(toIndentedString(skippedCommitsCount)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

