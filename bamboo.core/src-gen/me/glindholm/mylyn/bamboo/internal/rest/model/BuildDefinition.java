/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import me.glindholm.mylyn.bamboo.internal.rest.model.BranchIntegrationConfiguration;
import me.glindholm.mylyn.bamboo.internal.rest.model.BranchMonitoringConfiguration;
import me.glindholm.mylyn.bamboo.internal.rest.model.BranchSpecificConfiguration;
import me.glindholm.mylyn.bamboo.internal.rest.model.DockerPipelineConfiguration;
import me.glindholm.mylyn.bamboo.internal.rest.model.TaskDefinition;
import me.glindholm.mylyn.bamboo.internal.rest.model.TriggerDefinition;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * BuildDefinition
 */
@JsonPropertyOrder({
  BuildDefinition.JSON_PROPERTY_TRIGGER_DEFINITIONS,
  BuildDefinition.JSON_PROPERTY_DOCKER_PIPELINE_CONFIGURATION,
  BuildDefinition.JSON_PROPERTY_CUSTOM_CONFIGURATION,
  BuildDefinition.JSON_PROPERTY_BRANCH_SPECIFIC_CONFIGURATION,
  BuildDefinition.JSON_PROPERTY_CONFIG_OBJECTS,
  BuildDefinition.JSON_PROPERTY_BRANCH_INTEGRATION_CONFIGURATION,
  BuildDefinition.JSON_PROPERTY_TASK_DEFINITIONS,
  BuildDefinition.JSON_PROPERTY_CLEAN_WORKING_DIRECTORY,
  BuildDefinition.JSON_PROPERTY_REPOSITORY_ID_DEFINING_WORKING_DIR,
  BuildDefinition.JSON_PROPERTY_MERGED,
  BuildDefinition.JSON_PROPERTY_BRANCH_MONITORING_CONFIGURATION
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BuildDefinition implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_TRIGGER_DEFINITIONS = "triggerDefinitions";
  private List<TriggerDefinition> triggerDefinitions;

  public static final String JSON_PROPERTY_DOCKER_PIPELINE_CONFIGURATION = "dockerPipelineConfiguration";
  private DockerPipelineConfiguration dockerPipelineConfiguration;

  public static final String JSON_PROPERTY_CUSTOM_CONFIGURATION = "customConfiguration";
  private Object customConfiguration;

  public static final String JSON_PROPERTY_BRANCH_SPECIFIC_CONFIGURATION = "branchSpecificConfiguration";
  private BranchSpecificConfiguration branchSpecificConfiguration;

  public static final String JSON_PROPERTY_CONFIG_OBJECTS = "configObjects";
  private Object configObjects;

  public static final String JSON_PROPERTY_BRANCH_INTEGRATION_CONFIGURATION = "branchIntegrationConfiguration";
  private BranchIntegrationConfiguration branchIntegrationConfiguration;

  public static final String JSON_PROPERTY_TASK_DEFINITIONS = "taskDefinitions";
  private List<TaskDefinition> taskDefinitions;

  public static final String JSON_PROPERTY_CLEAN_WORKING_DIRECTORY = "cleanWorkingDirectory";
  private Boolean cleanWorkingDirectory;

  public static final String JSON_PROPERTY_REPOSITORY_ID_DEFINING_WORKING_DIR = "repositoryIdDefiningWorkingDir";
  private Long repositoryIdDefiningWorkingDir;

  public static final String JSON_PROPERTY_MERGED = "merged";
  private Boolean merged;

  public static final String JSON_PROPERTY_BRANCH_MONITORING_CONFIGURATION = "branchMonitoringConfiguration";
  private BranchMonitoringConfiguration branchMonitoringConfiguration;

  public BuildDefinition() { 
  }

  public BuildDefinition triggerDefinitions(List<TriggerDefinition> triggerDefinitions) {
    this.triggerDefinitions = triggerDefinitions;
    return this;
  }

  public BuildDefinition addTriggerDefinitionsItem(TriggerDefinition triggerDefinitionsItem) {
    if (this.triggerDefinitions == null) {
      this.triggerDefinitions = new ArrayList<>();
    }
    this.triggerDefinitions.add(triggerDefinitionsItem);
    return this;
  }

   /**
   * Get triggerDefinitions
   * @return triggerDefinitions
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TRIGGER_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<TriggerDefinition> getTriggerDefinitions() {
    return triggerDefinitions;
  }


  @JsonProperty(JSON_PROPERTY_TRIGGER_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTriggerDefinitions(List<TriggerDefinition> triggerDefinitions) {
    this.triggerDefinitions = triggerDefinitions;
  }


  public BuildDefinition dockerPipelineConfiguration(DockerPipelineConfiguration dockerPipelineConfiguration) {
    this.dockerPipelineConfiguration = dockerPipelineConfiguration;
    return this;
  }

   /**
   * Get dockerPipelineConfiguration
   * @return dockerPipelineConfiguration
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DOCKER_PIPELINE_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DockerPipelineConfiguration getDockerPipelineConfiguration() {
    return dockerPipelineConfiguration;
  }


  @JsonProperty(JSON_PROPERTY_DOCKER_PIPELINE_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDockerPipelineConfiguration(DockerPipelineConfiguration dockerPipelineConfiguration) {
    this.dockerPipelineConfiguration = dockerPipelineConfiguration;
  }


  public BuildDefinition customConfiguration(Object customConfiguration) {
    this.customConfiguration = customConfiguration;
    return this;
  }

   /**
   * Get customConfiguration
   * @return customConfiguration
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CUSTOM_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getCustomConfiguration() {
    return customConfiguration;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOM_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomConfiguration(Object customConfiguration) {
    this.customConfiguration = customConfiguration;
  }


  public BuildDefinition branchSpecificConfiguration(BranchSpecificConfiguration branchSpecificConfiguration) {
    this.branchSpecificConfiguration = branchSpecificConfiguration;
    return this;
  }

   /**
   * Get branchSpecificConfiguration
   * @return branchSpecificConfiguration
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BRANCH_SPECIFIC_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BranchSpecificConfiguration getBranchSpecificConfiguration() {
    return branchSpecificConfiguration;
  }


  @JsonProperty(JSON_PROPERTY_BRANCH_SPECIFIC_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBranchSpecificConfiguration(BranchSpecificConfiguration branchSpecificConfiguration) {
    this.branchSpecificConfiguration = branchSpecificConfiguration;
  }


  public BuildDefinition configObjects(Object configObjects) {
    this.configObjects = configObjects;
    return this;
  }

   /**
   * Get configObjects
   * @return configObjects
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CONFIG_OBJECTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getConfigObjects() {
    return configObjects;
  }


  @JsonProperty(JSON_PROPERTY_CONFIG_OBJECTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfigObjects(Object configObjects) {
    this.configObjects = configObjects;
  }


  public BuildDefinition branchIntegrationConfiguration(BranchIntegrationConfiguration branchIntegrationConfiguration) {
    this.branchIntegrationConfiguration = branchIntegrationConfiguration;
    return this;
  }

   /**
   * Get branchIntegrationConfiguration
   * @return branchIntegrationConfiguration
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BRANCH_INTEGRATION_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BranchIntegrationConfiguration getBranchIntegrationConfiguration() {
    return branchIntegrationConfiguration;
  }


  @JsonProperty(JSON_PROPERTY_BRANCH_INTEGRATION_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBranchIntegrationConfiguration(BranchIntegrationConfiguration branchIntegrationConfiguration) {
    this.branchIntegrationConfiguration = branchIntegrationConfiguration;
  }


  public BuildDefinition taskDefinitions(List<TaskDefinition> taskDefinitions) {
    this.taskDefinitions = taskDefinitions;
    return this;
  }

  public BuildDefinition addTaskDefinitionsItem(TaskDefinition taskDefinitionsItem) {
    if (this.taskDefinitions == null) {
      this.taskDefinitions = new ArrayList<>();
    }
    this.taskDefinitions.add(taskDefinitionsItem);
    return this;
  }

   /**
   * Get taskDefinitions
   * @return taskDefinitions
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TASK_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<TaskDefinition> getTaskDefinitions() {
    return taskDefinitions;
  }


  @JsonProperty(JSON_PROPERTY_TASK_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaskDefinitions(List<TaskDefinition> taskDefinitions) {
    this.taskDefinitions = taskDefinitions;
  }


  public BuildDefinition cleanWorkingDirectory(Boolean cleanWorkingDirectory) {
    this.cleanWorkingDirectory = cleanWorkingDirectory;
    return this;
  }

   /**
   * Get cleanWorkingDirectory
   * @return cleanWorkingDirectory
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CLEAN_WORKING_DIRECTORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCleanWorkingDirectory() {
    return cleanWorkingDirectory;
  }


  @JsonProperty(JSON_PROPERTY_CLEAN_WORKING_DIRECTORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCleanWorkingDirectory(Boolean cleanWorkingDirectory) {
    this.cleanWorkingDirectory = cleanWorkingDirectory;
  }


  public BuildDefinition repositoryIdDefiningWorkingDir(Long repositoryIdDefiningWorkingDir) {
    this.repositoryIdDefiningWorkingDir = repositoryIdDefiningWorkingDir;
    return this;
  }

   /**
   * Get repositoryIdDefiningWorkingDir
   * @return repositoryIdDefiningWorkingDir
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_REPOSITORY_ID_DEFINING_WORKING_DIR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getRepositoryIdDefiningWorkingDir() {
    return repositoryIdDefiningWorkingDir;
  }


  @JsonProperty(JSON_PROPERTY_REPOSITORY_ID_DEFINING_WORKING_DIR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRepositoryIdDefiningWorkingDir(Long repositoryIdDefiningWorkingDir) {
    this.repositoryIdDefiningWorkingDir = repositoryIdDefiningWorkingDir;
  }


  public BuildDefinition merged(Boolean merged) {
    this.merged = merged;
    return this;
  }

   /**
   * Get merged
   * @return merged
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MERGED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getMerged() {
    return merged;
  }


  @JsonProperty(JSON_PROPERTY_MERGED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMerged(Boolean merged) {
    this.merged = merged;
  }


  public BuildDefinition branchMonitoringConfiguration(BranchMonitoringConfiguration branchMonitoringConfiguration) {
    this.branchMonitoringConfiguration = branchMonitoringConfiguration;
    return this;
  }

   /**
   * Get branchMonitoringConfiguration
   * @return branchMonitoringConfiguration
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BRANCH_MONITORING_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BranchMonitoringConfiguration getBranchMonitoringConfiguration() {
    return branchMonitoringConfiguration;
  }


  @JsonProperty(JSON_PROPERTY_BRANCH_MONITORING_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBranchMonitoringConfiguration(BranchMonitoringConfiguration branchMonitoringConfiguration) {
    this.branchMonitoringConfiguration = branchMonitoringConfiguration;
  }


  /**
   * Return true if this BuildDefinition object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildDefinition buildDefinition = (BuildDefinition) o;
    return Objects.equals(this.triggerDefinitions, buildDefinition.triggerDefinitions) &&
        Objects.equals(this.dockerPipelineConfiguration, buildDefinition.dockerPipelineConfiguration) &&
        Objects.equals(this.customConfiguration, buildDefinition.customConfiguration) &&
        Objects.equals(this.branchSpecificConfiguration, buildDefinition.branchSpecificConfiguration) &&
        Objects.equals(this.configObjects, buildDefinition.configObjects) &&
        Objects.equals(this.branchIntegrationConfiguration, buildDefinition.branchIntegrationConfiguration) &&
        Objects.equals(this.taskDefinitions, buildDefinition.taskDefinitions) &&
        Objects.equals(this.cleanWorkingDirectory, buildDefinition.cleanWorkingDirectory) &&
        Objects.equals(this.repositoryIdDefiningWorkingDir, buildDefinition.repositoryIdDefiningWorkingDir) &&
        Objects.equals(this.merged, buildDefinition.merged) &&
        Objects.equals(this.branchMonitoringConfiguration, buildDefinition.branchMonitoringConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(triggerDefinitions, dockerPipelineConfiguration, customConfiguration, branchSpecificConfiguration, configObjects, branchIntegrationConfiguration, taskDefinitions, cleanWorkingDirectory, repositoryIdDefiningWorkingDir, merged, branchMonitoringConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildDefinition {\n");
    sb.append("    triggerDefinitions: ").append(toIndentedString(triggerDefinitions)).append("\n");
    sb.append("    dockerPipelineConfiguration: ").append(toIndentedString(dockerPipelineConfiguration)).append("\n");
    sb.append("    customConfiguration: ").append(toIndentedString(customConfiguration)).append("\n");
    sb.append("    branchSpecificConfiguration: ").append(toIndentedString(branchSpecificConfiguration)).append("\n");
    sb.append("    configObjects: ").append(toIndentedString(configObjects)).append("\n");
    sb.append("    branchIntegrationConfiguration: ").append(toIndentedString(branchIntegrationConfiguration)).append("\n");
    sb.append("    taskDefinitions: ").append(toIndentedString(taskDefinitions)).append("\n");
    sb.append("    cleanWorkingDirectory: ").append(toIndentedString(cleanWorkingDirectory)).append("\n");
    sb.append("    repositoryIdDefiningWorkingDir: ").append(toIndentedString(repositoryIdDefiningWorkingDir)).append("\n");
    sb.append("    merged: ").append(toIndentedString(merged)).append("\n");
    sb.append("    branchMonitoringConfiguration: ").append(toIndentedString(branchMonitoringConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

