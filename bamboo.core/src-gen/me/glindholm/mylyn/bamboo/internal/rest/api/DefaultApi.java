/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package me.glindholm.mylyn.bamboo.internal.rest.api;

import me.glindholm.mylyn.bamboo.internal.rest.invoker.ApiClient;
import me.glindholm.mylyn.bamboo.internal.rest.invoker.ApiException;
import me.glindholm.mylyn.bamboo.internal.rest.invoker.ApiResponse;
import me.glindholm.mylyn.bamboo.internal.rest.invoker.Pair;

import me.glindholm.mylyn.bamboo.internal.rest.model.BuildMonitoringLink;
import me.glindholm.mylyn.bamboo.internal.rest.model.CreateCommentRequest;
import me.glindholm.mylyn.bamboo.internal.rest.model.DashboardProjectWithEnvironmentStatus;
import me.glindholm.mylyn.bamboo.internal.rest.model.EnvironmentIds;
import me.glindholm.mylyn.bamboo.internal.rest.model.EphemeralAgentsConfigurationDTO;
import me.glindholm.mylyn.bamboo.internal.rest.model.FindPlansWithCustomExpirySettings200Response;
import me.glindholm.mylyn.bamboo.internal.rest.model.GetAgents200Response;
import me.glindholm.mylyn.bamboo.internal.rest.model.GetBrokenBuildsForUser200Response;
import me.glindholm.mylyn.bamboo.internal.rest.model.GetDeploymentProjects200Response;
import me.glindholm.mylyn.bamboo.internal.rest.model.GetEphemeralAgentPodLogs200Response;
import me.glindholm.mylyn.bamboo.internal.rest.model.GetPaginatedProjectRepositories200Response;
import me.glindholm.mylyn.bamboo.internal.rest.model.GetPaginatedProjectSharedCredentials200Response;
import me.glindholm.mylyn.bamboo.internal.rest.model.JsonSearchResultsList;
import me.glindholm.mylyn.bamboo.internal.rest.model.ManualEncryptionRequest;
import me.glindholm.mylyn.bamboo.internal.rest.model.ManualEncryptionResponse;
import me.glindholm.mylyn.bamboo.internal.rest.model.ReindexBean;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestAgent;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestAgentInformation;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestAgentStatus;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestAnonymousServerStatusInfo;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestArtifactHandler;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestAuditLogConfiguration;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestBranchList;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestBuildAgent;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestBuildConcurrency;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestBuildLabel;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestBuildLabels;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestBuildMonitoring;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestCapability;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestChart;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestCombinedExpiryConfiguration;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestCombinedExpiryStatus;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestComments;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestCreateDeploymentProjectRequest;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestCreateVersionRequest;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestDarkFeature;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestDependencies;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestDeploymentProject;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestDeploymentProjectStatusForJiraIssue;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestDeploymentResult;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestDeploymentSpec;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestDeploymentVersion;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestDeploymentVersionAndPlanResult;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestDeploymentVersionStatus;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestElasticConfiguration;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestElasticImageConfig;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestElasticInstanceLog;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestEnableContainer;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestEnvironmentStatusForDashboard;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestEphemeralAgentTemplate;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestErrorCollection;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestFavicon;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestGeneralConfiguration;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestGlobalVariable;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestGlobalVariables;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestGroup;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestIMServerConfiguration;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestIdContainer;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestInfo;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestJiraIssueRelatedDeploymentProjects;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestLinkedDeploymentProject;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestMailConfiguration;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestNamingPreview;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestPlan;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestProject;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestProjectSpec;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestProjects;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestQuarantineConfig;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestQueuedBuild;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestQueuedBuilds;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestQuickFilter;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestRemoteAgentAuthentication;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestRemoteAgentCapability;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestRemoteAgentConfiguration;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestReports;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestRepository;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestRepositoryConnectionResult;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestRepositoryList;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestRepositoryMinimal;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestRepositoryUsageModel;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestResources;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestResponsibleUsers;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestResultStatus;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestResults;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestResultsResults;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestScheduledJob;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestSecuritySettings;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestServerNodesInfo;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestServerStatusInfo;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestUpdateDeploymentProjectRequest;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestUserDarkFeature;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestVariable;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestVariableDefinitionContext;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestVcsLocationSpecsStatus;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestVerificationRequest;
import me.glindholm.mylyn.bamboo.internal.rest.model.Result;
import me.glindholm.mylyn.bamboo.internal.rest.model.RunExpiryResponse;
import me.glindholm.mylyn.bamboo.internal.rest.model.SearchResultsList;
import me.glindholm.mylyn.bamboo.internal.rest.model.SecuritySettingsLink;
import me.glindholm.mylyn.bamboo.internal.rest.model.SimpleRestArtifactHandler;
import me.glindholm.mylyn.bamboo.internal.rest.model.StartBuildRequest;
import me.glindholm.mylyn.bamboo.internal.rest.model.Status;
import me.glindholm.mylyn.bamboo.internal.rest.model.TestConnectionResultDto;
import me.glindholm.mylyn.bamboo.internal.rest.model.UserBean;
import me.glindholm.mylyn.bamboo.internal.rest.model.VersionVariables;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DefaultApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public DefaultApi() {
    this(new ApiClient());
  }

  public DefaultApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * Activates a quick filter for currently logged in user.
   * @param id Quick filter id (required)
   * @throws ApiException if fails to make API call
   */
  public void activateFilter(Long id) throws ApiException {
    activateFilterWithHttpInfo(id);
  }

  /**
   * 
   * Activates a quick filter for currently logged in user.
   * @param id Quick filter id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> activateFilterWithHttpInfo(Long id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = activateFilterRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("activateFilter", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder activateFilterRequestBuilder(Long id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling activateFilter");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/quickFilter/{id}/activate"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Grant permission to create/edit plan in given deployment project by Bamboo Specs from given repository.
   * @param deploymentProjectId Deployment project id (required)
   * @param restIdContainer repository id (required)
   * @return RestRepositoryMinimal
   * @throws ApiException if fails to make API call
   */
  public RestRepositoryMinimal addAssignedRepository(String deploymentProjectId, RestIdContainer restIdContainer) throws ApiException {
    ApiResponse<RestRepositoryMinimal> localVarResponse = addAssignedRepositoryWithHttpInfo(deploymentProjectId, restIdContainer);
    return localVarResponse.getData();
  }

  /**
   * 
   * Grant permission to create/edit plan in given deployment project by Bamboo Specs from given repository.
   * @param deploymentProjectId Deployment project id (required)
   * @param restIdContainer repository id (required)
   * @return ApiResponse&lt;RestRepositoryMinimal&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestRepositoryMinimal> addAssignedRepositoryWithHttpInfo(String deploymentProjectId, RestIdContainer restIdContainer) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addAssignedRepositoryRequestBuilder(deploymentProjectId, restIdContainer);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addAssignedRepository", localVarResponse);
        }
        return new ApiResponse<RestRepositoryMinimal>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestRepositoryMinimal>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addAssignedRepositoryRequestBuilder(String deploymentProjectId, RestIdContainer restIdContainer) throws ApiException {
    // verify the required parameter 'deploymentProjectId' is set
    if (deploymentProjectId == null) {
      throw new ApiException(400, "Missing the required parameter 'deploymentProjectId' when calling addAssignedRepository");
    }
    // verify the required parameter 'restIdContainer' is set
    if (restIdContainer == null) {
      throw new ApiException(400, "Missing the required parameter 'restIdContainer' when calling addAssignedRepository");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/project/{deploymentProjectId}/repository"
        .replace("{deploymentProjectId}", ApiClient.urlEncode(deploymentProjectId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restIdContainer);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Grant permission to create/edit plan in given project by Bamboo Specs from given repository.
   * @param projectKey project key (required)
   * @param restIdContainer repository id (required)
   * @return RestRepositoryMinimal
   * @throws ApiException if fails to make API call
   */
  public RestRepositoryMinimal addAssignedRepository1(String projectKey, RestIdContainer restIdContainer) throws ApiException {
    ApiResponse<RestRepositoryMinimal> localVarResponse = addAssignedRepository1WithHttpInfo(projectKey, restIdContainer);
    return localVarResponse.getData();
  }

  /**
   * 
   * Grant permission to create/edit plan in given project by Bamboo Specs from given repository.
   * @param projectKey project key (required)
   * @param restIdContainer repository id (required)
   * @return ApiResponse&lt;RestRepositoryMinimal&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestRepositoryMinimal> addAssignedRepository1WithHttpInfo(String projectKey, RestIdContainer restIdContainer) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addAssignedRepository1RequestBuilder(projectKey, restIdContainer);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addAssignedRepository1", localVarResponse);
        }
        return new ApiResponse<RestRepositoryMinimal>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestRepositoryMinimal>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addAssignedRepository1RequestBuilder(String projectKey, RestIdContainer restIdContainer) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling addAssignedRepository1");
    }
    // verify the required parameter 'restIdContainer' is set
    if (restIdContainer == null) {
      throw new ApiException(400, "Missing the required parameter 'restIdContainer' when calling addAssignedRepository1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/project/{projectKey}/repository"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restIdContainer);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Adds new comment to build result.
   * @param projectKey project key (required)
   * @param buildKey plan key (might be simply planKey or composite planKey-jobKey) (required)
   * @param buildNumber Build number (required)
   * @param createCommentRequest Build result comment (required)
   * @throws ApiException if fails to make API call
   */
  public void addBuildComment(String projectKey, String buildKey, String buildNumber, CreateCommentRequest createCommentRequest) throws ApiException {
    addBuildCommentWithHttpInfo(projectKey, buildKey, buildNumber, createCommentRequest);
  }

  /**
   * 
   * Adds new comment to build result.
   * @param projectKey project key (required)
   * @param buildKey plan key (might be simply planKey or composite planKey-jobKey) (required)
   * @param buildNumber Build number (required)
   * @param createCommentRequest Build result comment (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addBuildCommentWithHttpInfo(String projectKey, String buildKey, String buildNumber, CreateCommentRequest createCommentRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addBuildCommentRequestBuilder(projectKey, buildKey, buildNumber, createCommentRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addBuildComment", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addBuildCommentRequestBuilder(String projectKey, String buildKey, String buildNumber, CreateCommentRequest createCommentRequest) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling addBuildComment");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling addBuildComment");
    }
    // verify the required parameter 'buildNumber' is set
    if (buildNumber == null) {
      throw new ApiException(400, "Missing the required parameter 'buildNumber' when calling addBuildComment");
    }
    // verify the required parameter 'createCommentRequest' is set
    if (createCommentRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createCommentRequest' when calling addBuildComment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/result/{projectKey}-{buildKey}-{buildNumber}/comment"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()))
        .replace("{buildNumber}", ApiClient.urlEncode(buildNumber.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createCommentRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Adds new label to build result specified by projectKey-buildKey-buildNumber.
   * @param projectKey project key (required)
   * @param buildKey plan key (must be a plan key, not a job key) (required)
   * @param buildNumber Build number may be specified as *latest* for the result with the highest build number (required)
   * @param restBuildLabel Build result label (required)
   * @throws ApiException if fails to make API call
   */
  public void addBuildLabel(String projectKey, String buildKey, String buildNumber, RestBuildLabel restBuildLabel) throws ApiException {
    addBuildLabelWithHttpInfo(projectKey, buildKey, buildNumber, restBuildLabel);
  }

  /**
   * 
   * Adds new label to build result specified by projectKey-buildKey-buildNumber.
   * @param projectKey project key (required)
   * @param buildKey plan key (must be a plan key, not a job key) (required)
   * @param buildNumber Build number may be specified as *latest* for the result with the highest build number (required)
   * @param restBuildLabel Build result label (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addBuildLabelWithHttpInfo(String projectKey, String buildKey, String buildNumber, RestBuildLabel restBuildLabel) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addBuildLabelRequestBuilder(projectKey, buildKey, buildNumber, restBuildLabel);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addBuildLabel", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addBuildLabelRequestBuilder(String projectKey, String buildKey, String buildNumber, RestBuildLabel restBuildLabel) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling addBuildLabel");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling addBuildLabel");
    }
    // verify the required parameter 'buildNumber' is set
    if (buildNumber == null) {
      throw new ApiException(400, "Missing the required parameter 'buildNumber' when calling addBuildLabel");
    }
    // verify the required parameter 'restBuildLabel' is set
    if (restBuildLabel == null) {
      throw new ApiException(400, "Missing the required parameter 'restBuildLabel' when calling addBuildLabel");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/result/{projectKey}-{buildKey}-{buildNumber}/label"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()))
        .replace("{buildNumber}", ApiClient.urlEncode(buildNumber.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restBuildLabel);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Add ephemeral agent template capability.
   * @param configurationId Configuration ID (required)
   * @param restCapability Ephemeral agent template capability (required)
   * @throws ApiException if fails to make API call
   */
  public void addCapability(Long configurationId, RestCapability restCapability) throws ApiException {
    addCapabilityWithHttpInfo(configurationId, restCapability);
  }

  /**
   * 
   * Add ephemeral agent template capability.
   * @param configurationId Configuration ID (required)
   * @param restCapability Ephemeral agent template capability (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addCapabilityWithHttpInfo(Long configurationId, RestCapability restCapability) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addCapabilityRequestBuilder(configurationId, restCapability);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addCapability", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addCapabilityRequestBuilder(Long configurationId, RestCapability restCapability) throws ApiException {
    // verify the required parameter 'configurationId' is set
    if (configurationId == null) {
      throw new ApiException(400, "Missing the required parameter 'configurationId' when calling addCapability");
    }
    // verify the required parameter 'restCapability' is set
    if (restCapability == null) {
      throw new ApiException(400, "Missing the required parameter 'restCapability' when calling addCapability");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/ephemeral/templateConfiguration/{configurationId}/capability"
        .replace("{configurationId}", ApiClient.urlEncode(configurationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restCapability);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Create deployment project.
   * @param restCreateDeploymentProjectRequest deployment project to be created (required)
   * @return RestDeploymentProject
   * @throws ApiException if fails to make API call
   */
  public RestDeploymentProject addDeploymentProject(RestCreateDeploymentProjectRequest restCreateDeploymentProjectRequest) throws ApiException {
    ApiResponse<RestDeploymentProject> localVarResponse = addDeploymentProjectWithHttpInfo(restCreateDeploymentProjectRequest);
    return localVarResponse.getData();
  }

  /**
   * 
   * Create deployment project.
   * @param restCreateDeploymentProjectRequest deployment project to be created (required)
   * @return ApiResponse&lt;RestDeploymentProject&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestDeploymentProject> addDeploymentProjectWithHttpInfo(RestCreateDeploymentProjectRequest restCreateDeploymentProjectRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addDeploymentProjectRequestBuilder(restCreateDeploymentProjectRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addDeploymentProject", localVarResponse);
        }
        return new ApiResponse<RestDeploymentProject>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestDeploymentProject>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addDeploymentProjectRequestBuilder(RestCreateDeploymentProjectRequest restCreateDeploymentProjectRequest) throws ApiException {
    // verify the required parameter 'restCreateDeploymentProjectRequest' is set
    if (restCreateDeploymentProjectRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'restCreateDeploymentProjectRequest' when calling addDeploymentProject");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/project";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restCreateDeploymentProjectRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Add a responsible user for broken build.
   * @param name User name (required)
   * @param planResultKeyOrPlanKey Chain result or plan key, e.g. PROJ-PLAN or PROJ-PLAN-2 (required)
   * @throws ApiException if fails to make API call
   */
  public void addResponsible(String name, String planResultKeyOrPlanKey) throws ApiException {
    addResponsibleWithHttpInfo(name, planResultKeyOrPlanKey);
  }

  /**
   * 
   * Add a responsible user for broken build.
   * @param name User name (required)
   * @param planResultKeyOrPlanKey Chain result or plan key, e.g. PROJ-PLAN or PROJ-PLAN-2 (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addResponsibleWithHttpInfo(String name, String planResultKeyOrPlanKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addResponsibleRequestBuilder(name, planResultKeyOrPlanKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addResponsible", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addResponsibleRequestBuilder(String name, String planResultKeyOrPlanKey) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling addResponsible");
    }
    // verify the required parameter 'planResultKeyOrPlanKey' is set
    if (planResultKeyOrPlanKey == null) {
      throw new ApiException(400, "Missing the required parameter 'planResultKeyOrPlanKey' when calling addResponsible");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/responsibility/latest/brokenBuild/{planResultKeyOrPlanKey}/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{planResultKeyOrPlanKey}", ApiClient.urlEncode(planResultKeyOrPlanKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Authenticates a pending agent with the given UUID. If the agent has already been authenticated, the call will not      * change it&#39;s state.
   * @param agentUuid  (required)
   * @throws ApiException if fails to make API call
   */
  public void authenticateAgent(String agentUuid) throws ApiException {
    authenticateAgentWithHttpInfo(agentUuid);
  }

  /**
   * 
   * Authenticates a pending agent with the given UUID. If the agent has already been authenticated, the call will not      * change it&#39;s state.
   * @param agentUuid  (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> authenticateAgentWithHttpInfo(String agentUuid) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = authenticateAgentRequestBuilder(agentUuid);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("authenticateAgent", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder authenticateAgentRequestBuilder(String agentUuid) throws ApiException {
    // verify the required parameter 'agentUuid' is set
    if (agentUuid == null) {
      throw new ApiException(400, "Missing the required parameter 'agentUuid' when calling authenticateAgent");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/agent/authentication/{agentUuid}"
        .replace("{agentUuid}", ApiClient.urlEncode(agentUuid.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Continue partially done build.  Effectively, this method adds build to the build queue, so is not guarantied that build would be executed immediately. Depending on currently executed builds and length of build queue, build may be executed when queue would be drained. Additional variables could be passed to this method only query parameters (variableName&#x3D;variableValue). Variables defined in Bamboo as global variables or plan variables MUST be prefixed with bamboo.variable ie. bamboo.variable.myVariable&#x3D;valueForMyVariable. When global or plan variables would be passed to this method, will override values valid for previous build execution (override).
   * @param projectKey project key (required)
   * @param buildKey plan key  (only top level plan key, can not be job key) (required)
   * @param buildNumber build number to resume/rerun (required)
   * @param executeAllStages enforce executing all stages in a plan, even if defined as manual stages. Execution will follow and include latest stage, unless some stage will fail. (optional)
   * @param stage name of the stage that should be executed even if manual stage. Execution will follow to the next manual stage after this or end of plan if no subsequent manual stage (optional)
   * @return RestQueuedBuild
   * @throws ApiException if fails to make API call
   */
  public RestQueuedBuild continueBuild(String projectKey, String buildKey, Integer buildNumber, Boolean executeAllStages, String stage) throws ApiException {
    ApiResponse<RestQueuedBuild> localVarResponse = continueBuildWithHttpInfo(projectKey, buildKey, buildNumber, executeAllStages, stage);
    return localVarResponse.getData();
  }

  /**
   * 
   * Continue partially done build.  Effectively, this method adds build to the build queue, so is not guarantied that build would be executed immediately. Depending on currently executed builds and length of build queue, build may be executed when queue would be drained. Additional variables could be passed to this method only query parameters (variableName&#x3D;variableValue). Variables defined in Bamboo as global variables or plan variables MUST be prefixed with bamboo.variable ie. bamboo.variable.myVariable&#x3D;valueForMyVariable. When global or plan variables would be passed to this method, will override values valid for previous build execution (override).
   * @param projectKey project key (required)
   * @param buildKey plan key  (only top level plan key, can not be job key) (required)
   * @param buildNumber build number to resume/rerun (required)
   * @param executeAllStages enforce executing all stages in a plan, even if defined as manual stages. Execution will follow and include latest stage, unless some stage will fail. (optional)
   * @param stage name of the stage that should be executed even if manual stage. Execution will follow to the next manual stage after this or end of plan if no subsequent manual stage (optional)
   * @return ApiResponse&lt;RestQueuedBuild&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestQueuedBuild> continueBuildWithHttpInfo(String projectKey, String buildKey, Integer buildNumber, Boolean executeAllStages, String stage) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = continueBuildRequestBuilder(projectKey, buildKey, buildNumber, executeAllStages, stage);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("continueBuild", localVarResponse);
        }
        return new ApiResponse<RestQueuedBuild>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestQueuedBuild>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder continueBuildRequestBuilder(String projectKey, String buildKey, Integer buildNumber, Boolean executeAllStages, String stage) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling continueBuild");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling continueBuild");
    }
    // verify the required parameter 'buildNumber' is set
    if (buildNumber == null) {
      throw new ApiException(400, "Missing the required parameter 'buildNumber' when calling continueBuild");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/queue/{projectKey}-{buildKey}-{buildNumber}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()))
        .replace("{buildNumber}", ApiClient.urlEncode(buildNumber.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "executeAllStages";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("executeAllStages", executeAllStages));
    localVarQueryParameterBaseName = "stage";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("stage", stage));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Create new agent capability.
   * @param agentId agent id (required)
   * @param restCapability Agent capability (required)
   * @throws ApiException if fails to make API call
   */
  public void createAgentCapability(Long agentId, RestCapability restCapability) throws ApiException {
    createAgentCapabilityWithHttpInfo(agentId, restCapability);
  }

  /**
   * 
   * Create new agent capability.
   * @param agentId agent id (required)
   * @param restCapability Agent capability (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> createAgentCapabilityWithHttpInfo(Long agentId, RestCapability restCapability) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createAgentCapabilityRequestBuilder(agentId, restCapability);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createAgentCapability", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createAgentCapabilityRequestBuilder(Long agentId, RestCapability restCapability) throws ApiException {
    // verify the required parameter 'agentId' is set
    if (agentId == null) {
      throw new ApiException(400, "Missing the required parameter 'agentId' when calling createAgentCapability");
    }
    // verify the required parameter 'restCapability' is set
    if (restCapability == null) {
      throw new ApiException(400, "Missing the required parameter 'restCapability' when calling createAgentCapability");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/agent/{agentId}/capability"
        .replace("{agentId}", ApiClient.urlEncode(agentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restCapability);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Create a single global variable.
   * @param restGlobalVariable  (required)
   * @return RestGlobalVariable
   * @throws ApiException if fails to make API call
   */
  public RestGlobalVariable createGlobalVariable(RestGlobalVariable restGlobalVariable) throws ApiException {
    ApiResponse<RestGlobalVariable> localVarResponse = createGlobalVariableWithHttpInfo(restGlobalVariable);
    return localVarResponse.getData();
  }

  /**
   * 
   * Create a single global variable.
   * @param restGlobalVariable  (required)
   * @return ApiResponse&lt;RestGlobalVariable&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestGlobalVariable> createGlobalVariableWithHttpInfo(RestGlobalVariable restGlobalVariable) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createGlobalVariableRequestBuilder(restGlobalVariable);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createGlobalVariable", localVarResponse);
        }
        return new ApiResponse<RestGlobalVariable>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestGlobalVariable>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createGlobalVariableRequestBuilder(RestGlobalVariable restGlobalVariable) throws ApiException {
    // verify the required parameter 'restGlobalVariable' is set
    if (restGlobalVariable == null) {
      throw new ApiException(400, "Missing the required parameter 'restGlobalVariable' when calling createGlobalVariable");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/globalVariables";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restGlobalVariable);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Create a group.
   * @param restGroup  (required)
   * @return RestGroup
   * @throws ApiException if fails to make API call
   */
  public RestGroup createGroup(RestGroup restGroup) throws ApiException {
    ApiResponse<RestGroup> localVarResponse = createGroupWithHttpInfo(restGroup);
    return localVarResponse.getData();
  }

  /**
   * 
   * Create a group.
   * @param restGroup  (required)
   * @return ApiResponse&lt;RestGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestGroup> createGroupWithHttpInfo(RestGroup restGroup) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createGroupRequestBuilder(restGroup);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createGroup", localVarResponse);
        }
        return new ApiResponse<RestGroup>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestGroup>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createGroupRequestBuilder(RestGroup restGroup) throws ApiException {
    // verify the required parameter 'restGroup' is set
    if (restGroup == null) {
      throw new ApiException(400, "Missing the required parameter 'restGroup' when calling createGroup");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/security/groups";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restGroup);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Create elastic image configuration.
   * @param restElasticImageConfig Elastic image configuration (required)
   * @return RestElasticImageConfig
   * @throws ApiException if fails to make API call
   */
  public RestElasticImageConfig createImageConfiguration(RestElasticImageConfig restElasticImageConfig) throws ApiException {
    ApiResponse<RestElasticImageConfig> localVarResponse = createImageConfigurationWithHttpInfo(restElasticImageConfig);
    return localVarResponse.getData();
  }

  /**
   * 
   * Create elastic image configuration.
   * @param restElasticImageConfig Elastic image configuration (required)
   * @return ApiResponse&lt;RestElasticImageConfig&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestElasticImageConfig> createImageConfigurationWithHttpInfo(RestElasticImageConfig restElasticImageConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createImageConfigurationRequestBuilder(restElasticImageConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createImageConfiguration", localVarResponse);
        }
        return new ApiResponse<RestElasticImageConfig>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestElasticImageConfig>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createImageConfigurationRequestBuilder(RestElasticImageConfig restElasticImageConfig) throws ApiException {
    // verify the required parameter 'restElasticImageConfig' is set
    if (restElasticImageConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'restElasticImageConfig' when calling createImageConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/elasticConfiguration";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restElasticImageConfig);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Create or update project variable.
   * @param projectKey project key (required)
   * @param restVariable Project variable (required)
   * @return RestVariableDefinitionContext
   * @throws ApiException if fails to make API call
   */
  public RestVariableDefinitionContext createOrUpdateVariable(String projectKey, RestVariable restVariable) throws ApiException {
    ApiResponse<RestVariableDefinitionContext> localVarResponse = createOrUpdateVariableWithHttpInfo(projectKey, restVariable);
    return localVarResponse.getData();
  }

  /**
   * 
   * Create or update project variable.
   * @param projectKey project key (required)
   * @param restVariable Project variable (required)
   * @return ApiResponse&lt;RestVariableDefinitionContext&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestVariableDefinitionContext> createOrUpdateVariableWithHttpInfo(String projectKey, RestVariable restVariable) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createOrUpdateVariableRequestBuilder(projectKey, restVariable);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createOrUpdateVariable", localVarResponse);
        }
        return new ApiResponse<RestVariableDefinitionContext>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestVariableDefinitionContext>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createOrUpdateVariableRequestBuilder(String projectKey, RestVariable restVariable) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling createOrUpdateVariable");
    }
    // verify the required parameter 'restVariable' is set
    if (restVariable == null) {
      throw new ApiException(400, "Missing the required parameter 'restVariable' when calling createOrUpdateVariable");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/project/{projectKey}/variable"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restVariable);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Create project.
   * @param restProject Project (required)
   * @return RestProject
   * @throws ApiException if fails to make API call
   */
  public RestProject createProject(RestProject restProject) throws ApiException {
    ApiResponse<RestProject> localVarResponse = createProjectWithHttpInfo(restProject);
    return localVarResponse.getData();
  }

  /**
   * 
   * Create project.
   * @param restProject Project (required)
   * @return ApiResponse&lt;RestProject&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestProject> createProjectWithHttpInfo(RestProject restProject) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createProjectRequestBuilder(restProject);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createProject", localVarResponse);
        }
        return new ApiResponse<RestProject>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestProject>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createProjectRequestBuilder(RestProject restProject) throws ApiException {
    // verify the required parameter 'restProject' is set
    if (restProject == null) {
      throw new ApiException(400, "Missing the required parameter 'restProject' when calling createProject");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/project";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restProject);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Create a new quick filter with basic configuration, e.g. name or position on list. This method does not allow to configure quick filter&#39;s rules.
   * @param restQuickFilter Quick filter (required)
   * @return RestQuickFilter
   * @throws ApiException if fails to make API call
   */
  public RestQuickFilter createQuickFilter(RestQuickFilter restQuickFilter) throws ApiException {
    ApiResponse<RestQuickFilter> localVarResponse = createQuickFilterWithHttpInfo(restQuickFilter);
    return localVarResponse.getData();
  }

  /**
   * 
   * Create a new quick filter with basic configuration, e.g. name or position on list. This method does not allow to configure quick filter&#39;s rules.
   * @param restQuickFilter Quick filter (required)
   * @return ApiResponse&lt;RestQuickFilter&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestQuickFilter> createQuickFilterWithHttpInfo(RestQuickFilter restQuickFilter) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createQuickFilterRequestBuilder(restQuickFilter);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createQuickFilter", localVarResponse);
        }
        return new ApiResponse<RestQuickFilter>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestQuickFilter>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createQuickFilterRequestBuilder(RestQuickFilter restQuickFilter) throws ApiException {
    // verify the required parameter 'restQuickFilter' is set
    if (restQuickFilter == null) {
      throw new ApiException(400, "Missing the required parameter 'restQuickFilter' when calling createQuickFilter");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/quickFilter";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restQuickFilter);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Create ephemeral template configuration.
   * @param restEphemeralAgentTemplate Ephemeral template configuration (required)
   * @return RestEphemeralAgentTemplate
   * @throws ApiException if fails to make API call
   */
  public RestEphemeralAgentTemplate createTemplateConfiguration(RestEphemeralAgentTemplate restEphemeralAgentTemplate) throws ApiException {
    ApiResponse<RestEphemeralAgentTemplate> localVarResponse = createTemplateConfigurationWithHttpInfo(restEphemeralAgentTemplate);
    return localVarResponse.getData();
  }

  /**
   * 
   * Create ephemeral template configuration.
   * @param restEphemeralAgentTemplate Ephemeral template configuration (required)
   * @return ApiResponse&lt;RestEphemeralAgentTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestEphemeralAgentTemplate> createTemplateConfigurationWithHttpInfo(RestEphemeralAgentTemplate restEphemeralAgentTemplate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createTemplateConfigurationRequestBuilder(restEphemeralAgentTemplate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createTemplateConfiguration", localVarResponse);
        }
        return new ApiResponse<RestEphemeralAgentTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestEphemeralAgentTemplate>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createTemplateConfigurationRequestBuilder(RestEphemeralAgentTemplate restEphemeralAgentTemplate) throws ApiException {
    // verify the required parameter 'restEphemeralAgentTemplate' is set
    if (restEphemeralAgentTemplate == null) {
      throw new ApiException(400, "Missing the required parameter 'restEphemeralAgentTemplate' when calling createTemplateConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/ephemeral/templateConfiguration";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restEphemeralAgentTemplate);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Create deployment version for given deployment project.
   * @param deploymentProjectId Deployment project id (required)
   * @param restCreateVersionRequest deployment version to be created (required)
   * @return RestDeploymentVersion
   * @throws ApiException if fails to make API call
   */
  public RestDeploymentVersion createVersion(String deploymentProjectId, RestCreateVersionRequest restCreateVersionRequest) throws ApiException {
    ApiResponse<RestDeploymentVersion> localVarResponse = createVersionWithHttpInfo(deploymentProjectId, restCreateVersionRequest);
    return localVarResponse.getData();
  }

  /**
   * 
   * Create deployment version for given deployment project.
   * @param deploymentProjectId Deployment project id (required)
   * @param restCreateVersionRequest deployment version to be created (required)
   * @return ApiResponse&lt;RestDeploymentVersion&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestDeploymentVersion> createVersionWithHttpInfo(String deploymentProjectId, RestCreateVersionRequest restCreateVersionRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createVersionRequestBuilder(deploymentProjectId, restCreateVersionRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createVersion", localVarResponse);
        }
        return new ApiResponse<RestDeploymentVersion>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestDeploymentVersion>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createVersionRequestBuilder(String deploymentProjectId, RestCreateVersionRequest restCreateVersionRequest) throws ApiException {
    // verify the required parameter 'deploymentProjectId' is set
    if (deploymentProjectId == null) {
      throw new ApiException(400, "Missing the required parameter 'deploymentProjectId' when calling createVersion");
    }
    // verify the required parameter 'restCreateVersionRequest' is set
    if (restCreateVersionRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'restCreateVersionRequest' when calling createVersion");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/project/{deploymentProjectId}/version"
        .replace("{deploymentProjectId}", ApiClient.urlEncode(deploymentProjectId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restCreateVersionRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Deactivates all quick filter for currently logged in user.
   * @throws ApiException if fails to make API call
   */
  public void deactivateAllFilters() throws ApiException {
    deactivateAllFiltersWithHttpInfo();
  }

  /**
   * 
   * Deactivates all quick filter for currently logged in user.
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deactivateAllFiltersWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deactivateAllFiltersRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deactivateAllFilters", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deactivateAllFiltersRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/quickFilter/deactivate";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Deactivates a quick filter for currently logged in user.
   * @param id Quick filter id (required)
   * @throws ApiException if fails to make API call
   */
  public void deactivateFilter(Long id) throws ApiException {
    deactivateFilterWithHttpInfo(id);
  }

  /**
   * 
   * Deactivates a quick filter for currently logged in user.
   * @param id Quick filter id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deactivateFilterWithHttpInfo(Long id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deactivateFilterRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deactivateFilter", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deactivateFilterRequestBuilder(Long id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deactivateFilter");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/quickFilter/{id}/deactivate"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Remove build agent.
   * @param agentId agent id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteAgent(Long agentId) throws ApiException {
    deleteAgentWithHttpInfo(agentId);
  }

  /**
   * 
   * Remove build agent.
   * @param agentId agent id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteAgentWithHttpInfo(Long agentId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteAgentRequestBuilder(agentId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteAgent", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteAgentRequestBuilder(Long agentId) throws ApiException {
    // verify the required parameter 'agentId' is set
    if (agentId == null) {
      throw new ApiException(400, "Missing the required parameter 'agentId' when calling deleteAgent");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/agent/{agentId}"
        .replace("{agentId}", ApiClient.urlEncode(agentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Remove build agent capability.
   * @param agentId agent id (required)
   * @param capabilityKey Capability key (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteAgentCapability(Long agentId, String capabilityKey) throws ApiException {
    deleteAgentCapabilityWithHttpInfo(agentId, capabilityKey);
  }

  /**
   * 
   * Remove build agent capability.
   * @param agentId agent id (required)
   * @param capabilityKey Capability key (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteAgentCapabilityWithHttpInfo(Long agentId, String capabilityKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteAgentCapabilityRequestBuilder(agentId, capabilityKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteAgentCapability", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteAgentCapabilityRequestBuilder(Long agentId, String capabilityKey) throws ApiException {
    // verify the required parameter 'agentId' is set
    if (agentId == null) {
      throw new ApiException(400, "Missing the required parameter 'agentId' when calling deleteAgentCapability");
    }
    // verify the required parameter 'capabilityKey' is set
    if (capabilityKey == null) {
      throw new ApiException(400, "Missing the required parameter 'capabilityKey' when calling deleteAgentCapability");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/agent/{agentId}/capability/{capabilityKey}"
        .replace("{agentId}", ApiClient.urlEncode(agentId.toString()))
        .replace("{capabilityKey}", ApiClient.urlEncode(capabilityKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Remove all capabilities of build agent.
   * @param agentId agent id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteAllAgentCapabilities(Long agentId) throws ApiException {
    deleteAllAgentCapabilitiesWithHttpInfo(agentId);
  }

  /**
   * 
   * Remove all capabilities of build agent.
   * @param agentId agent id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteAllAgentCapabilitiesWithHttpInfo(Long agentId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteAllAgentCapabilitiesRequestBuilder(agentId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteAllAgentCapabilities", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteAllAgentCapabilitiesRequestBuilder(Long agentId) throws ApiException {
    // verify the required parameter 'agentId' is set
    if (agentId == null) {
      throw new ApiException(400, "Missing the required parameter 'agentId' when calling deleteAllAgentCapabilities");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/agent/{agentId}/capability"
        .replace("{agentId}", ApiClient.urlEncode(agentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Remove ephemeral agent template capability.
   * @param name Capability key (required)
   * @param configurationId Configuration ID (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteCapability(String name, Long configurationId) throws ApiException {
    deleteCapabilityWithHttpInfo(name, configurationId);
  }

  /**
   * 
   * Remove ephemeral agent template capability.
   * @param name Capability key (required)
   * @param configurationId Configuration ID (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteCapabilityWithHttpInfo(String name, Long configurationId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteCapabilityRequestBuilder(name, configurationId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteCapability", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteCapabilityRequestBuilder(String name, Long configurationId) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling deleteCapability");
    }
    // verify the required parameter 'configurationId' is set
    if (configurationId == null) {
      throw new ApiException(400, "Missing the required parameter 'configurationId' when calling deleteCapability");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/ephemeral/templateConfiguration/{configurationId}/capability/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{configurationId}", ApiClient.urlEncode(configurationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Delete elastic image configuration.
   * @param configurationId Image configuration id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteConfiguration(Long configurationId) throws ApiException {
    deleteConfigurationWithHttpInfo(configurationId);
  }

  /**
   * 
   * Delete elastic image configuration.
   * @param configurationId Image configuration id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteConfigurationWithHttpInfo(Long configurationId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteConfigurationRequestBuilder(configurationId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteConfiguration", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteConfigurationRequestBuilder(Long configurationId) throws ApiException {
    // verify the required parameter 'configurationId' is set
    if (configurationId == null) {
      throw new ApiException(400, "Missing the required parameter 'configurationId' when calling deleteConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/elasticConfiguration/{configurationId}"
        .replace("{configurationId}", ApiClient.urlEncode(configurationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Delete deployment project.
   * @param deploymentProjectId Deployment project id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteDeploymentProject(String deploymentProjectId) throws ApiException {
    deleteDeploymentProjectWithHttpInfo(deploymentProjectId);
  }

  /**
   * 
   * Delete deployment project.
   * @param deploymentProjectId Deployment project id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteDeploymentProjectWithHttpInfo(String deploymentProjectId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDeploymentProjectRequestBuilder(deploymentProjectId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDeploymentProject", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDeploymentProjectRequestBuilder(String deploymentProjectId) throws ApiException {
    // verify the required parameter 'deploymentProjectId' is set
    if (deploymentProjectId == null) {
      throw new ApiException(400, "Missing the required parameter 'deploymentProjectId' when calling deleteDeploymentProject");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/project/{deploymentProjectId}"
        .replace("{deploymentProjectId}", ApiClient.urlEncode(deploymentProjectId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Delete a global variable.
   * @param variableId Id of the variable to be deleted (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteGlobalVariable(String variableId) throws ApiException {
    deleteGlobalVariableWithHttpInfo(variableId);
  }

  /**
   * 
   * Delete a global variable.
   * @param variableId Id of the variable to be deleted (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteGlobalVariableWithHttpInfo(String variableId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteGlobalVariableRequestBuilder(variableId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteGlobalVariable", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteGlobalVariableRequestBuilder(String variableId) throws ApiException {
    // verify the required parameter 'variableId' is set
    if (variableId == null) {
      throw new ApiException(400, "Missing the required parameter 'variableId' when calling deleteGlobalVariable");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/globalVariables/{variableId}"
        .replace("{variableId}", ApiClient.urlEncode(variableId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Delete current IM Server configuration.
   * @throws ApiException if fails to make API call
   */
  public void deleteIMServerConfiguration() throws ApiException {
    deleteIMServerConfigurationWithHttpInfo();
  }

  /**
   * 
   * Delete current IM Server configuration.
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteIMServerConfigurationWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteIMServerConfigurationRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteIMServerConfiguration", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteIMServerConfigurationRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/config/imServer";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Delete current mail configuration.
   * @throws ApiException if fails to make API call
   */
  public void deleteMailConfiguration() throws ApiException {
    deleteMailConfigurationWithHttpInfo();
  }

  /**
   * 
   * Delete current mail configuration.
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteMailConfigurationWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteMailConfigurationRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteMailConfiguration", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteMailConfigurationRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/config/mailServer";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Marks project for deletion. Project will be deleted by a batch job.
   * @param projectKey project key (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteProject(String projectKey) throws ApiException {
    deleteProjectWithHttpInfo(projectKey);
  }

  /**
   * 
   * Marks project for deletion. Project will be deleted by a batch job.
   * @param projectKey project key (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteProjectWithHttpInfo(String projectKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteProjectRequestBuilder(projectKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteProject", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteProjectRequestBuilder(String projectKey) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling deleteProject");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/project/{projectKey}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Deletes shared project credentials specified by id.
   * @param projectKey project key (required)
   * @param sharedCredentialId project shared credentials id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteProjectSharedCredentials(String projectKey, String sharedCredentialId) throws ApiException {
    deleteProjectSharedCredentialsWithHttpInfo(projectKey, sharedCredentialId);
  }

  /**
   * 
   * Deletes shared project credentials specified by id.
   * @param projectKey project key (required)
   * @param sharedCredentialId project shared credentials id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteProjectSharedCredentialsWithHttpInfo(String projectKey, String sharedCredentialId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteProjectSharedCredentialsRequestBuilder(projectKey, sharedCredentialId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteProjectSharedCredentials", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteProjectSharedCredentialsRequestBuilder(String projectKey, String sharedCredentialId) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling deleteProjectSharedCredentials");
    }
    // verify the required parameter 'sharedCredentialId' is set
    if (sharedCredentialId == null) {
      throw new ApiException(400, "Missing the required parameter 'sharedCredentialId' when calling deleteProjectSharedCredentials");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/project/{projectKey}/sharedCredentials/{sharedCredentialId}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{sharedCredentialId}", ApiClient.urlEncode(sharedCredentialId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Delete the project variable.
   * @param projectKey project key (required)
   * @param variableName name of the variable to be deleted (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteProjectVariable(String projectKey, String variableName) throws ApiException {
    deleteProjectVariableWithHttpInfo(projectKey, variableName);
  }

  /**
   * 
   * Delete the project variable.
   * @param projectKey project key (required)
   * @param variableName name of the variable to be deleted (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteProjectVariableWithHttpInfo(String projectKey, String variableName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteProjectVariableRequestBuilder(projectKey, variableName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteProjectVariable", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteProjectVariableRequestBuilder(String projectKey, String variableName) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling deleteProjectVariable");
    }
    // verify the required parameter 'variableName' is set
    if (variableName == null) {
      throw new ApiException(400, "Missing the required parameter 'variableName' when calling deleteProjectVariable");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/project/{projectKey}/variable/{variableName}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{variableName}", ApiClient.urlEncode(variableName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Delete a quick filter.
   * @param id Quick filter id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteQuickFilter(Long id) throws ApiException {
    deleteQuickFilterWithHttpInfo(id);
  }

  /**
   * 
   * Delete a quick filter.
   * @param id Quick filter id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteQuickFilterWithHttpInfo(Long id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteQuickFilterRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteQuickFilter", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteQuickFilterRequestBuilder(Long id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteQuickFilter");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/quickFilter/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Remove approval to create plans in given deployment project by given repository.
   * @param repositoryId Linked repository root id (required)
   * @param deploymentProjectId Deployment project id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteRepositoryMapping(String repositoryId, String deploymentProjectId) throws ApiException {
    deleteRepositoryMappingWithHttpInfo(repositoryId, deploymentProjectId);
  }

  /**
   * 
   * Remove approval to create plans in given deployment project by given repository.
   * @param repositoryId Linked repository root id (required)
   * @param deploymentProjectId Deployment project id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteRepositoryMappingWithHttpInfo(String repositoryId, String deploymentProjectId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteRepositoryMappingRequestBuilder(repositoryId, deploymentProjectId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteRepositoryMapping", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteRepositoryMappingRequestBuilder(String repositoryId, String deploymentProjectId) throws ApiException {
    // verify the required parameter 'repositoryId' is set
    if (repositoryId == null) {
      throw new ApiException(400, "Missing the required parameter 'repositoryId' when calling deleteRepositoryMapping");
    }
    // verify the required parameter 'deploymentProjectId' is set
    if (deploymentProjectId == null) {
      throw new ApiException(400, "Missing the required parameter 'deploymentProjectId' when calling deleteRepositoryMapping");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/project/{deploymentProjectId}/repository/{repositoryId}"
        .replace("{repositoryId}", ApiClient.urlEncode(repositoryId.toString()))
        .replace("{deploymentProjectId}", ApiClient.urlEncode(deploymentProjectId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Remove approval to create plans in given project by given repository.
   * @param projectKey project key (required)
   * @param repositoryId linked repository root id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteRepositoryMapping1(String projectKey, String repositoryId) throws ApiException {
    deleteRepositoryMapping1WithHttpInfo(projectKey, repositoryId);
  }

  /**
   * 
   * Remove approval to create plans in given project by given repository.
   * @param projectKey project key (required)
   * @param repositoryId linked repository root id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteRepositoryMapping1WithHttpInfo(String projectKey, String repositoryId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteRepositoryMapping1RequestBuilder(projectKey, repositoryId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteRepositoryMapping1", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteRepositoryMapping1RequestBuilder(String projectKey, String repositoryId) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling deleteRepositoryMapping1");
    }
    // verify the required parameter 'repositoryId' is set
    if (repositoryId == null) {
      throw new ApiException(400, "Missing the required parameter 'repositoryId' when calling deleteRepositoryMapping1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/project/{projectKey}/repository/{repositoryId}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{repositoryId}", ApiClient.urlEncode(repositoryId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Delete ephemeral template configuration.
   * @param configurationId Configuration ID (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteTemplateConfiguration(Long configurationId) throws ApiException {
    deleteTemplateConfigurationWithHttpInfo(configurationId);
  }

  /**
   * 
   * Delete ephemeral template configuration.
   * @param configurationId Configuration ID (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteTemplateConfigurationWithHttpInfo(Long configurationId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteTemplateConfigurationRequestBuilder(configurationId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteTemplateConfiguration", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteTemplateConfigurationRequestBuilder(Long configurationId) throws ApiException {
    // verify the required parameter 'configurationId' is set
    if (configurationId == null) {
      throw new ApiException(400, "Missing the required parameter 'configurationId' when calling deleteTemplateConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/ephemeral/templateConfiguration/{configurationId}"
        .replace("{configurationId}", ApiClient.urlEncode(configurationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Disable an agent.
   * @param agentId agent id (required)
   * @return RestAgent
   * @throws ApiException if fails to make API call
   */
  public RestAgent disableAgent(Long agentId) throws ApiException {
    ApiResponse<RestAgent> localVarResponse = disableAgentWithHttpInfo(agentId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Disable an agent.
   * @param agentId agent id (required)
   * @return ApiResponse&lt;RestAgent&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestAgent> disableAgentWithHttpInfo(Long agentId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = disableAgentRequestBuilder(agentId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("disableAgent", localVarResponse);
        }
        return new ApiResponse<RestAgent>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestAgent>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder disableAgentRequestBuilder(Long agentId) throws ApiException {
    // verify the required parameter 'agentId' is set
    if (agentId == null) {
      throw new ApiException(400, "Missing the required parameter 'agentId' when calling disableAgent");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/agent/{agentId}/disable"
        .replace("{agentId}", ApiClient.urlEncode(agentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update deployment project.
   * @param deploymentProjectId Deployment project id (required)
   * @param restUpdateDeploymentProjectRequest deployment project to be updated (required)
   * @return RestDeploymentProject
   * @throws ApiException if fails to make API call
   */
  public RestDeploymentProject editDeploymentProject(String deploymentProjectId, RestUpdateDeploymentProjectRequest restUpdateDeploymentProjectRequest) throws ApiException {
    ApiResponse<RestDeploymentProject> localVarResponse = editDeploymentProjectWithHttpInfo(deploymentProjectId, restUpdateDeploymentProjectRequest);
    return localVarResponse.getData();
  }

  /**
   * 
   * Update deployment project.
   * @param deploymentProjectId Deployment project id (required)
   * @param restUpdateDeploymentProjectRequest deployment project to be updated (required)
   * @return ApiResponse&lt;RestDeploymentProject&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestDeploymentProject> editDeploymentProjectWithHttpInfo(String deploymentProjectId, RestUpdateDeploymentProjectRequest restUpdateDeploymentProjectRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editDeploymentProjectRequestBuilder(deploymentProjectId, restUpdateDeploymentProjectRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editDeploymentProject", localVarResponse);
        }
        return new ApiResponse<RestDeploymentProject>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestDeploymentProject>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editDeploymentProjectRequestBuilder(String deploymentProjectId, RestUpdateDeploymentProjectRequest restUpdateDeploymentProjectRequest) throws ApiException {
    // verify the required parameter 'deploymentProjectId' is set
    if (deploymentProjectId == null) {
      throw new ApiException(400, "Missing the required parameter 'deploymentProjectId' when calling editDeploymentProject");
    }
    // verify the required parameter 'restUpdateDeploymentProjectRequest' is set
    if (restUpdateDeploymentProjectRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'restUpdateDeploymentProjectRequest' when calling editDeploymentProject");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/project/{deploymentProjectId}"
        .replace("{deploymentProjectId}", ApiClient.urlEncode(deploymentProjectId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restUpdateDeploymentProjectRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Enable an agent.
   * @param agentId agent id (required)
   * @return RestAgent
   * @throws ApiException if fails to make API call
   */
  public RestAgent enableAgent(Long agentId) throws ApiException {
    ApiResponse<RestAgent> localVarResponse = enableAgentWithHttpInfo(agentId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Enable an agent.
   * @param agentId agent id (required)
   * @return ApiResponse&lt;RestAgent&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestAgent> enableAgentWithHttpInfo(Long agentId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = enableAgentRequestBuilder(agentId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("enableAgent", localVarResponse);
        }
        return new ApiResponse<RestAgent>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestAgent>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder enableAgentRequestBuilder(Long agentId) throws ApiException {
    // verify the required parameter 'agentId' is set
    if (agentId == null) {
      throw new ApiException(400, "Missing the required parameter 'agentId' when calling enableAgent");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/agent/{agentId}/enable"
        .replace("{agentId}", ApiClient.urlEncode(agentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Enables access (i.e. allowing modifications) for all Bamboo projects by the Bamboo Specs code stored in this repository. Changes in Bamboo Specs detected will trigger execution of Specs and thus an update of corresponding entities (such as build plans or deployments).
   * @param repositoryId Repository id (required)
   * @param restEnableContainer Enable request (required)
   * @throws ApiException if fails to make API call
   */
  public void enableAllProjectsAccess(Long repositoryId, RestEnableContainer restEnableContainer) throws ApiException {
    enableAllProjectsAccessWithHttpInfo(repositoryId, restEnableContainer);
  }

  /**
   * 
   * Enables access (i.e. allowing modifications) for all Bamboo projects by the Bamboo Specs code stored in this repository. Changes in Bamboo Specs detected will trigger execution of Specs and thus an update of corresponding entities (such as build plans or deployments).
   * @param repositoryId Repository id (required)
   * @param restEnableContainer Enable request (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> enableAllProjectsAccessWithHttpInfo(Long repositoryId, RestEnableContainer restEnableContainer) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = enableAllProjectsAccessRequestBuilder(repositoryId, restEnableContainer);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("enableAllProjectsAccess", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder enableAllProjectsAccessRequestBuilder(Long repositoryId, RestEnableContainer restEnableContainer) throws ApiException {
    // verify the required parameter 'repositoryId' is set
    if (repositoryId == null) {
      throw new ApiException(400, "Missing the required parameter 'repositoryId' when calling enableAllProjectsAccess");
    }
    // verify the required parameter 'restEnableContainer' is set
    if (restEnableContainer == null) {
      throw new ApiException(400, "Missing the required parameter 'restEnableContainer' when calling enableAllProjectsAccess");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/repository/{repositoryId}/enableAllProjectsAccess"
        .replace("{repositoryId}", ApiClient.urlEncode(repositoryId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restEnableContainer);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Enables access (i.e. allowing usage) to all project&#39;s repositories by the Bamboo Specs code stored in this repository.
   * @param projectKey Project key (required)
   * @param repositoryId Repository id (required)
   * @param restEnableContainer Enable request (required)
   * @throws ApiException if fails to make API call
   */
  public void enableAllRepositoriesAccess(String projectKey, Long repositoryId, RestEnableContainer restEnableContainer) throws ApiException {
    enableAllRepositoriesAccessWithHttpInfo(projectKey, repositoryId, restEnableContainer);
  }

  /**
   * 
   * Enables access (i.e. allowing usage) to all project&#39;s repositories by the Bamboo Specs code stored in this repository.
   * @param projectKey Project key (required)
   * @param repositoryId Repository id (required)
   * @param restEnableContainer Enable request (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> enableAllRepositoriesAccessWithHttpInfo(String projectKey, Long repositoryId, RestEnableContainer restEnableContainer) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = enableAllRepositoriesAccessRequestBuilder(projectKey, repositoryId, restEnableContainer);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("enableAllRepositoriesAccess", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder enableAllRepositoriesAccessRequestBuilder(String projectKey, Long repositoryId, RestEnableContainer restEnableContainer) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling enableAllRepositoriesAccess");
    }
    // verify the required parameter 'repositoryId' is set
    if (repositoryId == null) {
      throw new ApiException(400, "Missing the required parameter 'repositoryId' when calling enableAllRepositoriesAccess");
    }
    // verify the required parameter 'restEnableContainer' is set
    if (restEnableContainer == null) {
      throw new ApiException(400, "Missing the required parameter 'restEnableContainer' when calling enableAllRepositoriesAccess");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/project/{projectKey}/repository/{repositoryId}/enableAllRepositoriesAccess"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{repositoryId}", ApiClient.urlEncode(repositoryId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restEnableContainer);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Enables access (i.e. allowing usage in plans or deployment projects) for all Bamboo linked repositories by the Bamboo Specs code stored in this repository.
   * @param repositoryId Repository id (required)
   * @param restEnableContainer Enable request (required)
   * @throws ApiException if fails to make API call
   */
  public void enableAllRepositoriesAccess1(Long repositoryId, RestEnableContainer restEnableContainer) throws ApiException {
    enableAllRepositoriesAccess1WithHttpInfo(repositoryId, restEnableContainer);
  }

  /**
   * 
   * Enables access (i.e. allowing usage in plans or deployment projects) for all Bamboo linked repositories by the Bamboo Specs code stored in this repository.
   * @param repositoryId Repository id (required)
   * @param restEnableContainer Enable request (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> enableAllRepositoriesAccess1WithHttpInfo(Long repositoryId, RestEnableContainer restEnableContainer) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = enableAllRepositoriesAccess1RequestBuilder(repositoryId, restEnableContainer);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("enableAllRepositoriesAccess1", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder enableAllRepositoriesAccess1RequestBuilder(Long repositoryId, RestEnableContainer restEnableContainer) throws ApiException {
    // verify the required parameter 'repositoryId' is set
    if (repositoryId == null) {
      throw new ApiException(400, "Missing the required parameter 'repositoryId' when calling enableAllRepositoriesAccess1");
    }
    // verify the required parameter 'restEnableContainer' is set
    if (restEnableContainer == null) {
      throw new ApiException(400, "Missing the required parameter 'restEnableContainer' when calling enableAllRepositoriesAccess1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/repository/{repositoryId}/enableAllRepositoriesAccess"
        .replace("{repositoryId}", ApiClient.urlEncode(repositoryId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restEnableContainer);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Enables or disables detection of Bamboo Specs stored in the repository. If enabled, code changes detected in Bamboo Specs in new commits will trigger execution of Bamboo Specs and thus an update of corresponding entities (such as build plans, deployments or permissions).
   * @param repositoryId Repository id (required)
   * @param restEnableContainer Enable request (required)
   * @throws ApiException if fails to make API call
   */
  public void enableCi(Long repositoryId, RestEnableContainer restEnableContainer) throws ApiException {
    enableCiWithHttpInfo(repositoryId, restEnableContainer);
  }

  /**
   * 
   * Enables or disables detection of Bamboo Specs stored in the repository. If enabled, code changes detected in Bamboo Specs in new commits will trigger execution of Bamboo Specs and thus an update of corresponding entities (such as build plans, deployments or permissions).
   * @param repositoryId Repository id (required)
   * @param restEnableContainer Enable request (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> enableCiWithHttpInfo(Long repositoryId, RestEnableContainer restEnableContainer) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = enableCiRequestBuilder(repositoryId, restEnableContainer);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("enableCi", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder enableCiRequestBuilder(Long repositoryId, RestEnableContainer restEnableContainer) throws ApiException {
    // verify the required parameter 'repositoryId' is set
    if (repositoryId == null) {
      throw new ApiException(400, "Missing the required parameter 'repositoryId' when calling enableCi");
    }
    // verify the required parameter 'restEnableContainer' is set
    if (restEnableContainer == null) {
      throw new ApiException(400, "Missing the required parameter 'restEnableContainer' when calling enableCi");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/repository/{repositoryId}/enableCi"
        .replace("{repositoryId}", ApiClient.urlEncode(repositoryId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restEnableContainer);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Enables build and deployment project creation by the Bamboo Specs code stored in this repository.
   * @param repositoryId Repository id (required)
   * @param restEnableContainer Enable request (required)
   * @throws ApiException if fails to make API call
   */
  public void enableProjectCreation(Long repositoryId, RestEnableContainer restEnableContainer) throws ApiException {
    enableProjectCreationWithHttpInfo(repositoryId, restEnableContainer);
  }

  /**
   * 
   * Enables build and deployment project creation by the Bamboo Specs code stored in this repository.
   * @param repositoryId Repository id (required)
   * @param restEnableContainer Enable request (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> enableProjectCreationWithHttpInfo(Long repositoryId, RestEnableContainer restEnableContainer) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = enableProjectCreationRequestBuilder(repositoryId, restEnableContainer);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("enableProjectCreation", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder enableProjectCreationRequestBuilder(Long repositoryId, RestEnableContainer restEnableContainer) throws ApiException {
    // verify the required parameter 'repositoryId' is set
    if (repositoryId == null) {
      throw new ApiException(400, "Missing the required parameter 'repositoryId' when calling enableProjectCreation");
    }
    // verify the required parameter 'restEnableContainer' is set
    if (restEnableContainer == null) {
      throw new ApiException(400, "Missing the required parameter 'restEnableContainer' when calling enableProjectCreation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/repository/{repositoryId}/enableProjectCreation"
        .replace("{repositoryId}", ApiClient.urlEncode(repositoryId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restEnableContainer);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Encrypts a given text based on the instance specific cipher. Encrypted data can be used i.a. in Repository-stored Specs. Feature can be enabled or disabled in Bamboo security configuration. Number of allowed requests per user is limited and can be modified in Bamboo security configuration.
   * @param manualEncryptionRequest The request containing the details of manual encryption (required)
   * @return ManualEncryptionResponse
   * @throws ApiException if fails to make API call
   */
  public ManualEncryptionResponse encrypt(ManualEncryptionRequest manualEncryptionRequest) throws ApiException {
    ApiResponse<ManualEncryptionResponse> localVarResponse = encryptWithHttpInfo(manualEncryptionRequest);
    return localVarResponse.getData();
  }

  /**
   * 
   * Encrypts a given text based on the instance specific cipher. Encrypted data can be used i.a. in Repository-stored Specs. Feature can be enabled or disabled in Bamboo security configuration. Number of allowed requests per user is limited and can be modified in Bamboo security configuration.
   * @param manualEncryptionRequest The request containing the details of manual encryption (required)
   * @return ApiResponse&lt;ManualEncryptionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ManualEncryptionResponse> encryptWithHttpInfo(ManualEncryptionRequest manualEncryptionRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = encryptRequestBuilder(manualEncryptionRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("encrypt", localVarResponse);
        }
        return new ApiResponse<ManualEncryptionResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ManualEncryptionResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder encryptRequestBuilder(ManualEncryptionRequest manualEncryptionRequest) throws ApiException {
    // verify the required parameter 'manualEncryptionRequest' is set
    if (manualEncryptionRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'manualEncryptionRequest' when calling encrypt");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/encrypt";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(manualEncryptionRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Export a deployment project to Bamboo Specs.
   * @param deploymentProjectId Deployment project id (required)
   * @param _package The package to use as the namespace of the exported Spec (optional)
   * @param format Optionally, a format of code. It&#39;s &#39;java&#39; by default. Other option is &#39;yaml. (optional)
   * @return RestDeploymentSpec
   * @throws ApiException if fails to make API call
   */
  public RestDeploymentSpec exportDeploymentSpec(String deploymentProjectId, String _package, String format) throws ApiException {
    ApiResponse<RestDeploymentSpec> localVarResponse = exportDeploymentSpecWithHttpInfo(deploymentProjectId, _package, format);
    return localVarResponse.getData();
  }

  /**
   * 
   * Export a deployment project to Bamboo Specs.
   * @param deploymentProjectId Deployment project id (required)
   * @param _package The package to use as the namespace of the exported Spec (optional)
   * @param format Optionally, a format of code. It&#39;s &#39;java&#39; by default. Other option is &#39;yaml. (optional)
   * @return ApiResponse&lt;RestDeploymentSpec&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestDeploymentSpec> exportDeploymentSpecWithHttpInfo(String deploymentProjectId, String _package, String format) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportDeploymentSpecRequestBuilder(deploymentProjectId, _package, format);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportDeploymentSpec", localVarResponse);
        }
        return new ApiResponse<RestDeploymentSpec>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestDeploymentSpec>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportDeploymentSpecRequestBuilder(String deploymentProjectId, String _package, String format) throws ApiException {
    // verify the required parameter 'deploymentProjectId' is set
    if (deploymentProjectId == null) {
      throw new ApiException(400, "Missing the required parameter 'deploymentProjectId' when calling exportDeploymentSpec");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/project/{deploymentProjectId}/specs"
        .replace("{deploymentProjectId}", ApiClient.urlEncode(deploymentProjectId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "package";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("package", _package));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Export all of the plans for a project to Bamboo specs.
   * @param projectKey The project to export for (required)
   * @param _package A package name for the exported spec (optional)
   * @param format a format of code. It&#39;s &#39;java&#39; by default. (optional)
   * @return RestProjectSpec
   * @throws ApiException if fails to make API call
   */
  public RestProjectSpec exportProjectSpecs(String projectKey, String _package, String format) throws ApiException {
    ApiResponse<RestProjectSpec> localVarResponse = exportProjectSpecsWithHttpInfo(projectKey, _package, format);
    return localVarResponse.getData();
  }

  /**
   * 
   * Export all of the plans for a project to Bamboo specs.
   * @param projectKey The project to export for (required)
   * @param _package A package name for the exported spec (optional)
   * @param format a format of code. It&#39;s &#39;java&#39; by default. (optional)
   * @return ApiResponse&lt;RestProjectSpec&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestProjectSpec> exportProjectSpecsWithHttpInfo(String projectKey, String _package, String format) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportProjectSpecsRequestBuilder(projectKey, _package, format);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportProjectSpecs", localVarResponse);
        }
        return new ApiResponse<RestProjectSpec>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestProjectSpec>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportProjectSpecsRequestBuilder(String projectKey, String _package, String format) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling exportProjectSpecs");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/project/{projectKey}/specs"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "package";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("package", _package));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get list of all plans where user has admin permission and which override global expiry settings. If global expiry is not enabled it returns empty response.
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return FindPlansWithCustomExpirySettings200Response
   * @throws ApiException if fails to make API call
   */
  public FindPlansWithCustomExpirySettings200Response findPlansWithCustomExpirySettings(Integer limit, Integer start) throws ApiException {
    ApiResponse<FindPlansWithCustomExpirySettings200Response> localVarResponse = findPlansWithCustomExpirySettingsWithHttpInfo(limit, start);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get list of all plans where user has admin permission and which override global expiry settings. If global expiry is not enabled it returns empty response.
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return ApiResponse&lt;FindPlansWithCustomExpirySettings200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FindPlansWithCustomExpirySettings200Response> findPlansWithCustomExpirySettingsWithHttpInfo(Integer limit, Integer start) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = findPlansWithCustomExpirySettingsRequestBuilder(limit, start);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("findPlansWithCustomExpirySettings", localVarResponse);
        }
        return new ApiResponse<FindPlansWithCustomExpirySettings200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FindPlansWithCustomExpirySettings200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder findPlansWithCustomExpirySettingsRequestBuilder(Integer limit, Integer start) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/admin/expiry/custom/plan";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Search for existing linked repositories by name.
   * @param searchTerm Target repository id (optional)
   * @return RestRepositoryList
   * @throws ApiException if fails to make API call
   */
  public RestRepositoryList findRepository(String searchTerm) throws ApiException {
    ApiResponse<RestRepositoryList> localVarResponse = findRepositoryWithHttpInfo(searchTerm);
    return localVarResponse.getData();
  }

  /**
   * 
   * Search for existing linked repositories by name.
   * @param searchTerm Target repository id (optional)
   * @return ApiResponse&lt;RestRepositoryList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestRepositoryList> findRepositoryWithHttpInfo(String searchTerm) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = findRepositoryRequestBuilder(searchTerm);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("findRepository", localVarResponse);
        }
        return new ApiResponse<RestRepositoryList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestRepositoryList>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder findRepositoryRequestBuilder(String searchTerm) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/repository";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "searchTerm";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchTerm", searchTerm));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Search for usages of given repository.
   * @param repositoryId Repository id (required)
   * @param maxPlans Maximum count of detailed plans at response (optional, default to 20)
   * @param maxEnvironments Maximum count of detailed environments at response (optional, default to 20)
   * @return RestRepositoryUsageModel
   * @throws ApiException if fails to make API call
   */
  public RestRepositoryUsageModel findUsage(Long repositoryId, Integer maxPlans, Integer maxEnvironments) throws ApiException {
    ApiResponse<RestRepositoryUsageModel> localVarResponse = findUsageWithHttpInfo(repositoryId, maxPlans, maxEnvironments);
    return localVarResponse.getData();
  }

  /**
   * 
   * Search for usages of given repository.
   * @param repositoryId Repository id (required)
   * @param maxPlans Maximum count of detailed plans at response (optional, default to 20)
   * @param maxEnvironments Maximum count of detailed environments at response (optional, default to 20)
   * @return ApiResponse&lt;RestRepositoryUsageModel&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestRepositoryUsageModel> findUsageWithHttpInfo(Long repositoryId, Integer maxPlans, Integer maxEnvironments) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = findUsageRequestBuilder(repositoryId, maxPlans, maxEnvironments);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("findUsage", localVarResponse);
        }
        return new ApiResponse<RestRepositoryUsageModel>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestRepositoryUsageModel>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder findUsageRequestBuilder(Long repositoryId, Integer maxPlans, Integer maxEnvironments) throws ApiException {
    // verify the required parameter 'repositoryId' is set
    if (repositoryId == null) {
      throw new ApiException(400, "Missing the required parameter 'repositoryId' when calling findUsage");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/repository/{repositoryId}/usage"
        .replace("{repositoryId}", ApiClient.urlEncode(repositoryId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "max-plans";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-plans", maxPlans));
    localVarQueryParameterBaseName = "max-environments";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-environments", maxEnvironments));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieves whether a given dark feature key is enabled for this instance.
   * @param key key of the dark feature (required)
   * @return RestDarkFeature
   * @throws ApiException if fails to make API call
   */
  public RestDarkFeature get(String key) throws ApiException {
    ApiResponse<RestDarkFeature> localVarResponse = getWithHttpInfo(key);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieves whether a given dark feature key is enabled for this instance.
   * @param key key of the dark feature (required)
   * @return ApiResponse&lt;RestDarkFeature&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestDarkFeature> getWithHttpInfo(String key) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getRequestBuilder(key);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("get", localVarResponse);
        }
        return new ApiResponse<RestDarkFeature>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestDarkFeature>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getRequestBuilder(String key) throws ApiException {
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling get");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/darkFeatures/{key}"
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Return active quick filters for currently logged in user.
   * @return List&lt;RestQuickFilter&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RestQuickFilter> getActiveFilters() throws ApiException {
    ApiResponse<List<RestQuickFilter>> localVarResponse = getActiveFiltersWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Return active quick filters for currently logged in user.
   * @return ApiResponse&lt;List&lt;RestQuickFilter&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RestQuickFilter>> getActiveFiltersWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getActiveFiltersRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getActiveFilters", localVarResponse);
        }
        return new ApiResponse<List<RestQuickFilter>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RestQuickFilter>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getActiveFiltersRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/quickFilter/active";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Provides a list of all agent authentication statuses.
   * @param pending Filter only pending or only approved agents (optional)
   * @return List&lt;RestRemoteAgentAuthentication&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RestRemoteAgentAuthentication> getAgentAuthentications(Boolean pending) throws ApiException {
    ApiResponse<List<RestRemoteAgentAuthentication>> localVarResponse = getAgentAuthenticationsWithHttpInfo(pending);
    return localVarResponse.getData();
  }

  /**
   * 
   * Provides a list of all agent authentication statuses.
   * @param pending Filter only pending or only approved agents (optional)
   * @return ApiResponse&lt;List&lt;RestRemoteAgentAuthentication&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RestRemoteAgentAuthentication>> getAgentAuthenticationsWithHttpInfo(Boolean pending) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAgentAuthenticationsRequestBuilder(pending);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAgentAuthentications", localVarResponse);
        }
        return new ApiResponse<List<RestRemoteAgentAuthentication>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RestRemoteAgentAuthentication>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAgentAuthenticationsRequestBuilder(Boolean pending) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/agent/authentication";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "pending";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pending", pending));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a build agent definition by id.
   * @param agentId Id of the agent (required)
   * @return RestAgent
   * @throws ApiException if fails to make API call
   */
  public RestAgent getAgentById(String agentId) throws ApiException {
    ApiResponse<RestAgent> localVarResponse = getAgentByIdWithHttpInfo(agentId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a build agent definition by id.
   * @param agentId Id of the agent (required)
   * @return ApiResponse&lt;RestAgent&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestAgent> getAgentByIdWithHttpInfo(String agentId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAgentByIdRequestBuilder(agentId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAgentById", localVarResponse);
        }
        return new ApiResponse<RestAgent>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestAgent>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAgentByIdRequestBuilder(String agentId) throws ApiException {
    // verify the required parameter 'agentId' is set
    if (agentId == null) {
      throw new ApiException(400, "Missing the required parameter 'agentId' when calling getAgentById");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/config/agents/{agentId}"
        .replace("{agentId}", ApiClient.urlEncode(agentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * List agent&#39;s capabilities.
   * @param agentId agent id (required)
   * @param includeShared if response should include shared agent capabilities (optional)
   * @return List&lt;RestCapability&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RestCapability> getAgentCapabilities(Long agentId, Boolean includeShared) throws ApiException {
    ApiResponse<List<RestCapability>> localVarResponse = getAgentCapabilitiesWithHttpInfo(agentId, includeShared);
    return localVarResponse.getData();
  }

  /**
   * 
   * List agent&#39;s capabilities.
   * @param agentId agent id (required)
   * @param includeShared if response should include shared agent capabilities (optional)
   * @return ApiResponse&lt;List&lt;RestCapability&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RestCapability>> getAgentCapabilitiesWithHttpInfo(Long agentId, Boolean includeShared) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAgentCapabilitiesRequestBuilder(agentId, includeShared);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAgentCapabilities", localVarResponse);
        }
        return new ApiResponse<List<RestCapability>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RestCapability>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAgentCapabilitiesRequestBuilder(Long agentId, Boolean includeShared) throws ApiException {
    // verify the required parameter 'agentId' is set
    if (agentId == null) {
      throw new ApiException(400, "Missing the required parameter 'agentId' when calling getAgentCapabilities");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/agent/{agentId}/capability"
        .replace("{agentId}", ApiClient.urlEncode(agentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "includeShared";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("includeShared", includeShared));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Provides details of an agent.
   * @param agentId agent id (required)
   * @param maxResult Maximum count of capabilities/jobs/environments (optional)
   * @param expand Expand parameter (optional)
   * @param includeShared if response should include shared agent capabilities (optional)
   * @param startIndex Start index of capabilities/jobs/environments (optional)
   * @return RestAgentInformation
   * @throws ApiException if fails to make API call
   */
  public RestAgentInformation getAgentInformation(Long agentId, Integer maxResult, String expand, Boolean includeShared, Integer startIndex) throws ApiException {
    ApiResponse<RestAgentInformation> localVarResponse = getAgentInformationWithHttpInfo(agentId, maxResult, expand, includeShared, startIndex);
    return localVarResponse.getData();
  }

  /**
   * 
   * Provides details of an agent.
   * @param agentId agent id (required)
   * @param maxResult Maximum count of capabilities/jobs/environments (optional)
   * @param expand Expand parameter (optional)
   * @param includeShared if response should include shared agent capabilities (optional)
   * @param startIndex Start index of capabilities/jobs/environments (optional)
   * @return ApiResponse&lt;RestAgentInformation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestAgentInformation> getAgentInformationWithHttpInfo(Long agentId, Integer maxResult, String expand, Boolean includeShared, Integer startIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAgentInformationRequestBuilder(agentId, maxResult, expand, includeShared, startIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAgentInformation", localVarResponse);
        }
        return new ApiResponse<RestAgentInformation>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestAgentInformation>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAgentInformationRequestBuilder(Long agentId, Integer maxResult, String expand, Boolean includeShared, Integer startIndex) throws ApiException {
    // verify the required parameter 'agentId' is set
    if (agentId == null) {
      throw new ApiException(400, "Missing the required parameter 'agentId' when calling getAgentInformation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/agent/{agentId}"
        .replace("{agentId}", ApiClient.urlEncode(agentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "max-result";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-result", maxResult));
    localVarQueryParameterBaseName = "expand";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("expand", expand));
    localVarQueryParameterBaseName = "includeShared";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("includeShared", includeShared));
    localVarQueryParameterBaseName = "start-index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start-index", startIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve configuration of Agent-Local Artifact Handler.
   * @return RestArtifactHandler
   * @throws ApiException if fails to make API call
   */
  public RestArtifactHandler getAgentLocalArtifactHandler() throws ApiException {
    ApiResponse<RestArtifactHandler> localVarResponse = getAgentLocalArtifactHandlerWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve configuration of Agent-Local Artifact Handler.
   * @return ApiResponse&lt;RestArtifactHandler&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestArtifactHandler> getAgentLocalArtifactHandlerWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAgentLocalArtifactHandlerRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAgentLocalArtifactHandler", localVarResponse);
        }
        return new ApiResponse<RestArtifactHandler>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestArtifactHandler>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAgentLocalArtifactHandlerRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/artifactHandlers/agentLocal";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Provides information about status of agent, if it&#39;s online or offline.
   * @param agentId filter only remote or only approved agents (required)
   * @return RestAgentStatus
   * @throws ApiException if fails to make API call
   */
  public RestAgentStatus getAgentStatus(Long agentId) throws ApiException {
    ApiResponse<RestAgentStatus> localVarResponse = getAgentStatusWithHttpInfo(agentId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Provides information about status of agent, if it&#39;s online or offline.
   * @param agentId filter only remote or only approved agents (required)
   * @return ApiResponse&lt;RestAgentStatus&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestAgentStatus> getAgentStatusWithHttpInfo(Long agentId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAgentStatusRequestBuilder(agentId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAgentStatus", localVarResponse);
        }
        return new ApiResponse<RestAgentStatus>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestAgentStatus>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAgentStatusRequestBuilder(Long agentId) throws ApiException {
    // verify the required parameter 'agentId' is set
    if (agentId == null) {
      throw new ApiException(400, "Missing the required parameter 'agentId' when calling getAgentStatus");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/agent/{agentId}/status"
        .replace("{agentId}", ApiClient.urlEncode(agentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Return collection of all agents of all types.
   * @return GetAgents200Response
   * @throws ApiException if fails to make API call
   */
  public GetAgents200Response getAgents() throws ApiException {
    ApiResponse<GetAgents200Response> localVarResponse = getAgentsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Return collection of all agents of all types.
   * @return ApiResponse&lt;GetAgents200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetAgents200Response> getAgentsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAgentsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAgents", localVarResponse);
        }
        return new ApiResponse<GetAgents200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetAgents200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAgentsRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/config/agents";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Provides a list of agents.
   * @param online Show only online agents (optional)
   * @return List&lt;RestBuildAgent&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RestBuildAgent> getAgents1(Boolean online) throws ApiException {
    ApiResponse<List<RestBuildAgent>> localVarResponse = getAgents1WithHttpInfo(online);
    return localVarResponse.getData();
  }

  /**
   * 
   * Provides a list of agents.
   * @param online Show only online agents (optional)
   * @return ApiResponse&lt;List&lt;RestBuildAgent&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RestBuildAgent>> getAgents1WithHttpInfo(Boolean online) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAgents1RequestBuilder(online);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAgents1", localVarResponse);
        }
        return new ApiResponse<List<RestBuildAgent>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RestBuildAgent>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAgents1RequestBuilder(Boolean online) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/agent";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "online";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("online", online));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieves a list of dark features that are enabled for all users.
   * @return List&lt;RestDarkFeature&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RestDarkFeature> getAll() throws ApiException {
    ApiResponse<List<RestDarkFeature>> localVarResponse = getAllWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieves a list of dark features that are enabled for all users.
   * @return ApiResponse&lt;List&lt;RestDarkFeature&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RestDarkFeature>> getAllWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAllRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAll", localVarResponse);
        }
        return new ApiResponse<List<RestDarkFeature>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RestDarkFeature>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAllRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/darkFeatures";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Fetch all elastic image configurations.
   * @return List&lt;RestElasticImageConfig&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RestElasticImageConfig> getAll1() throws ApiException {
    ApiResponse<List<RestElasticImageConfig>> localVarResponse = getAll1WithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Fetch all elastic image configurations.
   * @return ApiResponse&lt;List&lt;RestElasticImageConfig&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RestElasticImageConfig>> getAll1WithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAll1RequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAll1", localVarResponse);
        }
        return new ApiResponse<List<RestElasticImageConfig>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RestElasticImageConfig>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAll1RequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/elasticConfiguration";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Provides a list of capabilities for a select list in the UI.  Filterable and paginable.
   * @param maxResult Maximum count of capabilities (optional)
   * @param searchTerm Search term (optional)
   * @param lastGroup Last group (optional)
   * @param startIndex Start index of capabilities (optional)
   * @throws ApiException if fails to make API call
   */
  public void getAllCapabilitiesOnServer(Integer maxResult, String searchTerm, String lastGroup, Integer startIndex) throws ApiException {
    getAllCapabilitiesOnServerWithHttpInfo(maxResult, searchTerm, lastGroup, startIndex);
  }

  /**
   * 
   * Provides a list of capabilities for a select list in the UI.  Filterable and paginable.
   * @param maxResult Maximum count of capabilities (optional)
   * @param searchTerm Search term (optional)
   * @param lastGroup Last group (optional)
   * @param startIndex Start index of capabilities (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> getAllCapabilitiesOnServerWithHttpInfo(Integer maxResult, String searchTerm, String lastGroup, Integer startIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAllCapabilitiesOnServerRequestBuilder(maxResult, searchTerm, lastGroup, startIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAllCapabilitiesOnServer", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAllCapabilitiesOnServerRequestBuilder(Integer maxResult, String searchTerm, String lastGroup, Integer startIndex) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/capability/groupedListing";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "max-result";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-result", maxResult));
    localVarQueryParameterBaseName = "searchTerm";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchTerm", searchTerm));
    localVarQueryParameterBaseName = "lastGroup";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("lastGroup", lastGroup));
    localVarQueryParameterBaseName = "start-index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start-index", startIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get all deployment projects. This method fetch all deployment projects visible to user. It&#39;s not optimized for instances with large count of deployment projects and environments, use paged versions instead.
   * @return List&lt;DashboardProjectWithEnvironmentStatus&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public List<DashboardProjectWithEnvironmentStatus> getAllDeploymentProjects() throws ApiException {
    ApiResponse<List<DashboardProjectWithEnvironmentStatus>> localVarResponse = getAllDeploymentProjectsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Get all deployment projects. This method fetch all deployment projects visible to user. It&#39;s not optimized for instances with large count of deployment projects and environments, use paged versions instead.
   * @return ApiResponse&lt;List&lt;DashboardProjectWithEnvironmentStatus&gt;&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ApiResponse<List<DashboardProjectWithEnvironmentStatus>> getAllDeploymentProjectsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAllDeploymentProjectsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAllDeploymentProjects", localVarResponse);
        }
        return new ApiResponse<List<DashboardProjectWithEnvironmentStatus>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<DashboardProjectWithEnvironmentStatus>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAllDeploymentProjectsRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/dashboard";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Find all deployment projects with environments. Returns only deployment projects and environments visible for user.
   * @return List&lt;RestDeploymentProject&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RestDeploymentProject> getAllDeploymentProjects1() throws ApiException {
    ApiResponse<List<RestDeploymentProject>> localVarResponse = getAllDeploymentProjects1WithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Find all deployment projects with environments. Returns only deployment projects and environments visible for user.
   * @return ApiResponse&lt;List&lt;RestDeploymentProject&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RestDeploymentProject>> getAllDeploymentProjects1WithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAllDeploymentProjects1RequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAllDeploymentProjects1", localVarResponse);
        }
        return new ApiResponse<List<RestDeploymentProject>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RestDeploymentProject>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAllDeploymentProjects1RequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/project/all";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Provides list of available REST resources in Bamboo
   * @return RestResources
   * @throws ApiException if fails to make API call
   */
  public RestResources getAllServices() throws ApiException {
    ApiResponse<RestResources> localVarResponse = getAllServicesWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Provides list of available REST resources in Bamboo
   * @return ApiResponse&lt;RestResources&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestResources> getAllServicesWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAllServicesRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAllServices", localVarResponse);
        }
        return new ApiResponse<RestResources>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestResources>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAllServicesRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve audit log settings.
   * @return RestAuditLogConfiguration
   * @throws ApiException if fails to make API call
   */
  public RestAuditLogConfiguration getAuditLogConfiguration() throws ApiException {
    ApiResponse<RestAuditLogConfiguration> localVarResponse = getAuditLogConfigurationWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve audit log settings.
   * @return ApiResponse&lt;RestAuditLogConfiguration&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestAuditLogConfiguration> getAuditLogConfigurationWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAuditLogConfigurationRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAuditLogConfiguration", localVarResponse);
        }
        return new ApiResponse<RestAuditLogConfiguration>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestAuditLogConfiguration>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAuditLogConfigurationRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/config/auditLog";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Fetch available reports list.
   * @param maxResult Maximum count of reports (optional)
   * @param expand Possible values: reports (optional)
   * @param startIndex Start index of reports (optional)
   * @return RestReports
   * @throws ApiException if fails to make API call
   */
  public RestReports getAvailableReports(Integer maxResult, String expand, Integer startIndex) throws ApiException {
    ApiResponse<RestReports> localVarResponse = getAvailableReportsWithHttpInfo(maxResult, expand, startIndex);
    return localVarResponse.getData();
  }

  /**
   * 
   * Fetch available reports list.
   * @param maxResult Maximum count of reports (optional)
   * @param expand Possible values: reports (optional)
   * @param startIndex Start index of reports (optional)
   * @return ApiResponse&lt;RestReports&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestReports> getAvailableReportsWithHttpInfo(Integer maxResult, String expand, Integer startIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAvailableReportsRequestBuilder(maxResult, expand, startIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAvailableReports", localVarResponse);
        }
        return new ApiResponse<RestReports>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestReports>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAvailableReportsRequestBuilder(Integer maxResult, String expand, Integer startIndex) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/chart/reports";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "max-result";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-result", maxResult));
    localVarQueryParameterBaseName = "expand";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("expand", expand));
    localVarQueryParameterBaseName = "start-index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start-index", startIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve configuration of Bamboo Server Artifact Handler.
   * @return SimpleRestArtifactHandler
   * @throws ApiException if fails to make API call
   */
  public SimpleRestArtifactHandler getBambooRemoteArtifactHandler() throws ApiException {
    ApiResponse<SimpleRestArtifactHandler> localVarResponse = getBambooRemoteArtifactHandlerWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve configuration of Bamboo Server Artifact Handler.
   * @return ApiResponse&lt;SimpleRestArtifactHandler&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SimpleRestArtifactHandler> getBambooRemoteArtifactHandlerWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getBambooRemoteArtifactHandlerRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getBambooRemoteArtifactHandler", localVarResponse);
        }
        return new ApiResponse<SimpleRestArtifactHandler>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SimpleRestArtifactHandler>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getBambooRemoteArtifactHandlerRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/artifactHandlers/bambooRemote";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Provide list of build results for specified plan&#39;s branch. Plan might be top level plan (projectKey-planKey) or job plan (projectKey-planKey-jobKey).
   * @param buildKey plan key (might be simply planKey or composite planKey-jobKey) (required)
   * @param branchName Branch name (required)
   * @param projectKey project key (required)
   * @param includeAllStates return build results in all lifecycle states, including unknown and active states (optional)
   * @param continuable filter only results that may be continued (stopped on Manual Stage) (optional)
   * @param issueKey Filter by comma separated list of Jira issue key related to result (optional)
   * @param maxResult Maximum size for returned list (optional)
   * @param startIndex Start index for results list (zero based) (optional)
   * @param label Filter by comma separated list of labels (optional)
   * @param buildstate filter results by state, valid values are Unknown, Successful, Failed (optional)
   * @param favourite Filters build results list to show only results for favourite plans. Works only for authenticated user (optional)
   * @param expand expands build result details on request. Possible values are: artifacts, comments, labels, jiraIssues, stages. stages expand is available only for top level plans. It allows to drill down to job results using stages.stage.results.result. All expand parameters should contain results.result prefix. (optional)
   * @param lifeCycleState return build results in given lifecycle state, valid values are Pending, Queued, InProgress, Finished, NotBuilt (multiple values can be separated by a comma) (optional)
   * @return RestResults
   * @throws ApiException if fails to make API call
   */
  public RestResults getBranchHistory(String buildKey, String branchName, String projectKey, Boolean includeAllStates, Boolean continuable, String issueKey, Integer maxResult, Integer startIndex, String label, String buildstate, String favourite, String expand, String lifeCycleState) throws ApiException {
    ApiResponse<RestResults> localVarResponse = getBranchHistoryWithHttpInfo(buildKey, branchName, projectKey, includeAllStates, continuable, issueKey, maxResult, startIndex, label, buildstate, favourite, expand, lifeCycleState);
    return localVarResponse.getData();
  }

  /**
   * 
   * Provide list of build results for specified plan&#39;s branch. Plan might be top level plan (projectKey-planKey) or job plan (projectKey-planKey-jobKey).
   * @param buildKey plan key (might be simply planKey or composite planKey-jobKey) (required)
   * @param branchName Branch name (required)
   * @param projectKey project key (required)
   * @param includeAllStates return build results in all lifecycle states, including unknown and active states (optional)
   * @param continuable filter only results that may be continued (stopped on Manual Stage) (optional)
   * @param issueKey Filter by comma separated list of Jira issue key related to result (optional)
   * @param maxResult Maximum size for returned list (optional)
   * @param startIndex Start index for results list (zero based) (optional)
   * @param label Filter by comma separated list of labels (optional)
   * @param buildstate filter results by state, valid values are Unknown, Successful, Failed (optional)
   * @param favourite Filters build results list to show only results for favourite plans. Works only for authenticated user (optional)
   * @param expand expands build result details on request. Possible values are: artifacts, comments, labels, jiraIssues, stages. stages expand is available only for top level plans. It allows to drill down to job results using stages.stage.results.result. All expand parameters should contain results.result prefix. (optional)
   * @param lifeCycleState return build results in given lifecycle state, valid values are Pending, Queued, InProgress, Finished, NotBuilt (multiple values can be separated by a comma) (optional)
   * @return ApiResponse&lt;RestResults&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestResults> getBranchHistoryWithHttpInfo(String buildKey, String branchName, String projectKey, Boolean includeAllStates, Boolean continuable, String issueKey, Integer maxResult, Integer startIndex, String label, String buildstate, String favourite, String expand, String lifeCycleState) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getBranchHistoryRequestBuilder(buildKey, branchName, projectKey, includeAllStates, continuable, issueKey, maxResult, startIndex, label, buildstate, favourite, expand, lifeCycleState);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getBranchHistory", localVarResponse);
        }
        return new ApiResponse<RestResults>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestResults>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getBranchHistoryRequestBuilder(String buildKey, String branchName, String projectKey, Boolean includeAllStates, Boolean continuable, String issueKey, Integer maxResult, Integer startIndex, String label, String buildstate, String favourite, String expand, String lifeCycleState) throws ApiException {
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling getBranchHistory");
    }
    // verify the required parameter 'branchName' is set
    if (branchName == null) {
      throw new ApiException(400, "Missing the required parameter 'branchName' when calling getBranchHistory");
    }
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling getBranchHistory");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/result/{projectKey}-{buildKey}/branch/{branchName}"
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()))
        .replace("{branchName}", ApiClient.urlEncode(branchName.toString()))
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "includeAllStates";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("includeAllStates", includeAllStates));
    localVarQueryParameterBaseName = "continuable";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("continuable", continuable));
    localVarQueryParameterBaseName = "issueKey";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("issueKey", issueKey));
    localVarQueryParameterBaseName = "max-result";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-result", maxResult));
    localVarQueryParameterBaseName = "start-index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start-index", startIndex));
    localVarQueryParameterBaseName = "label";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label", label));
    localVarQueryParameterBaseName = "buildstate";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("buildstate", buildstate));
    localVarQueryParameterBaseName = "favourite";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("favourite", favourite));
    localVarQueryParameterBaseName = "expand";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("expand", expand));
    localVarQueryParameterBaseName = "lifeCycleState";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("lifeCycleState", lifeCycleState));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get broken builds for user.
   * @param name User name (required)
   * @param showAllResponsible If response should include other responsible users (optional)
   * @return GetBrokenBuildsForUser200Response
   * @throws ApiException if fails to make API call
   */
  public GetBrokenBuildsForUser200Response getBrokenBuildsForUser(String name, String showAllResponsible) throws ApiException {
    ApiResponse<GetBrokenBuildsForUser200Response> localVarResponse = getBrokenBuildsForUserWithHttpInfo(name, showAllResponsible);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get broken builds for user.
   * @param name User name (required)
   * @param showAllResponsible If response should include other responsible users (optional)
   * @return ApiResponse&lt;GetBrokenBuildsForUser200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetBrokenBuildsForUser200Response> getBrokenBuildsForUserWithHttpInfo(String name, String showAllResponsible) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getBrokenBuildsForUserRequestBuilder(name, showAllResponsible);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getBrokenBuildsForUser", localVarResponse);
        }
        return new ApiResponse<GetBrokenBuildsForUser200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetBrokenBuildsForUser200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getBrokenBuildsForUserRequestBuilder(String name, String showAllResponsible) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getBrokenBuildsForUser");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/responsibility/latest/brokenBuild/byUser/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "showAllResponsible";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("showAllResponsible", showAllResponsible));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Provide build result specified by projectKey-buildKey-buildNumber.
   * @param projectKey project key (required)
   * @param buildKey plan key (might be simply planKey or composite planKey-jobKey) (required)
   * @param buildNumber Build number may be specified as *latest* for the result with the highest build number (required)
   * @param expand expands build result details on request. Possible values are: changes, metadata, artifacts, comments, labels, jiraIssues, stages, logEntries. stages expand is available only for top level plans. It allows to drill down to job results using stages.stage.results.result. logEntries and testResults are available only for job results (optional)
   * @param buildPositions in case of PENDING or QUEUED state expands build result queue position (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result getBuild(String projectKey, String buildKey, String buildNumber, String expand, String buildPositions) throws ApiException {
    ApiResponse<Result> localVarResponse = getBuildWithHttpInfo(projectKey, buildKey, buildNumber, expand, buildPositions);
    return localVarResponse.getData();
  }

  /**
   * 
   * Provide build result specified by projectKey-buildKey-buildNumber.
   * @param projectKey project key (required)
   * @param buildKey plan key (might be simply planKey or composite planKey-jobKey) (required)
   * @param buildNumber Build number may be specified as *latest* for the result with the highest build number (required)
   * @param expand expands build result details on request. Possible values are: changes, metadata, artifacts, comments, labels, jiraIssues, stages, logEntries. stages expand is available only for top level plans. It allows to drill down to job results using stages.stage.results.result. logEntries and testResults are available only for job results (optional)
   * @param buildPositions in case of PENDING or QUEUED state expands build result queue position (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> getBuildWithHttpInfo(String projectKey, String buildKey, String buildNumber, String expand, String buildPositions) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getBuildRequestBuilder(projectKey, buildKey, buildNumber, expand, buildPositions);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getBuild", localVarResponse);
        }
        return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getBuildRequestBuilder(String projectKey, String buildKey, String buildNumber, String expand, String buildPositions) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling getBuild");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling getBuild");
    }
    // verify the required parameter 'buildNumber' is set
    if (buildNumber == null) {
      throw new ApiException(400, "Missing the required parameter 'buildNumber' when calling getBuild");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/result/{projectKey}-{buildKey}-{buildNumber}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()))
        .replace("{buildNumber}", ApiClient.urlEncode(buildNumber.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "expand";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("expand", expand));
    localVarQueryParameterBaseName = "buildPositions";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("buildPositions", buildPositions));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Provide build result specified by projectKey-buildKey-buildNumber.
   * @param projectKey project key (required)
   * @param buildKey plan key (might be simply planKey or composite planKey-jobKey) (required)
   * @param buildNumber Build number may be specified as *latest* for the result with the highest build number (required)
   * @param expand expands build result details on request. Possible values are: changes, metadata, artifacts, comments, labels, jiraIssues, stages, logEntries. stages expand is available only for top level plans. It allows to drill down to job results using stages.stage.results.result. logEntries and testResults are available only for job results (optional)
   * @return Result
   * @throws ApiException if fails to make API call
   */
  public Result getBuildAlias(String projectKey, String buildKey, String buildNumber, String expand) throws ApiException {
    ApiResponse<Result> localVarResponse = getBuildAliasWithHttpInfo(projectKey, buildKey, buildNumber, expand);
    return localVarResponse.getData();
  }

  /**
   * 
   * Provide build result specified by projectKey-buildKey-buildNumber.
   * @param projectKey project key (required)
   * @param buildKey plan key (might be simply planKey or composite planKey-jobKey) (required)
   * @param buildNumber Build number may be specified as *latest* for the result with the highest build number (required)
   * @param expand expands build result details on request. Possible values are: changes, metadata, artifacts, comments, labels, jiraIssues, stages, logEntries. stages expand is available only for top level plans. It allows to drill down to job results using stages.stage.results.result. logEntries and testResults are available only for job results (optional)
   * @return ApiResponse&lt;Result&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Result> getBuildAliasWithHttpInfo(String projectKey, String buildKey, String buildNumber, String expand) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getBuildAliasRequestBuilder(projectKey, buildKey, buildNumber, expand);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getBuildAlias", localVarResponse);
        }
        return new ApiResponse<Result>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Result>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getBuildAliasRequestBuilder(String projectKey, String buildKey, String buildNumber, String expand) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling getBuildAlias");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling getBuildAlias");
    }
    // verify the required parameter 'buildNumber' is set
    if (buildNumber == null) {
      throw new ApiException(400, "Missing the required parameter 'buildNumber' when calling getBuildAlias");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/result/{projectKey}-{buildKey}/{buildNumber}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()))
        .replace("{buildNumber}", ApiClient.urlEncode(buildNumber.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "expand";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("expand", expand));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Provide list of comments for build result specified by projectKey-buildKey-buildNumber.
   * @param projectKey project key (required)
   * @param buildKey plan key (might be simply planKey or composite planKey-jobKey) (required)
   * @param buildNumber Build number may be specified as *latest* for the result with the highest build number (required)
   * @return RestComments
   * @throws ApiException if fails to make API call
   */
  public RestComments getBuildComments(String projectKey, String buildKey, String buildNumber) throws ApiException {
    ApiResponse<RestComments> localVarResponse = getBuildCommentsWithHttpInfo(projectKey, buildKey, buildNumber);
    return localVarResponse.getData();
  }

  /**
   * 
   * Provide list of comments for build result specified by projectKey-buildKey-buildNumber.
   * @param projectKey project key (required)
   * @param buildKey plan key (might be simply planKey or composite planKey-jobKey) (required)
   * @param buildNumber Build number may be specified as *latest* for the result with the highest build number (required)
   * @return ApiResponse&lt;RestComments&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestComments> getBuildCommentsWithHttpInfo(String projectKey, String buildKey, String buildNumber) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getBuildCommentsRequestBuilder(projectKey, buildKey, buildNumber);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getBuildComments", localVarResponse);
        }
        return new ApiResponse<RestComments>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestComments>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getBuildCommentsRequestBuilder(String projectKey, String buildKey, String buildNumber) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling getBuildComments");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling getBuildComments");
    }
    // verify the required parameter 'buildNumber' is set
    if (buildNumber == null) {
      throw new ApiException(400, "Missing the required parameter 'buildNumber' when calling getBuildComments");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/result/{projectKey}-{buildKey}-{buildNumber}/comment"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()))
        .replace("{buildNumber}", ApiClient.urlEncode(buildNumber.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve build concurrency settings.
   * @return RestBuildConcurrency
   * @throws ApiException if fails to make API call
   */
  public RestBuildConcurrency getBuildConcurrency() throws ApiException {
    ApiResponse<RestBuildConcurrency> localVarResponse = getBuildConcurrencyWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve build concurrency settings.
   * @return ApiResponse&lt;RestBuildConcurrency&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestBuildConcurrency> getBuildConcurrencyWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getBuildConcurrencyRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getBuildConcurrency", localVarResponse);
        }
        return new ApiResponse<RestBuildConcurrency>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestBuildConcurrency>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getBuildConcurrencyRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/config/build/concurrency";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Provide list of build results for specified plan. Plan might be top level plan (projectKey-planKey) or job plan (projectKey-planKey-jobKey).
   * @param projectKey project key (required)
   * @param buildKey plan key (might be simply planKey or composite planKey-jobKey) (required)
   * @param includeAllStates return build results in all lifecycle states, including unknown and active states (optional)
   * @param continuable filter only results that may be continued (stopped on Manual Stage) (optional)
   * @param expand expands build result details on request. Possible values are: artifacts, comments, labels, jiraIssues, stages. stages expand is available only for top level plans. It allows to drill down to job results using stages.stage.results.result. All expand parameters should contain results.result prefix (optional)
   * @param issueKey Filter by comma separated list of Jira issue key related to result (optional)
   * @param maxResult Maximum size for returned list (optional)
   * @param startIndex Start index for results list (zero based) (optional)
   * @param label Filter by comma separated list of labels (optional)
   * @param buildstate filter results by state, valid values are Unknown, Successful, Failed (optional)
   * @param favourite Filters build results list to show only results for favourite plans. Works only for authenticated user (optional)
   * @param lifeCycleState return build results in given lifecycle state, valid values are Pending, Queued, InProgress, Finished, NotBuilt (multiple values can be separated by a comma) (optional)
   * @return RestResultsResults
   * @throws ApiException if fails to make API call
   */
  public RestResultsResults getBuildHistory(String projectKey, String buildKey, Boolean includeAllStates, Boolean continuable, String expand, String issueKey, Integer maxResult, Integer startIndex, String label, String buildstate, String favourite, String lifeCycleState) throws ApiException {
    ApiResponse<RestResultsResults> localVarResponse = getBuildHistoryWithHttpInfo(projectKey, buildKey, includeAllStates, continuable, expand, issueKey, maxResult, startIndex, label, buildstate, favourite, lifeCycleState);
    return localVarResponse.getData();
  }

  /**
   * 
   * Provide list of build results for specified plan. Plan might be top level plan (projectKey-planKey) or job plan (projectKey-planKey-jobKey).
   * @param projectKey project key (required)
   * @param buildKey plan key (might be simply planKey or composite planKey-jobKey) (required)
   * @param includeAllStates return build results in all lifecycle states, including unknown and active states (optional)
   * @param continuable filter only results that may be continued (stopped on Manual Stage) (optional)
   * @param expand expands build result details on request. Possible values are: artifacts, comments, labels, jiraIssues, stages. stages expand is available only for top level plans. It allows to drill down to job results using stages.stage.results.result. All expand parameters should contain results.result prefix (optional)
   * @param issueKey Filter by comma separated list of Jira issue key related to result (optional)
   * @param maxResult Maximum size for returned list (optional)
   * @param startIndex Start index for results list (zero based) (optional)
   * @param label Filter by comma separated list of labels (optional)
   * @param buildstate filter results by state, valid values are Unknown, Successful, Failed (optional)
   * @param favourite Filters build results list to show only results for favourite plans. Works only for authenticated user (optional)
   * @param lifeCycleState return build results in given lifecycle state, valid values are Pending, Queued, InProgress, Finished, NotBuilt (multiple values can be separated by a comma) (optional)
   * @return ApiResponse&lt;RestResultsResults&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestResultsResults> getBuildHistoryWithHttpInfo(String projectKey, String buildKey, Boolean includeAllStates, Boolean continuable, String expand, String issueKey, Integer maxResult, Integer startIndex, String label, String buildstate, String favourite, String lifeCycleState) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getBuildHistoryRequestBuilder(projectKey, buildKey, includeAllStates, continuable, expand, issueKey, maxResult, startIndex, label, buildstate, favourite, lifeCycleState);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getBuildHistory", localVarResponse);
        }
        return new ApiResponse<RestResultsResults>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestResultsResults>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getBuildHistoryRequestBuilder(String projectKey, String buildKey, Boolean includeAllStates, Boolean continuable, String expand, String issueKey, Integer maxResult, Integer startIndex, String label, String buildstate, String favourite, String lifeCycleState) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling getBuildHistory");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling getBuildHistory");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/result/{projectKey}-{buildKey}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "includeAllStates";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("includeAllStates", includeAllStates));
    localVarQueryParameterBaseName = "continuable";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("continuable", continuable));
    localVarQueryParameterBaseName = "expand";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("expand", expand));
    localVarQueryParameterBaseName = "issueKey";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("issueKey", issueKey));
    localVarQueryParameterBaseName = "max-result";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-result", maxResult));
    localVarQueryParameterBaseName = "start-index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start-index", startIndex));
    localVarQueryParameterBaseName = "label";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label", label));
    localVarQueryParameterBaseName = "buildstate";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("buildstate", buildstate));
    localVarQueryParameterBaseName = "favourite";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("favourite", favourite));
    localVarQueryParameterBaseName = "lifeCycleState";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("lifeCycleState", lifeCycleState));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Provide list of labels for build result specified by projectKey-buildKey-buildNumber.
   * @param projectKey project key (required)
   * @param buildKey plan key (must be a plan key, not a job key) (required)
   * @param buildNumber Build number may be specified as \&quot;latest\&quot; for the result with the highest build number (required)
   * @return RestBuildLabels
   * @throws ApiException if fails to make API call
   */
  public RestBuildLabels getBuildLabels(String projectKey, String buildKey, String buildNumber) throws ApiException {
    ApiResponse<RestBuildLabels> localVarResponse = getBuildLabelsWithHttpInfo(projectKey, buildKey, buildNumber);
    return localVarResponse.getData();
  }

  /**
   * 
   * Provide list of labels for build result specified by projectKey-buildKey-buildNumber.
   * @param projectKey project key (required)
   * @param buildKey plan key (must be a plan key, not a job key) (required)
   * @param buildNumber Build number may be specified as \&quot;latest\&quot; for the result with the highest build number (required)
   * @return ApiResponse&lt;RestBuildLabels&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestBuildLabels> getBuildLabelsWithHttpInfo(String projectKey, String buildKey, String buildNumber) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getBuildLabelsRequestBuilder(projectKey, buildKey, buildNumber);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getBuildLabels", localVarResponse);
        }
        return new ApiResponse<RestBuildLabels>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestBuildLabels>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getBuildLabelsRequestBuilder(String projectKey, String buildKey, String buildNumber) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling getBuildLabels");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling getBuildLabels");
    }
    // verify the required parameter 'buildNumber' is set
    if (buildNumber == null) {
      throw new ApiException(400, "Missing the required parameter 'buildNumber' when calling getBuildLabels");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/result/{projectKey}-{buildKey}-{buildNumber}/label"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()))
        .replace("{buildNumber}", ApiClient.urlEncode(buildNumber.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve build monitoring settings
   * @return RestBuildMonitoring
   * @throws ApiException if fails to make API call
   */
  public RestBuildMonitoring getBuildMonitoring() throws ApiException {
    ApiResponse<RestBuildMonitoring> localVarResponse = getBuildMonitoringWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve build monitoring settings
   * @return ApiResponse&lt;RestBuildMonitoring&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestBuildMonitoring> getBuildMonitoringWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getBuildMonitoringRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getBuildMonitoring", localVarResponse);
        }
        return new ApiResponse<RestBuildMonitoring>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestBuildMonitoring>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getBuildMonitoringRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/config/build/monitoring";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Provide list of build scheduled for execution and waiting in build queue.
   * @param expand expands build result details on request. Possible values are: queuedBuilds (optional)
   * @param maxResult Maximum count of builds (optional)
   * @param startIndex Start index of builds (optional)
   * @return RestQueuedBuilds
   * @throws ApiException if fails to make API call
   */
  public RestQueuedBuilds getBuildQueue(String expand, Integer maxResult, Integer startIndex) throws ApiException {
    ApiResponse<RestQueuedBuilds> localVarResponse = getBuildQueueWithHttpInfo(expand, maxResult, startIndex);
    return localVarResponse.getData();
  }

  /**
   * 
   * Provide list of build scheduled for execution and waiting in build queue.
   * @param expand expands build result details on request. Possible values are: queuedBuilds (optional)
   * @param maxResult Maximum count of builds (optional)
   * @param startIndex Start index of builds (optional)
   * @return ApiResponse&lt;RestQueuedBuilds&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestQueuedBuilds> getBuildQueueWithHttpInfo(String expand, Integer maxResult, Integer startIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getBuildQueueRequestBuilder(expand, maxResult, startIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getBuildQueue", localVarResponse);
        }
        return new ApiResponse<RestQueuedBuilds>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestQueuedBuilds>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getBuildQueueRequestBuilder(String expand, Integer maxResult, Integer startIndex) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/queue";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "expand";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("expand", expand));
    localVarQueryParameterBaseName = "max-result";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-result", maxResult));
    localVarQueryParameterBaseName = "start-index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start-index", startIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Provide list of build results related to changeset id passed as parameter. List of results contains results from all plans related to this changeset.
   * @param csid changeset id related to build result (required)
   * @return RestResults
   * @throws ApiException if fails to make API call
   */
  public RestResults getBuildResultsForChangeset(String csid) throws ApiException {
    ApiResponse<RestResults> localVarResponse = getBuildResultsForChangesetWithHttpInfo(csid);
    return localVarResponse.getData();
  }

  /**
   * 
   * Provide list of build results related to changeset id passed as parameter. List of results contains results from all plans related to this changeset.
   * @param csid changeset id related to build result (required)
   * @return ApiResponse&lt;RestResults&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestResults> getBuildResultsForChangesetWithHttpInfo(String csid) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getBuildResultsForChangesetRequestBuilder(csid);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getBuildResultsForChangeset", localVarResponse);
        }
        return new ApiResponse<RestResults>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestResults>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getBuildResultsForChangesetRequestBuilder(String csid) throws ApiException {
    // verify the required parameter 'csid' is set
    if (csid == null) {
      throw new ApiException(400, "Missing the required parameter 'csid' when calling getBuildResultsForChangeset");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/result/byChangeset/{csid}"
        .replace("{csid}", ApiClient.urlEncode(csid.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Provide list of build results related to changeset id passed as parameter. List of results contains results from all plans which have repositories checked out with this changeset.
   * @param csid checkout changeset id related to build result (required)
   * @return RestResults
   * @throws ApiException if fails to make API call
   */
  public RestResults getBuildResultsForCheckoutChangeset(String csid) throws ApiException {
    ApiResponse<RestResults> localVarResponse = getBuildResultsForCheckoutChangesetWithHttpInfo(csid);
    return localVarResponse.getData();
  }

  /**
   * 
   * Provide list of build results related to changeset id passed as parameter. List of results contains results from all plans which have repositories checked out with this changeset.
   * @param csid checkout changeset id related to build result (required)
   * @return ApiResponse&lt;RestResults&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestResults> getBuildResultsForCheckoutChangesetWithHttpInfo(String csid) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getBuildResultsForCheckoutChangesetRequestBuilder(csid);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getBuildResultsForCheckoutChangeset", localVarResponse);
        }
        return new ApiResponse<RestResults>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestResults>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getBuildResultsForCheckoutChangesetRequestBuilder(String csid) throws ApiException {
    // verify the required parameter 'csid' is set
    if (csid == null) {
      throw new ApiException(400, "Missing the required parameter 'csid' when calling getBuildResultsForCheckoutChangeset");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/result/byCheckoutChangeset/{csid}"
        .replace("{csid}", ApiClient.urlEncode(csid.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Fetch page of ephemeral agent template capabilities.
   * @param configurationId Configuration ID (required)
   * @return List&lt;RestEphemeralAgentTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RestEphemeralAgentTemplate> getCapabilities(Long configurationId) throws ApiException {
    ApiResponse<List<RestEphemeralAgentTemplate>> localVarResponse = getCapabilitiesWithHttpInfo(configurationId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Fetch page of ephemeral agent template capabilities.
   * @param configurationId Configuration ID (required)
   * @return ApiResponse&lt;List&lt;RestEphemeralAgentTemplate&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RestEphemeralAgentTemplate>> getCapabilitiesWithHttpInfo(Long configurationId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getCapabilitiesRequestBuilder(configurationId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getCapabilities", localVarResponse);
        }
        return new ApiResponse<List<RestEphemeralAgentTemplate>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RestEphemeralAgentTemplate>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getCapabilitiesRequestBuilder(Long configurationId) throws ApiException {
    // verify the required parameter 'configurationId' is set
    if (configurationId == null) {
      throw new ApiException(400, "Missing the required parameter 'configurationId' when calling getCapabilities");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/ephemeral/templateConfiguration/{configurationId}/capability"
        .replace("{configurationId}", ApiClient.urlEncode(configurationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Clone an existing Plan into a new one, possibly into different project.
   * @param projectKey Source project key (required)
   * @param buildKey Source build key (required)
   * @param toBuildKey Destination build key (required)
   * @param toProjectKey Destination project key (required)
   * @return RestPlan
   * @throws ApiException if fails to make API call
   */
  public RestPlan getClone(String projectKey, String buildKey, String toBuildKey, String toProjectKey) throws ApiException {
    ApiResponse<RestPlan> localVarResponse = getCloneWithHttpInfo(projectKey, buildKey, toBuildKey, toProjectKey);
    return localVarResponse.getData();
  }

  /**
   * 
   * Clone an existing Plan into a new one, possibly into different project.
   * @param projectKey Source project key (required)
   * @param buildKey Source build key (required)
   * @param toBuildKey Destination build key (required)
   * @param toProjectKey Destination project key (required)
   * @return ApiResponse&lt;RestPlan&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestPlan> getCloneWithHttpInfo(String projectKey, String buildKey, String toBuildKey, String toProjectKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getCloneRequestBuilder(projectKey, buildKey, toBuildKey, toProjectKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getClone", localVarResponse);
        }
        return new ApiResponse<RestPlan>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestPlan>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getCloneRequestBuilder(String projectKey, String buildKey, String toBuildKey, String toProjectKey) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling getClone");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling getClone");
    }
    // verify the required parameter 'toBuildKey' is set
    if (toBuildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'toBuildKey' when calling getClone");
    }
    // verify the required parameter 'toProjectKey' is set
    if (toProjectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'toProjectKey' when calling getClone");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/clone/{projectKey}-{buildKey}:{toProjectKey}-{toBuildKey}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()))
        .replace("{toBuildKey}", ApiClient.urlEncode(toBuildKey.toString()))
        .replace("{toProjectKey}", ApiClient.urlEncode(toProjectKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieves ephemeral agents configuration.
   * @return EphemeralAgentsConfigurationDTO
   * @throws ApiException if fails to make API call
   */
  public EphemeralAgentsConfigurationDTO getConfiguration() throws ApiException {
    ApiResponse<EphemeralAgentsConfigurationDTO> localVarResponse = getConfigurationWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieves ephemeral agents configuration.
   * @return ApiResponse&lt;EphemeralAgentsConfigurationDTO&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EphemeralAgentsConfigurationDTO> getConfigurationWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getConfigurationRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getConfiguration", localVarResponse);
        }
        return new ApiResponse<EphemeralAgentsConfigurationDTO>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EphemeralAgentsConfigurationDTO>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getConfigurationRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/ephemeral/config";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieves global build and deployment expiry configuration for this Bamboo instance.
   * @return RestCombinedExpiryConfiguration
   * @throws ApiException if fails to make API call
   */
  public RestCombinedExpiryConfiguration getConfiguration1() throws ApiException {
    ApiResponse<RestCombinedExpiryConfiguration> localVarResponse = getConfiguration1WithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieves global build and deployment expiry configuration for this Bamboo instance.
   * @return ApiResponse&lt;RestCombinedExpiryConfiguration&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestCombinedExpiryConfiguration> getConfiguration1WithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getConfiguration1RequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getConfiguration1", localVarResponse);
        }
        return new ApiResponse<RestCombinedExpiryConfiguration>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestCombinedExpiryConfiguration>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getConfiguration1RequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/expiry/configuration";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Elastic image configuration details.
   * @param configurationId  (required)
   * @return RestElasticImageConfig
   * @throws ApiException if fails to make API call
   */
  public RestElasticImageConfig getConfiguration2(Long configurationId) throws ApiException {
    ApiResponse<RestElasticImageConfig> localVarResponse = getConfiguration2WithHttpInfo(configurationId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Elastic image configuration details.
   * @param configurationId  (required)
   * @return ApiResponse&lt;RestElasticImageConfig&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestElasticImageConfig> getConfiguration2WithHttpInfo(Long configurationId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getConfiguration2RequestBuilder(configurationId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getConfiguration2", localVarResponse);
        }
        return new ApiResponse<RestElasticImageConfig>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestElasticImageConfig>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getConfiguration2RequestBuilder(Long configurationId) throws ApiException {
    // verify the required parameter 'configurationId' is set
    if (configurationId == null) {
      throw new ApiException(400, "Missing the required parameter 'configurationId' when calling getConfiguration2");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/elasticConfiguration/{configurationId}"
        .replace("{configurationId}", ApiClient.urlEncode(configurationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Fetch current user details
   * @return UserBean
   * @throws ApiException if fails to make API call
   */
  public UserBean getCurrentUser() throws ApiException {
    ApiResponse<UserBean> localVarResponse = getCurrentUserWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Fetch current user details
   * @return ApiResponse&lt;UserBean&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UserBean> getCurrentUserWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getCurrentUserRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getCurrentUser", localVarResponse);
        }
        return new ApiResponse<UserBean>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<UserBean>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getCurrentUserRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/currentUser";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get deployment version name preview.
   * @param deploymentProjectId Deployment project id (required)
   * @param nextVersionName Version name (required)
   * @param incrementableVariables variables used for version name. Divided by coma (optional)
   * @param incrementNumbers If version number should be incremented (optional)
   * @return RestNamingPreview
   * @throws ApiException if fails to make API call
   */
  public RestNamingPreview getDeploymentNamingPreview(String deploymentProjectId, String nextVersionName, String incrementableVariables, String incrementNumbers) throws ApiException {
    ApiResponse<RestNamingPreview> localVarResponse = getDeploymentNamingPreviewWithHttpInfo(deploymentProjectId, nextVersionName, incrementableVariables, incrementNumbers);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get deployment version name preview.
   * @param deploymentProjectId Deployment project id (required)
   * @param nextVersionName Version name (required)
   * @param incrementableVariables variables used for version name. Divided by coma (optional)
   * @param incrementNumbers If version number should be incremented (optional)
   * @return ApiResponse&lt;RestNamingPreview&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestNamingPreview> getDeploymentNamingPreviewWithHttpInfo(String deploymentProjectId, String nextVersionName, String incrementableVariables, String incrementNumbers) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDeploymentNamingPreviewRequestBuilder(deploymentProjectId, nextVersionName, incrementableVariables, incrementNumbers);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDeploymentNamingPreview", localVarResponse);
        }
        return new ApiResponse<RestNamingPreview>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestNamingPreview>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDeploymentNamingPreviewRequestBuilder(String deploymentProjectId, String nextVersionName, String incrementableVariables, String incrementNumbers) throws ApiException {
    // verify the required parameter 'deploymentProjectId' is set
    if (deploymentProjectId == null) {
      throw new ApiException(400, "Missing the required parameter 'deploymentProjectId' when calling getDeploymentNamingPreview");
    }
    // verify the required parameter 'nextVersionName' is set
    if (nextVersionName == null) {
      throw new ApiException(400, "Missing the required parameter 'nextVersionName' when calling getDeploymentNamingPreview");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/projectVersioning/{deploymentProjectId}/namingPreview"
        .replace("{deploymentProjectId}", ApiClient.urlEncode(deploymentProjectId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "nextVersionName";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("nextVersionName", nextVersionName));
    localVarQueryParameterBaseName = "incrementableVariables";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("incrementableVariables", incrementableVariables));
    localVarQueryParameterBaseName = "incrementNumbers";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("incrementNumbers", incrementNumbers));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get deployment project environments with deployment status. It&#39;s not optimized for instances with large count of deployment projects and environments, use paged versions instead.
   * @param projectId Deployment project id (required)
   * @return List&lt;DashboardProjectWithEnvironmentStatus&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public List<DashboardProjectWithEnvironmentStatus> getDeploymentProject(String projectId) throws ApiException {
    ApiResponse<List<DashboardProjectWithEnvironmentStatus>> localVarResponse = getDeploymentProjectWithHttpInfo(projectId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get deployment project environments with deployment status. It&#39;s not optimized for instances with large count of deployment projects and environments, use paged versions instead.
   * @param projectId Deployment project id (required)
   * @return ApiResponse&lt;List&lt;DashboardProjectWithEnvironmentStatus&gt;&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ApiResponse<List<DashboardProjectWithEnvironmentStatus>> getDeploymentProjectWithHttpInfo(String projectId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDeploymentProjectRequestBuilder(projectId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDeploymentProject", localVarResponse);
        }
        return new ApiResponse<List<DashboardProjectWithEnvironmentStatus>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<DashboardProjectWithEnvironmentStatus>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDeploymentProjectRequestBuilder(String projectId) throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling getDeploymentProject");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/dashboard/{projectId}"
        .replace("{projectId}", ApiClient.urlEncode(projectId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get deployment project by id.
   * @param deploymentProjectId Deployment project id (required)
   * @return RestDeploymentProject
   * @throws ApiException if fails to make API call
   */
  public RestDeploymentProject getDeploymentProject1(String deploymentProjectId) throws ApiException {
    ApiResponse<RestDeploymentProject> localVarResponse = getDeploymentProject1WithHttpInfo(deploymentProjectId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get deployment project by id.
   * @param deploymentProjectId Deployment project id (required)
   * @return ApiResponse&lt;RestDeploymentProject&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestDeploymentProject> getDeploymentProject1WithHttpInfo(String deploymentProjectId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDeploymentProject1RequestBuilder(deploymentProjectId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDeploymentProject1", localVarResponse);
        }
        return new ApiResponse<RestDeploymentProject>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestDeploymentProject>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDeploymentProject1RequestBuilder(String deploymentProjectId) throws ApiException {
    // verify the required parameter 'deploymentProjectId' is set
    if (deploymentProjectId == null) {
      throw new ApiException(400, "Missing the required parameter 'deploymentProjectId' when calling getDeploymentProject1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/project/{deploymentProjectId}"
        .replace("{deploymentProjectId}", ApiClient.urlEncode(deploymentProjectId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get variables associated with deployment project.
   * @param deploymentProjectId Deployment project id (required)
   * @return VersionVariables
   * @throws ApiException if fails to make API call
   */
  public VersionVariables getDeploymentProjectVariables(String deploymentProjectId) throws ApiException {
    ApiResponse<VersionVariables> localVarResponse = getDeploymentProjectVariablesWithHttpInfo(deploymentProjectId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get variables associated with deployment project.
   * @param deploymentProjectId Deployment project id (required)
   * @return ApiResponse&lt;VersionVariables&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VersionVariables> getDeploymentProjectVariablesWithHttpInfo(String deploymentProjectId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDeploymentProjectVariablesRequestBuilder(deploymentProjectId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDeploymentProjectVariables", localVarResponse);
        }
        return new ApiResponse<VersionVariables>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VersionVariables>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDeploymentProjectVariablesRequestBuilder(String deploymentProjectId) throws ApiException {
    // verify the required parameter 'deploymentProjectId' is set
    if (deploymentProjectId == null) {
      throw new ApiException(400, "Missing the required parameter 'deploymentProjectId' when calling getDeploymentProjectVariables");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/projectVersioning/{deploymentProjectId}/variables"
        .replace("{deploymentProjectId}", ApiClient.urlEncode(deploymentProjectId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get list of deployment versions.
   * @param deploymentProjectId Deployment project id (required)
   * @param branchKey plan branch key. Can be empty if default branch is required (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object getDeploymentProjectVersions(String deploymentProjectId, String branchKey) throws ApiException {
    ApiResponse<Object> localVarResponse = getDeploymentProjectVersionsWithHttpInfo(deploymentProjectId, branchKey);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get list of deployment versions.
   * @param deploymentProjectId Deployment project id (required)
   * @param branchKey plan branch key. Can be empty if default branch is required (optional)
   * @return ApiResponse&lt;Object&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Object> getDeploymentProjectVersionsWithHttpInfo(String deploymentProjectId, String branchKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDeploymentProjectVersionsRequestBuilder(deploymentProjectId, branchKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDeploymentProjectVersions", localVarResponse);
        }
        return new ApiResponse<Object>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Object>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDeploymentProjectVersionsRequestBuilder(String deploymentProjectId, String branchKey) throws ApiException {
    // verify the required parameter 'deploymentProjectId' is set
    if (deploymentProjectId == null) {
      throw new ApiException(400, "Missing the required parameter 'deploymentProjectId' when calling getDeploymentProjectVersions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/project/{deploymentProjectId}/versions"
        .replace("{deploymentProjectId}", ApiClient.urlEncode(deploymentProjectId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "branchKey";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("branchKey", branchKey));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get paginated deployment projects with environments list.
   * @param filter Deployment project id (optional)
   * @param limit Page request size (optional)
   * @param start Page request start index (optional)
   * @return GetDeploymentProjects200Response
   * @throws ApiException if fails to make API call
   */
  public GetDeploymentProjects200Response getDeploymentProjects(String filter, Integer limit, Integer start) throws ApiException {
    ApiResponse<GetDeploymentProjects200Response> localVarResponse = getDeploymentProjectsWithHttpInfo(filter, limit, start);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get paginated deployment projects with environments list.
   * @param filter Deployment project id (optional)
   * @param limit Page request size (optional)
   * @param start Page request start index (optional)
   * @return ApiResponse&lt;GetDeploymentProjects200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDeploymentProjects200Response> getDeploymentProjectsWithHttpInfo(String filter, Integer limit, Integer start) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDeploymentProjectsRequestBuilder(filter, limit, start);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDeploymentProjects", localVarResponse);
        }
        return new ApiResponse<GetDeploymentProjects200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDeploymentProjects200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDeploymentProjectsRequestBuilder(String filter, Integer limit, Integer start) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/dashboard/paginate";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get list of deployment projects for a build plan.
   * @param planKey Plan key (required)
   * @return List&lt;RestLinkedDeploymentProject&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RestLinkedDeploymentProject> getDeploymentProjectsForPlan(String planKey) throws ApiException {
    ApiResponse<List<RestLinkedDeploymentProject>> localVarResponse = getDeploymentProjectsForPlanWithHttpInfo(planKey);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get list of deployment projects for a build plan.
   * @param planKey Plan key (required)
   * @return ApiResponse&lt;List&lt;RestLinkedDeploymentProject&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RestLinkedDeploymentProject>> getDeploymentProjectsForPlanWithHttpInfo(String planKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDeploymentProjectsForPlanRequestBuilder(planKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDeploymentProjectsForPlan", localVarResponse);
        }
        return new ApiResponse<List<RestLinkedDeploymentProject>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RestLinkedDeploymentProject>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDeploymentProjectsForPlanRequestBuilder(String planKey) throws ApiException {
    // verify the required parameter 'planKey' is set
    if (planKey == null) {
      throw new ApiException(400, "Missing the required parameter 'planKey' when calling getDeploymentProjectsForPlan");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/project/forPlan";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "planKey";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("planKey", planKey));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get result of version deployment to environment.
   * @param deploymentResultId Deployment result id (required)
   * @param includeLogs If logs should be included (optional)
   * @return RestDeploymentResult
   * @throws ApiException if fails to make API call
   */
  public RestDeploymentResult getDeploymentResult(String deploymentResultId, String includeLogs) throws ApiException {
    ApiResponse<RestDeploymentResult> localVarResponse = getDeploymentResultWithHttpInfo(deploymentResultId, includeLogs);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get result of version deployment to environment.
   * @param deploymentResultId Deployment result id (required)
   * @param includeLogs If logs should be included (optional)
   * @return ApiResponse&lt;RestDeploymentResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestDeploymentResult> getDeploymentResultWithHttpInfo(String deploymentResultId, String includeLogs) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDeploymentResultRequestBuilder(deploymentResultId, includeLogs);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDeploymentResult", localVarResponse);
        }
        return new ApiResponse<RestDeploymentResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestDeploymentResult>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDeploymentResultRequestBuilder(String deploymentResultId, String includeLogs) throws ApiException {
    // verify the required parameter 'deploymentResultId' is set
    if (deploymentResultId == null) {
      throw new ApiException(400, "Missing the required parameter 'deploymentResultId' when calling getDeploymentResult");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/result/{deploymentResultId}"
        .replace("{deploymentResultId}", ApiClient.urlEncode(deploymentResultId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "includeLogs";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("includeLogs", includeLogs));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get environment latest release info.
   * @param environmentIds identifiers of environments (required)
   * @return List&lt;RestEnvironmentStatusForDashboard&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RestEnvironmentStatusForDashboard> getEnvironmentStatutes(EnvironmentIds environmentIds) throws ApiException {
    ApiResponse<List<RestEnvironmentStatusForDashboard>> localVarResponse = getEnvironmentStatutesWithHttpInfo(environmentIds);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get environment latest release info.
   * @param environmentIds identifiers of environments (required)
   * @return ApiResponse&lt;List&lt;RestEnvironmentStatusForDashboard&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RestEnvironmentStatusForDashboard>> getEnvironmentStatutesWithHttpInfo(EnvironmentIds environmentIds) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getEnvironmentStatutesRequestBuilder(environmentIds);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getEnvironmentStatutes", localVarResponse);
        }
        return new ApiResponse<List<RestEnvironmentStatusForDashboard>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RestEnvironmentStatusForDashboard>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getEnvironmentStatutesRequestBuilder(EnvironmentIds environmentIds) throws ApiException {
    // verify the required parameter 'environmentIds' is set
    if (environmentIds == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentIds' when calling getEnvironmentStatutes");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/dashboard/status";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(environmentIds);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Gets either pod or container related logs.
   * @param pod Pod name (required)
   * @param containerName Container name, by default empty (optional)
   * @param limit Log entries limit, by default 50. If it is &#39;unlimited&#39;, all available logs will be returned (optional)
   * @param afterTimestamp The timestamp indicates the logs&#39; bottom time boundary (optional)
   * @return GetEphemeralAgentPodLogs200Response
   * @throws ApiException if fails to make API call
   */
  public GetEphemeralAgentPodLogs200Response getEphemeralAgentPodLogs(String pod, String containerName, String limit, String afterTimestamp) throws ApiException {
    ApiResponse<GetEphemeralAgentPodLogs200Response> localVarResponse = getEphemeralAgentPodLogsWithHttpInfo(pod, containerName, limit, afterTimestamp);
    return localVarResponse.getData();
  }

  /**
   * 
   * Gets either pod or container related logs.
   * @param pod Pod name (required)
   * @param containerName Container name, by default empty (optional)
   * @param limit Log entries limit, by default 50. If it is &#39;unlimited&#39;, all available logs will be returned (optional)
   * @param afterTimestamp The timestamp indicates the logs&#39; bottom time boundary (optional)
   * @return ApiResponse&lt;GetEphemeralAgentPodLogs200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetEphemeralAgentPodLogs200Response> getEphemeralAgentPodLogsWithHttpInfo(String pod, String containerName, String limit, String afterTimestamp) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getEphemeralAgentPodLogsRequestBuilder(pod, containerName, limit, afterTimestamp);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getEphemeralAgentPodLogs", localVarResponse);
        }
        return new ApiResponse<GetEphemeralAgentPodLogs200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetEphemeralAgentPodLogs200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getEphemeralAgentPodLogsRequestBuilder(String pod, String containerName, String limit, String afterTimestamp) throws ApiException {
    // verify the required parameter 'pod' is set
    if (pod == null) {
      throw new ApiException(400, "Missing the required parameter 'pod' when calling getEphemeralAgentPodLogs");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/ephemeral/pod/{pod}/logs"
        .replace("{pod}", ApiClient.urlEncode(pod.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "containerName";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("containerName", containerName));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "afterTimestamp";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("afterTimestamp", afterTimestamp));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Plan&#39;s favicon which depends on last build result.
   * @param planKey Plan key (required)
   * @return RestFavicon
   * @throws ApiException if fails to make API call
   */
  public RestFavicon getFaviconForPlan(String planKey) throws ApiException {
    ApiResponse<RestFavicon> localVarResponse = getFaviconForPlanWithHttpInfo(planKey);
    return localVarResponse.getData();
  }

  /**
   * 
   * Plan&#39;s favicon which depends on last build result.
   * @param planKey Plan key (required)
   * @return ApiResponse&lt;RestFavicon&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestFavicon> getFaviconForPlanWithHttpInfo(String planKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getFaviconForPlanRequestBuilder(planKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getFaviconForPlan", localVarResponse);
        }
        return new ApiResponse<RestFavicon>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestFavicon>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getFaviconForPlanRequestBuilder(String planKey) throws ApiException {
    // verify the required parameter 'planKey' is set
    if (planKey == null) {
      throw new ApiException(400, "Missing the required parameter 'planKey' when calling getFaviconForPlan");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan/favicon/{planKey}"
        .replace("{planKey}", ApiClient.urlEncode(planKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieves whether a given dark feature key is enabled for a given user. A dark feature is enabled for a user if its either enabled for this instance or for the specific user.
   * @param userName the user for which the status of the dark feature needs to be checked for (required)
   * @param key key of the dark feature (required)
   * @return RestUserDarkFeature
   * @throws ApiException if fails to make API call
   */
  public RestUserDarkFeature getForUser(String userName, String key) throws ApiException {
    ApiResponse<RestUserDarkFeature> localVarResponse = getForUserWithHttpInfo(userName, key);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieves whether a given dark feature key is enabled for a given user. A dark feature is enabled for a user if its either enabled for this instance or for the specific user.
   * @param userName the user for which the status of the dark feature needs to be checked for (required)
   * @param key key of the dark feature (required)
   * @return ApiResponse&lt;RestUserDarkFeature&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestUserDarkFeature> getForUserWithHttpInfo(String userName, String key) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getForUserRequestBuilder(userName, key);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getForUser", localVarResponse);
        }
        return new ApiResponse<RestUserDarkFeature>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestUserDarkFeature>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getForUserRequestBuilder(String userName, String key) throws ApiException {
    // verify the required parameter 'userName' is set
    if (userName == null) {
      throw new ApiException(400, "Missing the required parameter 'userName' when calling getForUser");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling getForUser");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/darkFeatures/{key}/user/{userName}"
        .replace("{userName}", ApiClient.urlEncode(userName.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve Bamboo server general configurations.
   * @return RestGeneralConfiguration
   * @throws ApiException if fails to make API call
   */
  public RestGeneralConfiguration getGeneralConfiguration() throws ApiException {
    ApiResponse<RestGeneralConfiguration> localVarResponse = getGeneralConfigurationWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve Bamboo server general configurations.
   * @return ApiResponse&lt;RestGeneralConfiguration&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestGeneralConfiguration> getGeneralConfigurationWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getGeneralConfigurationRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getGeneralConfiguration", localVarResponse);
        }
        return new ApiResponse<RestGeneralConfiguration>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestGeneralConfiguration>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getGeneralConfigurationRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/config/general";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a global variable definition. Value will be encrypted if variable name contains key word password.
   * @param variableId Id of the variable (required)
   * @return RestGlobalVariable
   * @throws ApiException if fails to make API call
   */
  public RestGlobalVariable getGlobalVariable(String variableId) throws ApiException {
    ApiResponse<RestGlobalVariable> localVarResponse = getGlobalVariableWithHttpInfo(variableId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a global variable definition. Value will be encrypted if variable name contains key word password.
   * @param variableId Id of the variable (required)
   * @return ApiResponse&lt;RestGlobalVariable&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestGlobalVariable> getGlobalVariableWithHttpInfo(String variableId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getGlobalVariableRequestBuilder(variableId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getGlobalVariable", localVarResponse);
        }
        return new ApiResponse<RestGlobalVariable>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestGlobalVariable>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getGlobalVariableRequestBuilder(String variableId) throws ApiException {
    // verify the required parameter 'variableId' is set
    if (variableId == null) {
      throw new ApiException(400, "Missing the required parameter 'variableId' when calling getGlobalVariable");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/globalVariables/{variableId}"
        .replace("{variableId}", ApiClient.urlEncode(variableId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Return collection of all global variables. Value of variables that contain password in name will be encrypted with salted hash.
   * @return RestGlobalVariables
   * @throws ApiException if fails to make API call
   */
  public RestGlobalVariables getGlobalVariables() throws ApiException {
    ApiResponse<RestGlobalVariables> localVarResponse = getGlobalVariablesWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Return collection of all global variables. Value of variables that contain password in name will be encrypted with salted hash.
   * @return ApiResponse&lt;RestGlobalVariables&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestGlobalVariables> getGlobalVariablesWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getGlobalVariablesRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getGlobalVariables", localVarResponse);
        }
        return new ApiResponse<RestGlobalVariables>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestGlobalVariables>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getGlobalVariablesRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/globalVariables";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a list of groups in Bamboo. The list can be filtered by some attributes, e.g. name. Name is mandatory. Since name is unique, the result only contains 0 or 1 entry.
   * @param name Name of group (required)
   * @return List&lt;RestGroup&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RestGroup> getGroup(String name) throws ApiException {
    ApiResponse<List<RestGroup>> localVarResponse = getGroupWithHttpInfo(name);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a list of groups in Bamboo. The list can be filtered by some attributes, e.g. name. Name is mandatory. Since name is unique, the result only contains 0 or 1 entry.
   * @param name Name of group (required)
   * @return ApiResponse&lt;List&lt;RestGroup&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RestGroup>> getGroupWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getGroupRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getGroup", localVarResponse);
        }
        return new ApiResponse<List<RestGroup>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RestGroup>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getGroupRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getGroup");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/security/groups";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get instant message server configuration.
   * @return RestIMServerConfiguration
   * @throws ApiException if fails to make API call
   */
  public RestIMServerConfiguration getIMServerConfig() throws ApiException {
    ApiResponse<RestIMServerConfiguration> localVarResponse = getIMServerConfigWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Get instant message server configuration.
   * @return ApiResponse&lt;RestIMServerConfiguration&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestIMServerConfiguration> getIMServerConfigWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getIMServerConfigRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getIMServerConfig", localVarResponse);
        }
        return new ApiResponse<RestIMServerConfiguration>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestIMServerConfiguration>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getIMServerConfigRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/config/imServer";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Chart url.
   * @param buildKeys Plan keys (optional)
   * @param reportKey Report key (optional)
   * @return RestChart
   * @throws ApiException if fails to make API call
   */
  public RestChart getImageUrl(String buildKeys, String reportKey) throws ApiException {
    ApiResponse<RestChart> localVarResponse = getImageUrlWithHttpInfo(buildKeys, reportKey);
    return localVarResponse.getData();
  }

  /**
   * 
   * Chart url.
   * @param buildKeys Plan keys (optional)
   * @param reportKey Report key (optional)
   * @return ApiResponse&lt;RestChart&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestChart> getImageUrlWithHttpInfo(String buildKeys, String reportKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getImageUrlRequestBuilder(buildKeys, reportKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getImageUrl", localVarResponse);
        }
        return new ApiResponse<RestChart>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestChart>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getImageUrlRequestBuilder(String buildKeys, String reportKey) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/chart";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "buildKeys";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("buildKeys", buildKeys));
    localVarQueryParameterBaseName = "reportKey";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("reportKey", reportKey));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Bamboo instance details.
   * @return RestInfo
   * @throws ApiException if fails to make API call
   */
  public RestInfo getInfo() throws ApiException {
    ApiResponse<RestInfo> localVarResponse = getInfoWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Bamboo instance details.
   * @return ApiResponse&lt;RestInfo&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestInfo> getInfoWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getInfoRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getInfo", localVarResponse);
        }
        return new ApiResponse<RestInfo>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestInfo>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getInfoRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/info";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Obtain logs from an EC2 instance. Note that this method will return the console output of the instance, not Bamboo agent logs.
   * @param instanceId id of the EC2 instance (required)
   * @return RestElasticInstanceLog
   * @throws ApiException if fails to make API call
   */
  public RestElasticInstanceLog getInstanceLog(String instanceId) throws ApiException {
    ApiResponse<RestElasticInstanceLog> localVarResponse = getInstanceLogWithHttpInfo(instanceId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Obtain logs from an EC2 instance. Note that this method will return the console output of the instance, not Bamboo agent logs.
   * @param instanceId id of the EC2 instance (required)
   * @return ApiResponse&lt;RestElasticInstanceLog&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestElasticInstanceLog> getInstanceLogWithHttpInfo(String instanceId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getInstanceLogRequestBuilder(instanceId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getInstanceLog", localVarResponse);
        }
        return new ApiResponse<RestElasticInstanceLog>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestElasticInstanceLog>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getInstanceLogRequestBuilder(String instanceId) throws ApiException {
    // verify the required parameter 'instanceId' is set
    if (instanceId == null) {
      throw new ApiException(400, "Missing the required parameter 'instanceId' when calling getInstanceLog");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/elasticInstances/instance/{instanceId}/logs"
        .replace("{instanceId}", ApiClient.urlEncode(instanceId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get all deployment projects associated with Jira issue key
   * @param issueKey Jira issue key (required)
   * @return RestJiraIssueRelatedDeploymentProjects
   * @throws ApiException if fails to make API call
   */
  public RestJiraIssueRelatedDeploymentProjects getJiraIssueStatusForProject(String issueKey) throws ApiException {
    ApiResponse<RestJiraIssueRelatedDeploymentProjects> localVarResponse = getJiraIssueStatusForProjectWithHttpInfo(issueKey);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get all deployment projects associated with Jira issue key
   * @param issueKey Jira issue key (required)
   * @return ApiResponse&lt;RestJiraIssueRelatedDeploymentProjects&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestJiraIssueRelatedDeploymentProjects> getJiraIssueStatusForProjectWithHttpInfo(String issueKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getJiraIssueStatusForProjectRequestBuilder(issueKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getJiraIssueStatusForProject", localVarResponse);
        }
        return new ApiResponse<RestJiraIssueRelatedDeploymentProjects>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestJiraIssueRelatedDeploymentProjects>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getJiraIssueStatusForProjectRequestBuilder(String issueKey) throws ApiException {
    // verify the required parameter 'issueKey' is set
    if (issueKey == null) {
      throw new ApiException(400, "Missing the required parameter 'issueKey' when calling getJiraIssueStatusForProject");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/issue-status/{issueKey}"
        .replace("{issueKey}", ApiClient.urlEncode(issueKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get deployment project environments and versions associated with Jira issue
   * @param issueKey Jira issue key (required)
   * @param deploymentProjectId Deployment project id (required)
   * @return RestDeploymentProjectStatusForJiraIssue
   * @throws ApiException if fails to make API call
   */
  public RestDeploymentProjectStatusForJiraIssue getJiraIssueStatusForProject1(String issueKey, String deploymentProjectId) throws ApiException {
    ApiResponse<RestDeploymentProjectStatusForJiraIssue> localVarResponse = getJiraIssueStatusForProject1WithHttpInfo(issueKey, deploymentProjectId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get deployment project environments and versions associated with Jira issue
   * @param issueKey Jira issue key (required)
   * @param deploymentProjectId Deployment project id (required)
   * @return ApiResponse&lt;RestDeploymentProjectStatusForJiraIssue&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestDeploymentProjectStatusForJiraIssue> getJiraIssueStatusForProject1WithHttpInfo(String issueKey, String deploymentProjectId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getJiraIssueStatusForProject1RequestBuilder(issueKey, deploymentProjectId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getJiraIssueStatusForProject1", localVarResponse);
        }
        return new ApiResponse<RestDeploymentProjectStatusForJiraIssue>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestDeploymentProjectStatusForJiraIssue>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getJiraIssueStatusForProject1RequestBuilder(String issueKey, String deploymentProjectId) throws ApiException {
    // verify the required parameter 'issueKey' is set
    if (issueKey == null) {
      throw new ApiException(400, "Missing the required parameter 'issueKey' when calling getJiraIssueStatusForProject1");
    }
    // verify the required parameter 'deploymentProjectId' is set
    if (deploymentProjectId == null) {
      throw new ApiException(400, "Missing the required parameter 'deploymentProjectId' when calling getJiraIssueStatusForProject1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/issue-status/{issueKey}/{deploymentProjectId}"
        .replace("{issueKey}", ApiClient.urlEncode(issueKey.toString()))
        .replace("{deploymentProjectId}", ApiClient.urlEncode(deploymentProjectId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Gets the collection of jobs currently scheduled to run.
   * @return List&lt;RestScheduledJob&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RestScheduledJob> getJobs() throws ApiException {
    ApiResponse<List<RestScheduledJob>> localVarResponse = getJobsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Gets the collection of jobs currently scheduled to run.
   * @return ApiResponse&lt;List&lt;RestScheduledJob&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RestScheduledJob>> getJobsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getJobsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getJobs", localVarResponse);
        }
        return new ApiResponse<List<RestScheduledJob>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RestScheduledJob>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getJobsRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/scheduler/jobs";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Provide list of the latest build results for top level plans visible for users.
   * @param includeAllStates return build results in all lifecycle states, including unknown and active states (optional)
   * @param continuable filter only results that may be continued (stopped on Manual Stage) (optional)
   * @param expand expands build result details on request. Possible values are: artifacts, comments, labels, jiraIssues, stages. stages expand is available only for top level plans. It allows to drill down to job results using stages.stage.results.result. All expand parameters should contain results.result prefix (optional)
   * @param issueKey Filter by comma separated list of Jira issue key related to result (optional)
   * @param maxResult maximum size for returned list (optional)
   * @param startIndex start index for results list (zero based) (optional)
   * @param label Filter by comma separated list of labels (optional)
   * @param buildstate filter results by state, valid values are Unknown, Successful, Failed (optional)
   * @param favourite Filters build results list to show only results for favourite plans. Works only for authenticated user (optional)
   * @param lifeCycleState return build results in given lifecycle state, valid values are Pending, Queued, InProgress, Finished, NotBuilt (multiple values can be separated by a comma) (optional)
   * @return RestResultsResults
   * @throws ApiException if fails to make API call
   */
  public RestResultsResults getLatestBuildResults(Boolean includeAllStates, Boolean continuable, String expand, String issueKey, Integer maxResult, Integer startIndex, String label, String buildstate, String favourite, String lifeCycleState) throws ApiException {
    ApiResponse<RestResultsResults> localVarResponse = getLatestBuildResultsWithHttpInfo(includeAllStates, continuable, expand, issueKey, maxResult, startIndex, label, buildstate, favourite, lifeCycleState);
    return localVarResponse.getData();
  }

  /**
   * 
   * Provide list of the latest build results for top level plans visible for users.
   * @param includeAllStates return build results in all lifecycle states, including unknown and active states (optional)
   * @param continuable filter only results that may be continued (stopped on Manual Stage) (optional)
   * @param expand expands build result details on request. Possible values are: artifacts, comments, labels, jiraIssues, stages. stages expand is available only for top level plans. It allows to drill down to job results using stages.stage.results.result. All expand parameters should contain results.result prefix (optional)
   * @param issueKey Filter by comma separated list of Jira issue key related to result (optional)
   * @param maxResult maximum size for returned list (optional)
   * @param startIndex start index for results list (zero based) (optional)
   * @param label Filter by comma separated list of labels (optional)
   * @param buildstate filter results by state, valid values are Unknown, Successful, Failed (optional)
   * @param favourite Filters build results list to show only results for favourite plans. Works only for authenticated user (optional)
   * @param lifeCycleState return build results in given lifecycle state, valid values are Pending, Queued, InProgress, Finished, NotBuilt (multiple values can be separated by a comma) (optional)
   * @return ApiResponse&lt;RestResultsResults&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestResultsResults> getLatestBuildResultsWithHttpInfo(Boolean includeAllStates, Boolean continuable, String expand, String issueKey, Integer maxResult, Integer startIndex, String label, String buildstate, String favourite, String lifeCycleState) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getLatestBuildResultsRequestBuilder(includeAllStates, continuable, expand, issueKey, maxResult, startIndex, label, buildstate, favourite, lifeCycleState);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getLatestBuildResults", localVarResponse);
        }
        return new ApiResponse<RestResultsResults>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestResultsResults>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getLatestBuildResultsRequestBuilder(Boolean includeAllStates, Boolean continuable, String expand, String issueKey, Integer maxResult, Integer startIndex, String label, String buildstate, String favourite, String lifeCycleState) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "includeAllStates";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("includeAllStates", includeAllStates));
    localVarQueryParameterBaseName = "continuable";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("continuable", continuable));
    localVarQueryParameterBaseName = "expand";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("expand", expand));
    localVarQueryParameterBaseName = "issueKey";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("issueKey", issueKey));
    localVarQueryParameterBaseName = "max-result";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-result", maxResult));
    localVarQueryParameterBaseName = "start-index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start-index", startIndex));
    localVarQueryParameterBaseName = "label";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label", label));
    localVarQueryParameterBaseName = "buildstate";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("buildstate", buildstate));
    localVarQueryParameterBaseName = "favourite";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("favourite", favourite));
    localVarQueryParameterBaseName = "lifeCycleState";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("lifeCycleState", lifeCycleState));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Provide list of latest build results for top level plans for specified project. List of results is limited to plans visible for user.
   * @param projectKey project key to filter plan result list (required)
   * @param includeAllStates return build results in all lifecycle states, including unknown and active states (optional)
   * @param continuable filter only results that may be continued (stopped on Manual Stage) (optional)
   * @param expand expands build result details on request. Possible values are: artifacts, comments, labels, jiraIssues, stages. stages expand is available only for top level plans. It allows to drill down to job results using stages.stage.results.result. All expand parameters should contain results.result prefix (optional)
   * @param issueKey Filter by comma separated list of Jira issue key related to result (optional)
   * @param maxResult Maximum size for returned list (optional)
   * @param startIndex Start index for results list (zero based) (optional)
   * @param label Filter by comma separated list of labels (optional)
   * @param buildstate filter results by state, valid values are Unknown, Successful, Failed (optional)
   * @param favourite Filters build results list to show only results for favourite plans. Works only for authenticated user (optional)
   * @param lifeCycleState return build results in given lifecycle state, valid values are Pending, Queued, InProgress, Finished, NotBuilt (multiple values can be separated by a comma) (optional)
   * @return RestResultsResults
   * @throws ApiException if fails to make API call
   */
  public RestResultsResults getLatestBuildResultsForProject(String projectKey, Boolean includeAllStates, Boolean continuable, String expand, String issueKey, Integer maxResult, Integer startIndex, String label, String buildstate, String favourite, String lifeCycleState) throws ApiException {
    ApiResponse<RestResultsResults> localVarResponse = getLatestBuildResultsForProjectWithHttpInfo(projectKey, includeAllStates, continuable, expand, issueKey, maxResult, startIndex, label, buildstate, favourite, lifeCycleState);
    return localVarResponse.getData();
  }

  /**
   * 
   * Provide list of latest build results for top level plans for specified project. List of results is limited to plans visible for user.
   * @param projectKey project key to filter plan result list (required)
   * @param includeAllStates return build results in all lifecycle states, including unknown and active states (optional)
   * @param continuable filter only results that may be continued (stopped on Manual Stage) (optional)
   * @param expand expands build result details on request. Possible values are: artifacts, comments, labels, jiraIssues, stages. stages expand is available only for top level plans. It allows to drill down to job results using stages.stage.results.result. All expand parameters should contain results.result prefix (optional)
   * @param issueKey Filter by comma separated list of Jira issue key related to result (optional)
   * @param maxResult Maximum size for returned list (optional)
   * @param startIndex Start index for results list (zero based) (optional)
   * @param label Filter by comma separated list of labels (optional)
   * @param buildstate filter results by state, valid values are Unknown, Successful, Failed (optional)
   * @param favourite Filters build results list to show only results for favourite plans. Works only for authenticated user (optional)
   * @param lifeCycleState return build results in given lifecycle state, valid values are Pending, Queued, InProgress, Finished, NotBuilt (multiple values can be separated by a comma) (optional)
   * @return ApiResponse&lt;RestResultsResults&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestResultsResults> getLatestBuildResultsForProjectWithHttpInfo(String projectKey, Boolean includeAllStates, Boolean continuable, String expand, String issueKey, Integer maxResult, Integer startIndex, String label, String buildstate, String favourite, String lifeCycleState) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getLatestBuildResultsForProjectRequestBuilder(projectKey, includeAllStates, continuable, expand, issueKey, maxResult, startIndex, label, buildstate, favourite, lifeCycleState);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getLatestBuildResultsForProject", localVarResponse);
        }
        return new ApiResponse<RestResultsResults>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestResultsResults>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getLatestBuildResultsForProjectRequestBuilder(String projectKey, Boolean includeAllStates, Boolean continuable, String expand, String issueKey, Integer maxResult, Integer startIndex, String label, String buildstate, String favourite, String lifeCycleState) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling getLatestBuildResultsForProject");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/result/{projectKey}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "includeAllStates";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("includeAllStates", includeAllStates));
    localVarQueryParameterBaseName = "continuable";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("continuable", continuable));
    localVarQueryParameterBaseName = "expand";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("expand", expand));
    localVarQueryParameterBaseName = "issueKey";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("issueKey", issueKey));
    localVarQueryParameterBaseName = "max-result";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-result", maxResult));
    localVarQueryParameterBaseName = "start-index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start-index", startIndex));
    localVarQueryParameterBaseName = "label";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("label", label));
    localVarQueryParameterBaseName = "buildstate";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("buildstate", buildstate));
    localVarQueryParameterBaseName = "favourite";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("favourite", favourite));
    localVarQueryParameterBaseName = "lifeCycleState";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("lifeCycleState", lifeCycleState));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get current status of deployment version.
   * @param deploymentVersionId Deployment version id (required)
   * @return RestDeploymentVersionStatus
   * @throws ApiException if fails to make API call
   */
  public RestDeploymentVersionStatus getLatestVersionStatus(String deploymentVersionId) throws ApiException {
    ApiResponse<RestDeploymentVersionStatus> localVarResponse = getLatestVersionStatusWithHttpInfo(deploymentVersionId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get current status of deployment version.
   * @param deploymentVersionId Deployment version id (required)
   * @return ApiResponse&lt;RestDeploymentVersionStatus&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestDeploymentVersionStatus> getLatestVersionStatusWithHttpInfo(String deploymentVersionId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getLatestVersionStatusRequestBuilder(deploymentVersionId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getLatestVersionStatus", localVarResponse);
        }
        return new ApiResponse<RestDeploymentVersionStatus>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestDeploymentVersionStatus>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getLatestVersionStatusRequestBuilder(String deploymentVersionId) throws ApiException {
    // verify the required parameter 'deploymentVersionId' is set
    if (deploymentVersionId == null) {
      throw new ApiException(400, "Missing the required parameter 'deploymentVersionId' when calling getLatestVersionStatus");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/version/{deploymentVersionId}/status"
        .replace("{deploymentVersionId}", ApiClient.urlEncode(deploymentVersionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve the current mail server configuration.
   * @return RestMailConfiguration
   * @throws ApiException if fails to make API call
   */
  public RestMailConfiguration getMailConfiguration() throws ApiException {
    ApiResponse<RestMailConfiguration> localVarResponse = getMailConfigurationWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve the current mail server configuration.
   * @return ApiResponse&lt;RestMailConfiguration&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestMailConfiguration> getMailConfigurationWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getMailConfigurationRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getMailConfiguration", localVarResponse);
        }
        return new ApiResponse<RestMailConfiguration>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestMailConfiguration>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getMailConfigurationRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/config/mailServer";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get broken builds for logged in user.
   * @return GetBrokenBuildsForUser200Response
   * @throws ApiException if fails to make API call
   */
  public GetBrokenBuildsForUser200Response getMyBrokenBuilds() throws ApiException {
    ApiResponse<GetBrokenBuildsForUser200Response> localVarResponse = getMyBrokenBuildsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Get broken builds for logged in user.
   * @return ApiResponse&lt;GetBrokenBuildsForUser200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetBrokenBuildsForUser200Response> getMyBrokenBuildsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getMyBrokenBuildsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getMyBrokenBuilds", localVarResponse);
        }
        return new ApiResponse<GetBrokenBuildsForUser200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetBrokenBuildsForUser200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getMyBrokenBuildsRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/responsibility/latest/brokenBuild/myBrokenBuilds";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get next deployment version name.
   * @param deploymentProjectId Deployment project id (required)
   * @param resultKey Build result key (optional)
   * @return RestNamingPreview
   * @throws ApiException if fails to make API call
   */
  public RestNamingPreview getNextDeploymentVersions(String deploymentProjectId, String resultKey) throws ApiException {
    ApiResponse<RestNamingPreview> localVarResponse = getNextDeploymentVersionsWithHttpInfo(deploymentProjectId, resultKey);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get next deployment version name.
   * @param deploymentProjectId Deployment project id (required)
   * @param resultKey Build result key (optional)
   * @return ApiResponse&lt;RestNamingPreview&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestNamingPreview> getNextDeploymentVersionsWithHttpInfo(String deploymentProjectId, String resultKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getNextDeploymentVersionsRequestBuilder(deploymentProjectId, resultKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getNextDeploymentVersions", localVarResponse);
        }
        return new ApiResponse<RestNamingPreview>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestNamingPreview>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getNextDeploymentVersionsRequestBuilder(String deploymentProjectId, String resultKey) throws ApiException {
    // verify the required parameter 'deploymentProjectId' is set
    if (deploymentProjectId == null) {
      throw new ApiException(400, "Missing the required parameter 'deploymentProjectId' when calling getNextDeploymentVersions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/projectVersioning/{deploymentProjectId}/nextVersion"
        .replace("{deploymentProjectId}", ApiClient.urlEncode(deploymentProjectId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "resultKey";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("resultKey", resultKey));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get nodes status.
   * @return RestServerNodesInfo
   * @throws ApiException if fails to make API call
   */
  public RestServerNodesInfo getNodesStatus() throws ApiException {
    ApiResponse<RestServerNodesInfo> localVarResponse = getNodesStatusWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Get nodes status.
   * @return ApiResponse&lt;RestServerNodesInfo&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestServerNodesInfo> getNodesStatusWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getNodesStatusRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getNodesStatus", localVarResponse);
        }
        return new ApiResponse<RestServerNodesInfo>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestServerNodesInfo>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getNodesStatusRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/server/nodes";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get deployment project environments.
   * @param projectId Deployment project id (required)
   * @param filter Environment name filter (optional)
   * @param limit Page request size (optional)
   * @param start Page request start index (optional)
   * @return GetDeploymentProjects200Response
   * @throws ApiException if fails to make API call
   */
  public GetDeploymentProjects200Response getPaginateDeploymentProject(String projectId, String filter, Integer limit, String start) throws ApiException {
    ApiResponse<GetDeploymentProjects200Response> localVarResponse = getPaginateDeploymentProjectWithHttpInfo(projectId, filter, limit, start);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get deployment project environments.
   * @param projectId Deployment project id (required)
   * @param filter Environment name filter (optional)
   * @param limit Page request size (optional)
   * @param start Page request start index (optional)
   * @return ApiResponse&lt;GetDeploymentProjects200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetDeploymentProjects200Response> getPaginateDeploymentProjectWithHttpInfo(String projectId, String filter, Integer limit, String start) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPaginateDeploymentProjectRequestBuilder(projectId, filter, limit, start);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPaginateDeploymentProject", localVarResponse);
        }
        return new ApiResponse<GetDeploymentProjects200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetDeploymentProjects200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPaginateDeploymentProjectRequestBuilder(String projectId, String filter, Integer limit, String start) throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling getPaginateDeploymentProject");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/dashboard/paginate/{projectId}"
        .replace("{projectId}", ApiClient.urlEncode(projectId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieves paginated project repositories specified by the project key.
   * @param projectKey project key (required)
   * @param filter filter to retrieve matching results (optional)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return GetPaginatedProjectRepositories200Response
   * @throws ApiException if fails to make API call
   */
  public GetPaginatedProjectRepositories200Response getPaginatedProjectRepositories(String projectKey, String filter, Integer limit, Integer start) throws ApiException {
    ApiResponse<GetPaginatedProjectRepositories200Response> localVarResponse = getPaginatedProjectRepositoriesWithHttpInfo(projectKey, filter, limit, start);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieves paginated project repositories specified by the project key.
   * @param projectKey project key (required)
   * @param filter filter to retrieve matching results (optional)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return ApiResponse&lt;GetPaginatedProjectRepositories200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetPaginatedProjectRepositories200Response> getPaginatedProjectRepositoriesWithHttpInfo(String projectKey, String filter, Integer limit, Integer start) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPaginatedProjectRepositoriesRequestBuilder(projectKey, filter, limit, start);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPaginatedProjectRepositories", localVarResponse);
        }
        return new ApiResponse<GetPaginatedProjectRepositories200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetPaginatedProjectRepositories200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPaginatedProjectRepositoriesRequestBuilder(String projectKey, String filter, Integer limit, Integer start) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling getPaginatedProjectRepositories");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/project/{projectKey}/repositories"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieves paginated shared credentials for the project specified by the project key.
   * @param projectKey project key (required)
   * @param filter filter to retrieve matching results (optional)
   * @param limit Page request size. Default size is 25. Max value is 500 (optional)
   * @param start Page request start index (optional)
   * @return GetPaginatedProjectSharedCredentials200Response
   * @throws ApiException if fails to make API call
   */
  public GetPaginatedProjectSharedCredentials200Response getPaginatedProjectSharedCredentials(String projectKey, String filter, Integer limit, Integer start) throws ApiException {
    ApiResponse<GetPaginatedProjectSharedCredentials200Response> localVarResponse = getPaginatedProjectSharedCredentialsWithHttpInfo(projectKey, filter, limit, start);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieves paginated shared credentials for the project specified by the project key.
   * @param projectKey project key (required)
   * @param filter filter to retrieve matching results (optional)
   * @param limit Page request size. Default size is 25. Max value is 500 (optional)
   * @param start Page request start index (optional)
   * @return ApiResponse&lt;GetPaginatedProjectSharedCredentials200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetPaginatedProjectSharedCredentials200Response> getPaginatedProjectSharedCredentialsWithHttpInfo(String projectKey, String filter, Integer limit, Integer start) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPaginatedProjectSharedCredentialsRequestBuilder(projectKey, filter, limit, start);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPaginatedProjectSharedCredentials", localVarResponse);
        }
        return new ApiResponse<GetPaginatedProjectSharedCredentials200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetPaginatedProjectSharedCredentials200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPaginatedProjectSharedCredentialsRequestBuilder(String projectKey, String filter, Integer limit, Integer start) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling getPaginatedProjectSharedCredentials");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/project/{projectKey}/sharedCredentials"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get plan summary.
   * @param buildKeys Single plan key (optional)
   * @return RestChart
   * @throws ApiException if fails to make API call
   */
  public RestChart getPlanSummary(String buildKeys) throws ApiException {
    ApiResponse<RestChart> localVarResponse = getPlanSummaryWithHttpInfo(buildKeys);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get plan summary.
   * @param buildKeys Single plan key (optional)
   * @return ApiResponse&lt;RestChart&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestChart> getPlanSummaryWithHttpInfo(String buildKeys) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPlanSummaryRequestBuilder(buildKeys);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPlanSummary", localVarResponse);
        }
        return new ApiResponse<RestChart>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestChart>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPlanSummaryRequestBuilder(String buildKeys) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/chart/planSummary";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "buildKeys";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("buildKeys", buildKeys));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get information for project specified as project key.  - plans - list of plans for project  - plans.plan - list of plans with plan details (only plans visible - READ permission for user)  - plans.plan.actions - list of plans with plan details and actions available for user for plan  
   * @param projectKey project key (required)
   * @param expand Possible expand parameters: plans, plans.plan, plans.plan.actions (optional)
   * @param showEmpty flag to return project without plans, *true* by default (optional)
   * @return RestProject
   * @throws ApiException if fails to make API call
   */
  public RestProject getProject(String projectKey, String expand, Boolean showEmpty) throws ApiException {
    ApiResponse<RestProject> localVarResponse = getProjectWithHttpInfo(projectKey, expand, showEmpty);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get information for project specified as project key.  - plans - list of plans for project  - plans.plan - list of plans with plan details (only plans visible - READ permission for user)  - plans.plan.actions - list of plans with plan details and actions available for user for plan  
   * @param projectKey project key (required)
   * @param expand Possible expand parameters: plans, plans.plan, plans.plan.actions (optional)
   * @param showEmpty flag to return project without plans, *true* by default (optional)
   * @return ApiResponse&lt;RestProject&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestProject> getProjectWithHttpInfo(String projectKey, String expand, Boolean showEmpty) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getProjectRequestBuilder(projectKey, expand, showEmpty);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getProject", localVarResponse);
        }
        return new ApiResponse<RestProject>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestProject>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getProjectRequestBuilder(String projectKey, String expand, Boolean showEmpty) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling getProject");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/project/{projectKey}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "expand";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("expand", expand));
    localVarQueryParameterBaseName = "showEmpty";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("showEmpty", showEmpty));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve the project variable by given name.
   * @param projectKey project key (required)
   * @param variableName variable name (required)
   * @return RestVariable
   * @throws ApiException if fails to make API call
   */
  public RestVariable getProjectVariable(String projectKey, String variableName) throws ApiException {
    ApiResponse<RestVariable> localVarResponse = getProjectVariableWithHttpInfo(projectKey, variableName);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve the project variable by given name.
   * @param projectKey project key (required)
   * @param variableName variable name (required)
   * @return ApiResponse&lt;RestVariable&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestVariable> getProjectVariableWithHttpInfo(String projectKey, String variableName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getProjectVariableRequestBuilder(projectKey, variableName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getProjectVariable", localVarResponse);
        }
        return new ApiResponse<RestVariable>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestVariable>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getProjectVariableRequestBuilder(String projectKey, String variableName) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling getProjectVariable");
    }
    // verify the required parameter 'variableName' is set
    if (variableName == null) {
      throw new ApiException(400, "Missing the required parameter 'variableName' when calling getProjectVariable");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/project/{projectKey}/variable/{variableName}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{variableName}", ApiClient.urlEncode(variableName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve the list of all variables for a project.
   * @param projectKey project key (required)
   * @return List&lt;RestVariable&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RestVariable> getProjectVariables(String projectKey) throws ApiException {
    ApiResponse<List<RestVariable>> localVarResponse = getProjectVariablesWithHttpInfo(projectKey);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve the list of all variables for a project.
   * @param projectKey project key (required)
   * @return ApiResponse&lt;List&lt;RestVariable&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RestVariable>> getProjectVariablesWithHttpInfo(String projectKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getProjectVariablesRequestBuilder(projectKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getProjectVariables", localVarResponse);
        }
        return new ApiResponse<List<RestVariable>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RestVariable>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getProjectVariablesRequestBuilder(String projectKey) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling getProjectVariables");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/project/{projectKey}/variables"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/xml, application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * List all projects defined in Bamboo. Projects without any plan are not listed by default, unless _showEmpty_ query param is set to true.  - projects - list of projects projects.project - list of projects with project details  - projects.project.plans - list of project details and plans for project  - projects.project.plans.plan - list of project details and plans for project with plan details
   * @param expand Possible expand parameters: projects, projects.project.plans, projects.project.plans.plan (optional)
   * @param showEmpty flag to display projects without plans (optional)
   * @return RestProjects
   * @throws ApiException if fails to make API call
   */
  public RestProjects getProjects(String expand, Boolean showEmpty) throws ApiException {
    ApiResponse<RestProjects> localVarResponse = getProjectsWithHttpInfo(expand, showEmpty);
    return localVarResponse.getData();
  }

  /**
   * 
   * List all projects defined in Bamboo. Projects without any plan are not listed by default, unless _showEmpty_ query param is set to true.  - projects - list of projects projects.project - list of projects with project details  - projects.project.plans - list of project details and plans for project  - projects.project.plans.plan - list of project details and plans for project with plan details
   * @param expand Possible expand parameters: projects, projects.project.plans, projects.project.plans.plan (optional)
   * @param showEmpty flag to display projects without plans (optional)
   * @return ApiResponse&lt;RestProjects&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestProjects> getProjectsWithHttpInfo(String expand, Boolean showEmpty) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getProjectsRequestBuilder(expand, showEmpty);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getProjects", localVarResponse);
        }
        return new ApiResponse<RestProjects>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestProjects>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getProjectsRequestBuilder(String expand, Boolean showEmpty) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/project";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "expand";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("expand", expand));
    localVarQueryParameterBaseName = "showEmpty";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("showEmpty", showEmpty));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve Bamboo quarantine settings.
   * @return RestQuarantineConfig
   * @throws ApiException if fails to make API call
   */
  public RestQuarantineConfig getQuarantineSettings() throws ApiException {
    ApiResponse<RestQuarantineConfig> localVarResponse = getQuarantineSettingsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve Bamboo quarantine settings.
   * @return ApiResponse&lt;RestQuarantineConfig&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestQuarantineConfig> getQuarantineSettingsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getQuarantineSettingsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getQuarantineSettings", localVarResponse);
        }
        return new ApiResponse<RestQuarantineConfig>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestQuarantineConfig>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getQuarantineSettingsRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/config/quarantine";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get a single quick filter by id.
   * @param id Quick filter id (required)
   * @return RestQuickFilter
   * @throws ApiException if fails to make API call
   */
  public RestQuickFilter getQuickFilter(Long id) throws ApiException {
    ApiResponse<RestQuickFilter> localVarResponse = getQuickFilterWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get a single quick filter by id.
   * @param id Quick filter id (required)
   * @return ApiResponse&lt;RestQuickFilter&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestQuickFilter> getQuickFilterWithHttpInfo(Long id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getQuickFilterRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getQuickFilter", localVarResponse);
        }
        return new ApiResponse<RestQuickFilter>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestQuickFilter>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getQuickFilterRequestBuilder(Long id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getQuickFilter");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/quickFilter/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Obtain a list of quick filters defined for this Bamboo instance.
   * @param configured When set, the list will only contain filters which have or have not been properly configured. Quick filters are considered configured when they have rules set up (optional)
   * @return List&lt;RestQuickFilter&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RestQuickFilter> getQuickFilters(Boolean configured) throws ApiException {
    ApiResponse<List<RestQuickFilter>> localVarResponse = getQuickFiltersWithHttpInfo(configured);
    return localVarResponse.getData();
  }

  /**
   * 
   * Obtain a list of quick filters defined for this Bamboo instance.
   * @param configured When set, the list will only contain filters which have or have not been properly configured. Quick filters are considered configured when they have rules set up (optional)
   * @return ApiResponse&lt;List&lt;RestQuickFilter&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RestQuickFilter>> getQuickFiltersWithHttpInfo(Boolean configured) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getQuickFiltersRequestBuilder(configured);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getQuickFilters", localVarResponse);
        }
        return new ApiResponse<List<RestQuickFilter>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RestQuickFilter>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getQuickFiltersRequestBuilder(Boolean configured) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/quickFilter";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "configured";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("configured", configured));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Kicks off a reindex.  Requires system admin permissions to perform this reindex.
   * @return ReindexBean
   * @throws ApiException if fails to make API call
   */
  public ReindexBean getReindexInfo() throws ApiException {
    ApiResponse<ReindexBean> localVarResponse = getReindexInfoWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Kicks off a reindex.  Requires system admin permissions to perform this reindex.
   * @return ApiResponse&lt;ReindexBean&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ReindexBean> getReindexInfoWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getReindexInfoRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getReindexInfo", localVarResponse);
        }
        return new ApiResponse<ReindexBean>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReindexBean>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getReindexInfoRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/reindex";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve the remote agent configuration
   * @return RestRemoteAgentConfiguration
   * @throws ApiException if fails to make API call
   */
  public RestRemoteAgentConfiguration getRemoteAgentConfiguration() throws ApiException {
    ApiResponse<RestRemoteAgentConfiguration> localVarResponse = getRemoteAgentConfigurationWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve the remote agent configuration
   * @return ApiResponse&lt;RestRemoteAgentConfiguration&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestRemoteAgentConfiguration> getRemoteAgentConfigurationWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getRemoteAgentConfigurationRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getRemoteAgentConfiguration", localVarResponse);
        }
        return new ApiResponse<RestRemoteAgentConfiguration>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestRemoteAgentConfiguration>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getRemoteAgentConfigurationRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/config/remoteAgentSupport";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Provides a list of all agent authentication statuses.
   * @param online filter only remote or only approved agents (optional)
   * @return List&lt;RestBuildAgent&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RestBuildAgent> getRemoteAgents(Boolean online) throws ApiException {
    ApiResponse<List<RestBuildAgent>> localVarResponse = getRemoteAgentsWithHttpInfo(online);
    return localVarResponse.getData();
  }

  /**
   * 
   * Provides a list of all agent authentication statuses.
   * @param online filter only remote or only approved agents (optional)
   * @return ApiResponse&lt;List&lt;RestBuildAgent&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RestBuildAgent>> getRemoteAgentsWithHttpInfo(Boolean online) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getRemoteAgentsRequestBuilder(online);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getRemoteAgents", localVarResponse);
        }
        return new ApiResponse<List<RestBuildAgent>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RestBuildAgent>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getRemoteAgentsRequestBuilder(Boolean online) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/agent/remote";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "online";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("online", online));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get responsible users for broken build result or plan.
   * @param planResultKeyOrPlanKey Chain result or plan key, e.g. PROJ-PLAN or PROJ-PLAN-2 (required)
   * @return RestResponsibleUsers
   * @throws ApiException if fails to make API call
   */
  public RestResponsibleUsers getResponsibleForPlanResult(String planResultKeyOrPlanKey) throws ApiException {
    ApiResponse<RestResponsibleUsers> localVarResponse = getResponsibleForPlanResultWithHttpInfo(planResultKeyOrPlanKey);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get responsible users for broken build result or plan.
   * @param planResultKeyOrPlanKey Chain result or plan key, e.g. PROJ-PLAN or PROJ-PLAN-2 (required)
   * @return ApiResponse&lt;RestResponsibleUsers&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestResponsibleUsers> getResponsibleForPlanResultWithHttpInfo(String planResultKeyOrPlanKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getResponsibleForPlanResultRequestBuilder(planResultKeyOrPlanKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getResponsibleForPlanResult", localVarResponse);
        }
        return new ApiResponse<RestResponsibleUsers>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestResponsibleUsers>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getResponsibleForPlanResultRequestBuilder(String planResultKeyOrPlanKey) throws ApiException {
    // verify the required parameter 'planResultKeyOrPlanKey' is set
    if (planResultKeyOrPlanKey == null) {
      throw new ApiException(400, "Missing the required parameter 'planResultKeyOrPlanKey' when calling getResponsibleForPlanResult");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/responsibility/latest/brokenBuild/{planResultKeyOrPlanKey}"
        .replace("{planResultKeyOrPlanKey}", ApiClient.urlEncode(planResultKeyOrPlanKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieves the current elastic configuration.
   * @return RestElasticConfiguration
   * @throws ApiException if fails to make API call
   */
  public RestElasticConfiguration getRestElasticConfiguration() throws ApiException {
    ApiResponse<RestElasticConfiguration> localVarResponse = getRestElasticConfigurationWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieves the current elastic configuration.
   * @return ApiResponse&lt;RestElasticConfiguration&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestElasticConfiguration> getRestElasticConfigurationWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getRestElasticConfigurationRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getRestElasticConfiguration", localVarResponse);
        }
        return new ApiResponse<RestElasticConfiguration>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestElasticConfiguration>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getRestElasticConfigurationRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/elastic/config";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Provide runtime information for currently executing build result. The key difference to other methods is that method is optimized to provide information available in memory only, so no database calls are made. The information provided is not as wide as for finished results, but the call is optimized for speed.
   * @param projectKey project key (required)
   * @param buildKey plan key (must be a plan key, not a job key) (required)
   * @param buildNumber Build number (numeric value only, &#39;latest&#39; keyword is not supported for this method) (required)
   * @param expand expands build result details on request. Possible values are: stages.stage (optional)
   * @return RestResultStatus
   * @throws ApiException if fails to make API call
   */
  public RestResultStatus getResultStatus(String projectKey, String buildKey, String buildNumber, String expand) throws ApiException {
    ApiResponse<RestResultStatus> localVarResponse = getResultStatusWithHttpInfo(projectKey, buildKey, buildNumber, expand);
    return localVarResponse.getData();
  }

  /**
   * 
   * Provide runtime information for currently executing build result. The key difference to other methods is that method is optimized to provide information available in memory only, so no database calls are made. The information provided is not as wide as for finished results, but the call is optimized for speed.
   * @param projectKey project key (required)
   * @param buildKey plan key (must be a plan key, not a job key) (required)
   * @param buildNumber Build number (numeric value only, &#39;latest&#39; keyword is not supported for this method) (required)
   * @param expand expands build result details on request. Possible values are: stages.stage (optional)
   * @return ApiResponse&lt;RestResultStatus&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestResultStatus> getResultStatusWithHttpInfo(String projectKey, String buildKey, String buildNumber, String expand) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getResultStatusRequestBuilder(projectKey, buildKey, buildNumber, expand);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getResultStatus", localVarResponse);
        }
        return new ApiResponse<RestResultStatus>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestResultStatus>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getResultStatusRequestBuilder(String projectKey, String buildKey, String buildNumber, String expand) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling getResultStatus");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling getResultStatus");
    }
    // verify the required parameter 'buildNumber' is set
    if (buildNumber == null) {
      throw new ApiException(400, "Missing the required parameter 'buildNumber' when calling getResultStatus");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/result/status/{projectKey}-{buildKey}-{buildNumber}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()))
        .replace("{buildNumber}", ApiClient.urlEncode(buildNumber.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "expand";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("expand", expand));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Fetch list of RSS repositories which can use given repository by RSS code.
   * @param repositoryId Target repository id (required)
   * @return List&lt;RestRepository&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RestRepository> getRssRepositoriesAllowedToAccessRepository(Long repositoryId) throws ApiException {
    ApiResponse<List<RestRepository>> localVarResponse = getRssRepositoriesAllowedToAccessRepositoryWithHttpInfo(repositoryId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Fetch list of RSS repositories which can use given repository by RSS code.
   * @param repositoryId Target repository id (required)
   * @return ApiResponse&lt;List&lt;RestRepository&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RestRepository>> getRssRepositoriesAllowedToAccessRepositoryWithHttpInfo(Long repositoryId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getRssRepositoriesAllowedToAccessRepositoryRequestBuilder(repositoryId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getRssRepositoriesAllowedToAccessRepository", localVarResponse);
        }
        return new ApiResponse<List<RestRepository>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RestRepository>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getRssRepositoriesAllowedToAccessRepositoryRequestBuilder(Long repositoryId) throws ApiException {
    // verify the required parameter 'repositoryId' is set
    if (repositoryId == null) {
      throw new ApiException(400, "Missing the required parameter 'repositoryId' when calling getRssRepositoriesAllowedToAccessRepository");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/repository/{repositoryId}/rssrepository"
        .replace("{repositoryId}", ApiClient.urlEncode(repositoryId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve configuration of S3 Artifact Handler.
   * @return RestArtifactHandler
   * @throws ApiException if fails to make API call
   */
  public RestArtifactHandler getS3ArtifactHandler() throws ApiException {
    ApiResponse<RestArtifactHandler> localVarResponse = getS3ArtifactHandlerWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve configuration of S3 Artifact Handler.
   * @return ApiResponse&lt;RestArtifactHandler&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestArtifactHandler> getS3ArtifactHandlerWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getS3ArtifactHandlerRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getS3ArtifactHandler", localVarResponse);
        }
        return new ApiResponse<RestArtifactHandler>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestArtifactHandler>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getS3ArtifactHandlerRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/artifactHandlers/s3";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve security settings.
   * @return RestSecuritySettings
   * @throws ApiException if fails to make API call
   */
  public RestSecuritySettings getSecuritySettings() throws ApiException {
    ApiResponse<RestSecuritySettings> localVarResponse = getSecuritySettingsWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve security settings.
   * @return ApiResponse&lt;RestSecuritySettings&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestSecuritySettings> getSecuritySettingsWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSecuritySettingsRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSecuritySettings", localVarResponse);
        }
        return new ApiResponse<RestSecuritySettings>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestSecuritySettings>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSecuritySettingsRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/security/settings";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve configuration of SFTP Artifact Handler.
   * @return SimpleRestArtifactHandler
   * @throws ApiException if fails to make API call
   */
  public SimpleRestArtifactHandler getSftpArtifactHandler() throws ApiException {
    ApiResponse<SimpleRestArtifactHandler> localVarResponse = getSftpArtifactHandlerWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve configuration of SFTP Artifact Handler.
   * @return ApiResponse&lt;SimpleRestArtifactHandler&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SimpleRestArtifactHandler> getSftpArtifactHandlerWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSftpArtifactHandlerRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSftpArtifactHandler", localVarResponse);
        }
        return new ApiResponse<SimpleRestArtifactHandler>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SimpleRestArtifactHandler>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSftpArtifactHandlerRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/artifactHandlers/sftp";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Resource providing status of RSS processing for a given repository and optional branch.
   * @param repositoryId id of the linked repository which stores Bamboo Specs (required)
   * @param maxResult Maximum number of spec status entries returned in the response (optional, default to 20)
   * @param branch Optional branch of the repository. Works only if repository supports divergent branches (optional)
   * @return RestVcsLocationSpecsStatus
   * @throws ApiException if fails to make API call
   */
  public RestVcsLocationSpecsStatus getSpecsDetectionStatus(Long repositoryId, Integer maxResult, String branch) throws ApiException {
    ApiResponse<RestVcsLocationSpecsStatus> localVarResponse = getSpecsDetectionStatusWithHttpInfo(repositoryId, maxResult, branch);
    return localVarResponse.getData();
  }

  /**
   * 
   * Resource providing status of RSS processing for a given repository and optional branch.
   * @param repositoryId id of the linked repository which stores Bamboo Specs (required)
   * @param maxResult Maximum number of spec status entries returned in the response (optional, default to 20)
   * @param branch Optional branch of the repository. Works only if repository supports divergent branches (optional)
   * @return ApiResponse&lt;RestVcsLocationSpecsStatus&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestVcsLocationSpecsStatus> getSpecsDetectionStatusWithHttpInfo(Long repositoryId, Integer maxResult, String branch) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSpecsDetectionStatusRequestBuilder(repositoryId, maxResult, branch);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getSpecsDetectionStatus", localVarResponse);
        }
        return new ApiResponse<RestVcsLocationSpecsStatus>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestVcsLocationSpecsStatus>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSpecsDetectionStatusRequestBuilder(Long repositoryId, Integer maxResult, String branch) throws ApiException {
    // verify the required parameter 'repositoryId' is set
    if (repositoryId == null) {
      throw new ApiException(400, "Missing the required parameter 'repositoryId' when calling getSpecsDetectionStatus");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/repository/{repositoryId}/scan/status"
        .replace("{repositoryId}", ApiClient.urlEncode(repositoryId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "max-result";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-result", maxResult));
    localVarQueryParameterBaseName = "branch";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("branch", branch));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieves build and deployment expiry status.
   * @return RestCombinedExpiryStatus
   * @throws ApiException if fails to make API call
   */
  public RestCombinedExpiryStatus getStatus() throws ApiException {
    ApiResponse<RestCombinedExpiryStatus> localVarResponse = getStatusWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieves build and deployment expiry status.
   * @return ApiResponse&lt;RestCombinedExpiryStatus&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestCombinedExpiryStatus> getStatusWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getStatusRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getStatus", localVarResponse);
        }
        return new ApiResponse<RestCombinedExpiryStatus>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestCombinedExpiryStatus>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getStatusRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/expiry/status";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get server status.
   * @return RestServerStatusInfo
   * @throws ApiException if fails to make API call
   */
  public RestServerStatusInfo getStatus1() throws ApiException {
    ApiResponse<RestServerStatusInfo> localVarResponse = getStatus1WithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Get server status.
   * @return ApiResponse&lt;RestServerStatusInfo&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestServerStatusInfo> getStatus1WithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getStatus1RequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getStatus1", localVarResponse);
        }
        return new ApiResponse<RestServerStatusInfo>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestServerStatusInfo>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getStatus1RequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/server";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Returns the current status of the server. This endpoint enables a basic status check on the status of a Bamboo instance. &lt;p&gt; The status endpoint will be responsive as long as the Bamboo REST plugin will be running. In other words, this endpoint does depend on the instance health and might not answer as a result of a failure or when Bamboo is still starting.
   * @return RestAnonymousServerStatusInfo
   * @throws ApiException if fails to make API call
   */
  public RestAnonymousServerStatusInfo getStatus2() throws ApiException {
    ApiResponse<RestAnonymousServerStatusInfo> localVarResponse = getStatus2WithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Returns the current status of the server. This endpoint enables a basic status check on the status of a Bamboo instance. &lt;p&gt; The status endpoint will be responsive as long as the Bamboo REST plugin will be running. In other words, this endpoint does depend on the instance health and might not answer as a result of a failure or when Bamboo is still starting.
   * @return ApiResponse&lt;RestAnonymousServerStatusInfo&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestAnonymousServerStatusInfo> getStatus2WithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getStatus2RequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getStatus2", localVarResponse);
        }
        return new ApiResponse<RestAnonymousServerStatusInfo>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestAnonymousServerStatusInfo>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getStatus2RequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/status";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Gets ephemeral template configuration details.
   * @param configurationId Configuration ID (required)
   * @return RestEphemeralAgentTemplate
   * @throws ApiException if fails to make API call
   */
  public RestEphemeralAgentTemplate getTemplateConfiguration(Long configurationId) throws ApiException {
    ApiResponse<RestEphemeralAgentTemplate> localVarResponse = getTemplateConfigurationWithHttpInfo(configurationId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Gets ephemeral template configuration details.
   * @param configurationId Configuration ID (required)
   * @return ApiResponse&lt;RestEphemeralAgentTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestEphemeralAgentTemplate> getTemplateConfigurationWithHttpInfo(Long configurationId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getTemplateConfigurationRequestBuilder(configurationId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getTemplateConfiguration", localVarResponse);
        }
        return new ApiResponse<RestEphemeralAgentTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestEphemeralAgentTemplate>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getTemplateConfigurationRequestBuilder(Long configurationId) throws ApiException {
    // verify the required parameter 'configurationId' is set
    if (configurationId == null) {
      throw new ApiException(400, "Missing the required parameter 'configurationId' when calling getTemplateConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/ephemeral/templateConfiguration/{configurationId}"
        .replace("{configurationId}", ApiClient.urlEncode(configurationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Fetch page of ephemeral templates.
   * @param filter  (optional, default to )
   * @return List&lt;RestEphemeralAgentTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RestEphemeralAgentTemplate> getTemplateConfigurationsPage(String filter) throws ApiException {
    ApiResponse<List<RestEphemeralAgentTemplate>> localVarResponse = getTemplateConfigurationsPageWithHttpInfo(filter);
    return localVarResponse.getData();
  }

  /**
   * 
   * Fetch page of ephemeral templates.
   * @param filter  (optional, default to )
   * @return ApiResponse&lt;List&lt;RestEphemeralAgentTemplate&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RestEphemeralAgentTemplate>> getTemplateConfigurationsPageWithHttpInfo(String filter) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getTemplateConfigurationsPageRequestBuilder(filter);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getTemplateConfigurationsPage", localVarResponse);
        }
        return new ApiResponse<List<RestEphemeralAgentTemplate>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RestEphemeralAgentTemplate>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getTemplateConfigurationsPageRequestBuilder(String filter) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/ephemeral/templateConfiguration";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Extract variables value from version name.
   * @param deploymentProjectId Deployment project id (required)
   * @param nextVersionName Version name (required)
   * @throws ApiException if fails to make API call
   */
  public void getVariablesFromName(String deploymentProjectId, String nextVersionName) throws ApiException {
    getVariablesFromNameWithHttpInfo(deploymentProjectId, nextVersionName);
  }

  /**
   * 
   * Extract variables value from version name.
   * @param deploymentProjectId Deployment project id (required)
   * @param nextVersionName Version name (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> getVariablesFromNameWithHttpInfo(String deploymentProjectId, String nextVersionName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getVariablesFromNameRequestBuilder(deploymentProjectId, nextVersionName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getVariablesFromName", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getVariablesFromNameRequestBuilder(String deploymentProjectId, String nextVersionName) throws ApiException {
    // verify the required parameter 'deploymentProjectId' is set
    if (deploymentProjectId == null) {
      throw new ApiException(400, "Missing the required parameter 'deploymentProjectId' when calling getVariablesFromName");
    }
    // verify the required parameter 'nextVersionName' is set
    if (nextVersionName == null) {
      throw new ApiException(400, "Missing the required parameter 'nextVersionName' when calling getVariablesFromName");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/projectVersioning/{deploymentProjectId}/parseVariables"
        .replace("{deploymentProjectId}", ApiClient.urlEncode(deploymentProjectId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "nextVersionName";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("nextVersionName", nextVersionName));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get associated build result of deployment version.
   * @param deploymentVersionId Deployment version id (required)
   * @return RestDeploymentVersionAndPlanResult
   * @throws ApiException if fails to make API call
   */
  public RestDeploymentVersionAndPlanResult getVersionAndPlanResult(String deploymentVersionId) throws ApiException {
    ApiResponse<RestDeploymentVersionAndPlanResult> localVarResponse = getVersionAndPlanResultWithHttpInfo(deploymentVersionId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get associated build result of deployment version.
   * @param deploymentVersionId Deployment version id (required)
   * @return ApiResponse&lt;RestDeploymentVersionAndPlanResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestDeploymentVersionAndPlanResult> getVersionAndPlanResultWithHttpInfo(String deploymentVersionId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getVersionAndPlanResultRequestBuilder(deploymentVersionId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getVersionAndPlanResult", localVarResponse);
        }
        return new ApiResponse<RestDeploymentVersionAndPlanResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestDeploymentVersionAndPlanResult>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getVersionAndPlanResultRequestBuilder(String deploymentVersionId) throws ApiException {
    // verify the required parameter 'deploymentVersionId' is set
    if (deploymentVersionId == null) {
      throw new ApiException(400, "Missing the required parameter 'deploymentVersionId' when calling getVersionAndPlanResult");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/version/{deploymentVersionId}/build-result"
        .replace("{deploymentVersionId}", ApiClient.urlEncode(deploymentVersionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Return visible quick filters for currently logged in user.
   * @return List&lt;RestQuickFilter&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RestQuickFilter> getVisibleFilters() throws ApiException {
    ApiResponse<List<RestQuickFilter>> localVarResponse = getVisibleFiltersWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Return visible quick filters for currently logged in user.
   * @return ApiResponse&lt;List&lt;RestQuickFilter&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RestQuickFilter>> getVisibleFiltersWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getVisibleFiltersRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getVisibleFilters", localVarResponse);
        }
        return new ApiResponse<List<RestQuickFilter>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RestQuickFilter>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getVisibleFiltersRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/quickFilter/visible";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Grant repository with RSS code to use target repository in build plans and deployments. If permission is not granted RSS import will fail when code tries to use target repository.
   * @param repositoryId Repository id (required)
   * @param restIdContainer Id container (required)
   * @return RestRepositoryMinimal
   * @throws ApiException if fails to make API call
   */
  public RestRepositoryMinimal grantRssRepositoryAccess(Long repositoryId, RestIdContainer restIdContainer) throws ApiException {
    ApiResponse<RestRepositoryMinimal> localVarResponse = grantRssRepositoryAccessWithHttpInfo(repositoryId, restIdContainer);
    return localVarResponse.getData();
  }

  /**
   * 
   * Grant repository with RSS code to use target repository in build plans and deployments. If permission is not granted RSS import will fail when code tries to use target repository.
   * @param repositoryId Repository id (required)
   * @param restIdContainer Id container (required)
   * @return ApiResponse&lt;RestRepositoryMinimal&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestRepositoryMinimal> grantRssRepositoryAccessWithHttpInfo(Long repositoryId, RestIdContainer restIdContainer) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = grantRssRepositoryAccessRequestBuilder(repositoryId, restIdContainer);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("grantRssRepositoryAccess", localVarResponse);
        }
        return new ApiResponse<RestRepositoryMinimal>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestRepositoryMinimal>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder grantRssRepositoryAccessRequestBuilder(Long repositoryId, RestIdContainer restIdContainer) throws ApiException {
    // verify the required parameter 'repositoryId' is set
    if (repositoryId == null) {
      throw new ApiException(400, "Missing the required parameter 'repositoryId' when calling grantRssRepositoryAccess");
    }
    // verify the required parameter 'restIdContainer' is set
    if (restIdContainer == null) {
      throw new ApiException(400, "Missing the required parameter 'restIdContainer' when calling grantRssRepositoryAccess");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/repository/{repositoryId}/rssrepository"
        .replace("{repositoryId}", ApiClient.urlEncode(repositoryId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restIdContainer);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * List of repositories which granted to create/edit environment in given deployment project by Repository stored Bamboo Specs.
   * @param deploymentProjectId Deployment project id (required)
   * @return List&lt;RestRepository&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RestRepository> listAssignedRepositories(String deploymentProjectId) throws ApiException {
    ApiResponse<List<RestRepository>> localVarResponse = listAssignedRepositoriesWithHttpInfo(deploymentProjectId);
    return localVarResponse.getData();
  }

  /**
   * 
   * List of repositories which granted to create/edit environment in given deployment project by Repository stored Bamboo Specs.
   * @param deploymentProjectId Deployment project id (required)
   * @return ApiResponse&lt;List&lt;RestRepository&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RestRepository>> listAssignedRepositoriesWithHttpInfo(String deploymentProjectId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listAssignedRepositoriesRequestBuilder(deploymentProjectId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listAssignedRepositories", localVarResponse);
        }
        return new ApiResponse<List<RestRepository>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RestRepository>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listAssignedRepositoriesRequestBuilder(String deploymentProjectId) throws ApiException {
    // verify the required parameter 'deploymentProjectId' is set
    if (deploymentProjectId == null) {
      throw new ApiException(400, "Missing the required parameter 'deploymentProjectId' when calling listAssignedRepositories");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/project/{deploymentProjectId}/repository"
        .replace("{deploymentProjectId}", ApiClient.urlEncode(deploymentProjectId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Fetch list of repositories which granted to create plan in given project by Repository stored Bamboo Specs.
   * @param projectKey project key (required)
   * @return List&lt;RestRepository&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RestRepository> listAssignedRepositories1(String projectKey) throws ApiException {
    ApiResponse<List<RestRepository>> localVarResponse = listAssignedRepositories1WithHttpInfo(projectKey);
    return localVarResponse.getData();
  }

  /**
   * 
   * Fetch list of repositories which granted to create plan in given project by Repository stored Bamboo Specs.
   * @param projectKey project key (required)
   * @return ApiResponse&lt;List&lt;RestRepository&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RestRepository>> listAssignedRepositories1WithHttpInfo(String projectKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listAssignedRepositories1RequestBuilder(projectKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listAssignedRepositories1", localVarResponse);
        }
        return new ApiResponse<List<RestRepository>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RestRepository>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listAssignedRepositories1RequestBuilder(String projectKey) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling listAssignedRepositories1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/project/{projectKey}/repository"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Pauses the server.
   * @return RestServerStatusInfo
   * @throws ApiException if fails to make API call
   */
  public RestServerStatusInfo pause() throws ApiException {
    ApiResponse<RestServerStatusInfo> localVarResponse = pauseWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Pauses the server.
   * @return ApiResponse&lt;RestServerStatusInfo&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestServerStatusInfo> pauseWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = pauseRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("pause", localVarResponse);
        }
        return new ApiResponse<RestServerStatusInfo>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestServerStatusInfo>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder pauseRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/server/pause";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Prepare server for restarting: suspend change detection, stop indexing, stop ec2 instance ordering etc.
   * @return RestServerStatusInfo
   * @throws ApiException if fails to make API call
   */
  public RestServerStatusInfo prepareForRestart() throws ApiException {
    ApiResponse<RestServerStatusInfo> localVarResponse = prepareForRestartWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Prepare server for restarting: suspend change detection, stop indexing, stop ec2 instance ordering etc.
   * @return ApiResponse&lt;RestServerStatusInfo&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestServerStatusInfo> prepareForRestartWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = prepareForRestartRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("prepareForRestart", localVarResponse);
        }
        return new ApiResponse<RestServerStatusInfo>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestServerStatusInfo>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder prepareForRestartRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/server/prepareForRestart";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Enable or disable a dark feature for all users of this instance.
   * @param key key of the dark feature (required)
   * @param restDarkFeature  (required)
   * @return RestDarkFeature
   * @throws ApiException if fails to make API call
   */
  public RestDarkFeature put(String key, RestDarkFeature restDarkFeature) throws ApiException {
    ApiResponse<RestDarkFeature> localVarResponse = putWithHttpInfo(key, restDarkFeature);
    return localVarResponse.getData();
  }

  /**
   * 
   * Enable or disable a dark feature for all users of this instance.
   * @param key key of the dark feature (required)
   * @param restDarkFeature  (required)
   * @return ApiResponse&lt;RestDarkFeature&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestDarkFeature> putWithHttpInfo(String key, RestDarkFeature restDarkFeature) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = putRequestBuilder(key, restDarkFeature);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("put", localVarResponse);
        }
        return new ApiResponse<RestDarkFeature>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestDarkFeature>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder putRequestBuilder(String key, RestDarkFeature restDarkFeature) throws ApiException {
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling put");
    }
    // verify the required parameter 'restDarkFeature' is set
    if (restDarkFeature == null) {
      throw new ApiException(400, "Missing the required parameter 'restDarkFeature' when calling put");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/darkFeatures/{key}"
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restDarkFeature);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Enable or disable a dark feature for a given user.
   * @param userName the username of the user for which the dark feature has to be enabled/disabled (required)
   * @param key key of the dark feature (required)
   * @param restDarkFeature  (required)
   * @return RestUserDarkFeature
   * @throws ApiException if fails to make API call
   */
  public RestUserDarkFeature put1(String userName, String key, RestDarkFeature restDarkFeature) throws ApiException {
    ApiResponse<RestUserDarkFeature> localVarResponse = put1WithHttpInfo(userName, key, restDarkFeature);
    return localVarResponse.getData();
  }

  /**
   * 
   * Enable or disable a dark feature for a given user.
   * @param userName the username of the user for which the dark feature has to be enabled/disabled (required)
   * @param key key of the dark feature (required)
   * @param restDarkFeature  (required)
   * @return ApiResponse&lt;RestUserDarkFeature&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestUserDarkFeature> put1WithHttpInfo(String userName, String key, RestDarkFeature restDarkFeature) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = put1RequestBuilder(userName, key, restDarkFeature);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("put1", localVarResponse);
        }
        return new ApiResponse<RestUserDarkFeature>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestUserDarkFeature>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder put1RequestBuilder(String userName, String key, RestDarkFeature restDarkFeature) throws ApiException {
    // verify the required parameter 'userName' is set
    if (userName == null) {
      throw new ApiException(400, "Missing the required parameter 'userName' when calling put1");
    }
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling put1");
    }
    // verify the required parameter 'restDarkFeature' is set
    if (restDarkFeature == null) {
      throw new ApiException(400, "Missing the required parameter 'restDarkFeature' when calling put1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/darkFeatures/{key}/user/{userName}"
        .replace("{userName}", ApiClient.urlEncode(userName.toString()))
        .replace("{key}", ApiClient.urlEncode(key.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restDarkFeature);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Kicks off a reindex.  Requires system admin permissions to perform this operation.
   * @return ReindexBean
   * @throws ApiException if fails to make API call
   */
  public ReindexBean reindex() throws ApiException {
    ApiResponse<ReindexBean> localVarResponse = reindexWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Kicks off a reindex.  Requires system admin permissions to perform this operation.
   * @return ApiResponse&lt;ReindexBean&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ReindexBean> reindexWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reindexRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reindex", localVarResponse);
        }
        return new ApiResponse<ReindexBean>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReindexBean>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reindexRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/reindex";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Removes a comment from a build result.
   * @param projectKey project key (required)
   * @param buildKey plan key (might be simply planKey or composite planKey-jobKey) (required)
   * @param commentId id of the comment (required)
   * @param buildNumber Build number (required)
   * @throws ApiException if fails to make API call
   */
  public void removeBuildComment(String projectKey, String buildKey, String commentId, String buildNumber) throws ApiException {
    removeBuildCommentWithHttpInfo(projectKey, buildKey, commentId, buildNumber);
  }

  /**
   * 
   * Removes a comment from a build result.
   * @param projectKey project key (required)
   * @param buildKey plan key (might be simply planKey or composite planKey-jobKey) (required)
   * @param commentId id of the comment (required)
   * @param buildNumber Build number (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removeBuildCommentWithHttpInfo(String projectKey, String buildKey, String commentId, String buildNumber) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeBuildCommentRequestBuilder(projectKey, buildKey, commentId, buildNumber);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removeBuildComment", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeBuildCommentRequestBuilder(String projectKey, String buildKey, String commentId, String buildNumber) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling removeBuildComment");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling removeBuildComment");
    }
    // verify the required parameter 'commentId' is set
    if (commentId == null) {
      throw new ApiException(400, "Missing the required parameter 'commentId' when calling removeBuildComment");
    }
    // verify the required parameter 'buildNumber' is set
    if (buildNumber == null) {
      throw new ApiException(400, "Missing the required parameter 'buildNumber' when calling removeBuildComment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/result/{projectKey}-{buildKey}-{buildNumber}/comment/{commentId}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()))
        .replace("{commentId}", ApiClient.urlEncode(commentId.toString()))
        .replace("{buildNumber}", ApiClient.urlEncode(buildNumber.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Removes label from build result specified by projectKey-buildKey-buildNumber.
   * @param projectKey project key (required)
   * @param buildKey plan key (must be a plan key, not a job key) (required)
   * @param labelName Label name to remove from build result (required)
   * @param buildNumber Build number may be specified as *latest* for the result with the highest build number (required)
   * @throws ApiException if fails to make API call
   */
  public void removeBuildLabel(String projectKey, String buildKey, String labelName, String buildNumber) throws ApiException {
    removeBuildLabelWithHttpInfo(projectKey, buildKey, labelName, buildNumber);
  }

  /**
   * 
   * Removes label from build result specified by projectKey-buildKey-buildNumber.
   * @param projectKey project key (required)
   * @param buildKey plan key (must be a plan key, not a job key) (required)
   * @param labelName Label name to remove from build result (required)
   * @param buildNumber Build number may be specified as *latest* for the result with the highest build number (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removeBuildLabelWithHttpInfo(String projectKey, String buildKey, String labelName, String buildNumber) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeBuildLabelRequestBuilder(projectKey, buildKey, labelName, buildNumber);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removeBuildLabel", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeBuildLabelRequestBuilder(String projectKey, String buildKey, String labelName, String buildNumber) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling removeBuildLabel");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling removeBuildLabel");
    }
    // verify the required parameter 'labelName' is set
    if (labelName == null) {
      throw new ApiException(400, "Missing the required parameter 'labelName' when calling removeBuildLabel");
    }
    // verify the required parameter 'buildNumber' is set
    if (buildNumber == null) {
      throw new ApiException(400, "Missing the required parameter 'buildNumber' when calling removeBuildLabel");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/result/{projectKey}-{buildKey}-{buildNumber}/label/{labelName}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()))
        .replace("{labelName}", ApiClient.urlEncode(labelName.toString()))
        .replace("{buildNumber}", ApiClient.urlEncode(buildNumber.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Delete custom plan expiry settings.
   * @param planKey key of plan with custom expiry settings (required)
   * @throws ApiException if fails to make API call
   */
  public void removePlanCustomExpirySettings(String planKey) throws ApiException {
    removePlanCustomExpirySettingsWithHttpInfo(planKey);
  }

  /**
   * 
   * Delete custom plan expiry settings.
   * @param planKey key of plan with custom expiry settings (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removePlanCustomExpirySettingsWithHttpInfo(String planKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removePlanCustomExpirySettingsRequestBuilder(planKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removePlanCustomExpirySettings", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removePlanCustomExpirySettingsRequestBuilder(String planKey) throws ApiException {
    // verify the required parameter 'planKey' is set
    if (planKey == null) {
      throw new ApiException(400, "Missing the required parameter 'planKey' when calling removePlanCustomExpirySettings");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/admin/expiry/custom/plan/{planKey}"
        .replace("{planKey}", ApiClient.urlEncode(planKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Remove user&#39;s responsibility from broken build.
   * @param name User name (required)
   * @param planResultKeyOrPlanKey Chain result or plan key, e.g. PROJ-PLAN or PROJ-PLAN-2 (required)
   * @throws ApiException if fails to make API call
   */
  public void removeResponsible(String name, String planResultKeyOrPlanKey) throws ApiException {
    removeResponsibleWithHttpInfo(name, planResultKeyOrPlanKey);
  }

  /**
   * 
   * Remove user&#39;s responsibility from broken build.
   * @param name User name (required)
   * @param planResultKeyOrPlanKey Chain result or plan key, e.g. PROJ-PLAN or PROJ-PLAN-2 (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removeResponsibleWithHttpInfo(String name, String planResultKeyOrPlanKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeResponsibleRequestBuilder(name, planResultKeyOrPlanKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removeResponsible", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeResponsibleRequestBuilder(String name, String planResultKeyOrPlanKey) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling removeResponsible");
    }
    // verify the required parameter 'planResultKeyOrPlanKey' is set
    if (planResultKeyOrPlanKey == null) {
      throw new ApiException(400, "Missing the required parameter 'planResultKeyOrPlanKey' when calling removeResponsible");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/responsibility/latest/brokenBuild/{planResultKeyOrPlanKey}/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()))
        .replace("{planResultKeyOrPlanKey}", ApiClient.urlEncode(planResultKeyOrPlanKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Resumes the server.
   * @return RestServerStatusInfo
   * @throws ApiException if fails to make API call
   */
  public RestServerStatusInfo resume() throws ApiException {
    ApiResponse<RestServerStatusInfo> localVarResponse = resumeWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Resumes the server.
   * @return ApiResponse&lt;RestServerStatusInfo&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestServerStatusInfo> resumeWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resumeRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resume", localVarResponse);
        }
        return new ApiResponse<RestServerStatusInfo>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestServerStatusInfo>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resumeRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/server/resume";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Revoke access of RSS code stored in repository defined by repositoryId from repository defined by targetRepositoryId. Use this method when need to prevent usage of target repository by RSS code stored in repository referenced by repositoryId.
   * @param repositoryId Linked repository root id (required)
   * @param targetRepositoryId Target repository id (required)
   * @throws ApiException if fails to make API call
   */
  public void revokePermissionToUseRepositoryByRssRepo(Long repositoryId, Long targetRepositoryId) throws ApiException {
    revokePermissionToUseRepositoryByRssRepoWithHttpInfo(repositoryId, targetRepositoryId);
  }

  /**
   * 
   * Revoke access of RSS code stored in repository defined by repositoryId from repository defined by targetRepositoryId. Use this method when need to prevent usage of target repository by RSS code stored in repository referenced by repositoryId.
   * @param repositoryId Linked repository root id (required)
   * @param targetRepositoryId Target repository id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> revokePermissionToUseRepositoryByRssRepoWithHttpInfo(Long repositoryId, Long targetRepositoryId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = revokePermissionToUseRepositoryByRssRepoRequestBuilder(repositoryId, targetRepositoryId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("revokePermissionToUseRepositoryByRssRepo", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder revokePermissionToUseRepositoryByRssRepoRequestBuilder(Long repositoryId, Long targetRepositoryId) throws ApiException {
    // verify the required parameter 'repositoryId' is set
    if (repositoryId == null) {
      throw new ApiException(400, "Missing the required parameter 'repositoryId' when calling revokePermissionToUseRepositoryByRssRepo");
    }
    // verify the required parameter 'targetRepositoryId' is set
    if (targetRepositoryId == null) {
      throw new ApiException(400, "Missing the required parameter 'targetRepositoryId' when calling revokePermissionToUseRepositoryByRssRepo");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/repository/{targetRepositoryId}/rssrepository/{repositoryId}"
        .replace("{repositoryId}", ApiClient.urlEncode(repositoryId.toString()))
        .replace("{targetRepositoryId}", ApiClient.urlEncode(targetRepositoryId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Executes build and deployment expiry process. Will only start each process if it&#39;s not currently running.
   * @return RunExpiryResponse
   * @throws ApiException if fails to make API call
   */
  public RunExpiryResponse run() throws ApiException {
    ApiResponse<RunExpiryResponse> localVarResponse = runWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Executes build and deployment expiry process. Will only start each process if it&#39;s not currently running.
   * @return ApiResponse&lt;RunExpiryResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RunExpiryResponse> runWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = runRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("run", localVarResponse);
        }
        return new ApiResponse<RunExpiryResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RunExpiryResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder runRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/expiry/run";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Modify ephemeral agents configuration.
   * @param ephemeralAgentsConfigurationDTO  (required)
   * @return EphemeralAgentsConfigurationDTO
   * @throws ApiException if fails to make API call
   */
  public EphemeralAgentsConfigurationDTO saveConfiguration(EphemeralAgentsConfigurationDTO ephemeralAgentsConfigurationDTO) throws ApiException {
    ApiResponse<EphemeralAgentsConfigurationDTO> localVarResponse = saveConfigurationWithHttpInfo(ephemeralAgentsConfigurationDTO);
    return localVarResponse.getData();
  }

  /**
   * 
   * Modify ephemeral agents configuration.
   * @param ephemeralAgentsConfigurationDTO  (required)
   * @return ApiResponse&lt;EphemeralAgentsConfigurationDTO&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EphemeralAgentsConfigurationDTO> saveConfigurationWithHttpInfo(EphemeralAgentsConfigurationDTO ephemeralAgentsConfigurationDTO) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = saveConfigurationRequestBuilder(ephemeralAgentsConfigurationDTO);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("saveConfiguration", localVarResponse);
        }
        return new ApiResponse<EphemeralAgentsConfigurationDTO>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EphemeralAgentsConfigurationDTO>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder saveConfigurationRequestBuilder(EphemeralAgentsConfigurationDTO ephemeralAgentsConfigurationDTO) throws ApiException {
    // verify the required parameter 'ephemeralAgentsConfigurationDTO' is set
    if (ephemeralAgentsConfigurationDTO == null) {
      throw new ApiException(400, "Missing the required parameter 'ephemeralAgentsConfigurationDTO' when calling saveConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/ephemeral/config";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(ephemeralAgentsConfigurationDTO);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Performs a starts with search against projects, plans, plan branches, deployment projects
   * @param searchTerm to search for (optional)
   * @param searchEntity entity to search for (optional)
   * @return JsonSearchResultsList
   * @throws ApiException if fails to make API call
   */
  public JsonSearchResultsList search(String searchTerm, String searchEntity) throws ApiException {
    ApiResponse<JsonSearchResultsList> localVarResponse = searchWithHttpInfo(searchTerm, searchEntity);
    return localVarResponse.getData();
  }

  /**
   * 
   * Performs a starts with search against projects, plans, plan branches, deployment projects
   * @param searchTerm to search for (optional)
   * @param searchEntity entity to search for (optional)
   * @return ApiResponse&lt;JsonSearchResultsList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<JsonSearchResultsList> searchWithHttpInfo(String searchTerm, String searchEntity) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = searchRequestBuilder(searchTerm, searchEntity);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("search", localVarResponse);
        }
        return new ApiResponse<JsonSearchResultsList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<JsonSearchResultsList>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder searchRequestBuilder(String searchTerm, String searchEntity) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/quicksearch";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "searchTerm";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchTerm", searchTerm));
    localVarQueryParameterBaseName = "searchEntity";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchEntity", searchEntity));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * A starts-with search of authors based on their author name.
   * @param searchTerm The term to search for in authors (required)
   * @param maxResult Maximum count of returned elements (optional)
   * @param unlinkedOnly if true will only include authors which are not currently linked to a user (optional)
   * @param startIndex Start index (optional)
   * @return SearchResultsList
   * @throws ApiException if fails to make API call
   */
  public SearchResultsList searchAuthors(String searchTerm, Integer maxResult, Boolean unlinkedOnly, Integer startIndex) throws ApiException {
    ApiResponse<SearchResultsList> localVarResponse = searchAuthorsWithHttpInfo(searchTerm, maxResult, unlinkedOnly, startIndex);
    return localVarResponse.getData();
  }

  /**
   * 
   * A starts-with search of authors based on their author name.
   * @param searchTerm The term to search for in authors (required)
   * @param maxResult Maximum count of returned elements (optional)
   * @param unlinkedOnly if true will only include authors which are not currently linked to a user (optional)
   * @param startIndex Start index (optional)
   * @return ApiResponse&lt;SearchResultsList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SearchResultsList> searchAuthorsWithHttpInfo(String searchTerm, Integer maxResult, Boolean unlinkedOnly, Integer startIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = searchAuthorsRequestBuilder(searchTerm, maxResult, unlinkedOnly, startIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("searchAuthors", localVarResponse);
        }
        return new ApiResponse<SearchResultsList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SearchResultsList>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder searchAuthorsRequestBuilder(String searchTerm, Integer maxResult, Boolean unlinkedOnly, Integer startIndex) throws ApiException {
    // verify the required parameter 'searchTerm' is set
    if (searchTerm == null) {
      throw new ApiException(400, "Missing the required parameter 'searchTerm' when calling searchAuthors");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/search/authors";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "max-result";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-result", maxResult));
    localVarQueryParameterBaseName = "unlinkedOnly";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unlinkedOnly", unlinkedOnly));
    localVarQueryParameterBaseName = "searchTerm";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchTerm", searchTerm));
    localVarQueryParameterBaseName = "start-index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start-index", startIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Search for linked repositories which can be granted to create/modify environment by Repository stored Bamboo Specs in given deployment project.
   * @param deploymentProjectId Deployment project id (required)
   * @param maxResult Maximum count of repositories (optional)
   * @param searchTerm Part of repository name. Used to filter output. (optional)
   * @param startIndex Start index of repositories (optional)
   * @return RestRepositoryList
   * @throws ApiException if fails to make API call
   */
  public RestRepositoryList searchAvailableRepositories(String deploymentProjectId, Integer maxResult, String searchTerm, Integer startIndex) throws ApiException {
    ApiResponse<RestRepositoryList> localVarResponse = searchAvailableRepositoriesWithHttpInfo(deploymentProjectId, maxResult, searchTerm, startIndex);
    return localVarResponse.getData();
  }

  /**
   * 
   * Search for linked repositories which can be granted to create/modify environment by Repository stored Bamboo Specs in given deployment project.
   * @param deploymentProjectId Deployment project id (required)
   * @param maxResult Maximum count of repositories (optional)
   * @param searchTerm Part of repository name. Used to filter output. (optional)
   * @param startIndex Start index of repositories (optional)
   * @return ApiResponse&lt;RestRepositoryList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestRepositoryList> searchAvailableRepositoriesWithHttpInfo(String deploymentProjectId, Integer maxResult, String searchTerm, Integer startIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = searchAvailableRepositoriesRequestBuilder(deploymentProjectId, maxResult, searchTerm, startIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("searchAvailableRepositories", localVarResponse);
        }
        return new ApiResponse<RestRepositoryList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestRepositoryList>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder searchAvailableRepositoriesRequestBuilder(String deploymentProjectId, Integer maxResult, String searchTerm, Integer startIndex) throws ApiException {
    // verify the required parameter 'deploymentProjectId' is set
    if (deploymentProjectId == null) {
      throw new ApiException(400, "Missing the required parameter 'deploymentProjectId' when calling searchAvailableRepositories");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/project/{deploymentProjectId}/repository/search"
        .replace("{deploymentProjectId}", ApiClient.urlEncode(deploymentProjectId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "max-result";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-result", maxResult));
    localVarQueryParameterBaseName = "searchTerm";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchTerm", searchTerm));
    localVarQueryParameterBaseName = "start-index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start-index", startIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Search for linked repositories which can be granted to create plans by Repository stored Bamboo Specs in given project
   * @param projectKey project key (required)
   * @param searchTerm part of repository name. Used to filter output. (optional)
   * @return RestRepositoryList
   * @throws ApiException if fails to make API call
   */
  public RestRepositoryList searchAvailableRepositories1(String projectKey, String searchTerm) throws ApiException {
    ApiResponse<RestRepositoryList> localVarResponse = searchAvailableRepositories1WithHttpInfo(projectKey, searchTerm);
    return localVarResponse.getData();
  }

  /**
   * 
   * Search for linked repositories which can be granted to create plans by Repository stored Bamboo Specs in given project
   * @param projectKey project key (required)
   * @param searchTerm part of repository name. Used to filter output. (optional)
   * @return ApiResponse&lt;RestRepositoryList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestRepositoryList> searchAvailableRepositories1WithHttpInfo(String projectKey, String searchTerm) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = searchAvailableRepositories1RequestBuilder(projectKey, searchTerm);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("searchAvailableRepositories1", localVarResponse);
        }
        return new ApiResponse<RestRepositoryList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestRepositoryList>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder searchAvailableRepositories1RequestBuilder(String projectKey, String searchTerm) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling searchAvailableRepositories1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/project/{projectKey}/repository/search"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "searchTerm";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchTerm", searchTerm));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Search for existing linked repositories which can be granted to use given repository by RSS.
   * @param repositoryId Target repository id (required)
   * @param searchTerm Part of repository name. Used to filter output (optional)
   * @return RestRepositoryList
   * @throws ApiException if fails to make API call
   */
  public RestRepositoryList searchAvailableRepositories2(Long repositoryId, String searchTerm) throws ApiException {
    ApiResponse<RestRepositoryList> localVarResponse = searchAvailableRepositories2WithHttpInfo(repositoryId, searchTerm);
    return localVarResponse.getData();
  }

  /**
   * 
   * Search for existing linked repositories which can be granted to use given repository by RSS.
   * @param repositoryId Target repository id (required)
   * @param searchTerm Part of repository name. Used to filter output (optional)
   * @return ApiResponse&lt;RestRepositoryList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestRepositoryList> searchAvailableRepositories2WithHttpInfo(Long repositoryId, String searchTerm) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = searchAvailableRepositories2RequestBuilder(repositoryId, searchTerm);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("searchAvailableRepositories2", localVarResponse);
        }
        return new ApiResponse<RestRepositoryList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestRepositoryList>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder searchAvailableRepositories2RequestBuilder(Long repositoryId, String searchTerm) throws ApiException {
    // verify the required parameter 'repositoryId' is set
    if (repositoryId == null) {
      throw new ApiException(400, "Missing the required parameter 'repositoryId' when calling searchAvailableRepositories2");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/repository/{repositoryId}/rssrepository/search"
        .replace("{repositoryId}", ApiClient.urlEncode(repositoryId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "searchTerm";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchTerm", searchTerm));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Performs a \&quot;starts with\&quot; search against full plan branch name and full plan branch key. Branches are restricted to \&quot;masterPlanKey\&quot; plan.
   * @param masterPlanKey planKey for plan where branches will be searched for (required)
   * @param maxResult Maximum count of returned elements (optional)
   * @param searchTerm The term to search for in branches (optional)
   * @param includeMasterBranch Should master branch be included into result (optional)
   * @param startIndex Start index (optional)
   * @param branchNameOnly Whether the search should only use branch names of plan branches. Default includes the VCS branch name into the fuzzy search (optional)
   * @param fuzzy Whether the search should be more relaxed when matching results. Default is false (optional)
   * @param releasedInDeployment id of deployment project - will return only branches that are released in this deployment (optional)
   * @return SearchResultsList
   * @throws ApiException if fails to make API call
   */
  public SearchResultsList searchBranches(String masterPlanKey, Integer maxResult, String searchTerm, Boolean includeMasterBranch, Integer startIndex, Boolean branchNameOnly, Boolean fuzzy, Long releasedInDeployment) throws ApiException {
    ApiResponse<SearchResultsList> localVarResponse = searchBranchesWithHttpInfo(masterPlanKey, maxResult, searchTerm, includeMasterBranch, startIndex, branchNameOnly, fuzzy, releasedInDeployment);
    return localVarResponse.getData();
  }

  /**
   * 
   * Performs a \&quot;starts with\&quot; search against full plan branch name and full plan branch key. Branches are restricted to \&quot;masterPlanKey\&quot; plan.
   * @param masterPlanKey planKey for plan where branches will be searched for (required)
   * @param maxResult Maximum count of returned elements (optional)
   * @param searchTerm The term to search for in branches (optional)
   * @param includeMasterBranch Should master branch be included into result (optional)
   * @param startIndex Start index (optional)
   * @param branchNameOnly Whether the search should only use branch names of plan branches. Default includes the VCS branch name into the fuzzy search (optional)
   * @param fuzzy Whether the search should be more relaxed when matching results. Default is false (optional)
   * @param releasedInDeployment id of deployment project - will return only branches that are released in this deployment (optional)
   * @return ApiResponse&lt;SearchResultsList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SearchResultsList> searchBranchesWithHttpInfo(String masterPlanKey, Integer maxResult, String searchTerm, Boolean includeMasterBranch, Integer startIndex, Boolean branchNameOnly, Boolean fuzzy, Long releasedInDeployment) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = searchBranchesRequestBuilder(masterPlanKey, maxResult, searchTerm, includeMasterBranch, startIndex, branchNameOnly, fuzzy, releasedInDeployment);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("searchBranches", localVarResponse);
        }
        return new ApiResponse<SearchResultsList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SearchResultsList>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder searchBranchesRequestBuilder(String masterPlanKey, Integer maxResult, String searchTerm, Boolean includeMasterBranch, Integer startIndex, Boolean branchNameOnly, Boolean fuzzy, Long releasedInDeployment) throws ApiException {
    // verify the required parameter 'masterPlanKey' is set
    if (masterPlanKey == null) {
      throw new ApiException(400, "Missing the required parameter 'masterPlanKey' when calling searchBranches");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/search/branches";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "max-result";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-result", maxResult));
    localVarQueryParameterBaseName = "searchTerm";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchTerm", searchTerm));
    localVarQueryParameterBaseName = "includeMasterBranch";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("includeMasterBranch", includeMasterBranch));
    localVarQueryParameterBaseName = "start-index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start-index", startIndex));
    localVarQueryParameterBaseName = "branchNameOnly";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("branchNameOnly", branchNameOnly));
    localVarQueryParameterBaseName = "fuzzy";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fuzzy", fuzzy));
    localVarQueryParameterBaseName = "masterPlanKey";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("masterPlanKey", masterPlanKey));
    localVarQueryParameterBaseName = "releasedInDeployment";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("releasedInDeployment", releasedInDeployment));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Performs a contains search against deployment project name.
   * @param maxResult Maximum count of returned elements (optional)
   * @param searchTerm The term to search for in projects (optional)
   * @param startIndex Start index (optional)
   * @param permission Only return those deployment projects that querying user has permission to. Default is READ (optional)
   * @return SearchResultsList
   * @throws ApiException if fails to make API call
   */
  public SearchResultsList searchDeployments(Integer maxResult, String searchTerm, Integer startIndex, String permission) throws ApiException {
    ApiResponse<SearchResultsList> localVarResponse = searchDeploymentsWithHttpInfo(maxResult, searchTerm, startIndex, permission);
    return localVarResponse.getData();
  }

  /**
   * 
   * Performs a contains search against deployment project name.
   * @param maxResult Maximum count of returned elements (optional)
   * @param searchTerm The term to search for in projects (optional)
   * @param startIndex Start index (optional)
   * @param permission Only return those deployment projects that querying user has permission to. Default is READ (optional)
   * @return ApiResponse&lt;SearchResultsList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SearchResultsList> searchDeploymentsWithHttpInfo(Integer maxResult, String searchTerm, Integer startIndex, String permission) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = searchDeploymentsRequestBuilder(maxResult, searchTerm, startIndex, permission);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("searchDeployments", localVarResponse);
        }
        return new ApiResponse<SearchResultsList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SearchResultsList>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder searchDeploymentsRequestBuilder(Integer maxResult, String searchTerm, Integer startIndex, String permission) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/search/deployments";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "max-result";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-result", maxResult));
    localVarQueryParameterBaseName = "searchTerm";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchTerm", searchTerm));
    localVarQueryParameterBaseName = "start-index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start-index", startIndex));
    localVarQueryParameterBaseName = "permission";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("permission", permission));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Search for available plan child dependencies
   * @param projectKey Project key (required)
   * @param searchTerm Search term (required)
   * @param buildKey Build key (required)
   * @param maxResult Maximum count of plans (optional)
   * @param startIndex Start index of plans (optional)
   * @return RestDependencies
   * @throws ApiException if fails to make API call
   */
  public RestDependencies searchForAvailablePlanChildDependencies(String projectKey, String searchTerm, String buildKey, Integer maxResult, Integer startIndex) throws ApiException {
    ApiResponse<RestDependencies> localVarResponse = searchForAvailablePlanChildDependenciesWithHttpInfo(projectKey, searchTerm, buildKey, maxResult, startIndex);
    return localVarResponse.getData();
  }

  /**
   * 
   * Search for available plan child dependencies
   * @param projectKey Project key (required)
   * @param searchTerm Search term (required)
   * @param buildKey Build key (required)
   * @param maxResult Maximum count of plans (optional)
   * @param startIndex Start index of plans (optional)
   * @return ApiResponse&lt;RestDependencies&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestDependencies> searchForAvailablePlanChildDependenciesWithHttpInfo(String projectKey, String searchTerm, String buildKey, Integer maxResult, Integer startIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = searchForAvailablePlanChildDependenciesRequestBuilder(projectKey, searchTerm, buildKey, maxResult, startIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("searchForAvailablePlanChildDependencies", localVarResponse);
        }
        return new ApiResponse<RestDependencies>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestDependencies>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder searchForAvailablePlanChildDependenciesRequestBuilder(String projectKey, String searchTerm, String buildKey, Integer maxResult, Integer startIndex) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling searchForAvailablePlanChildDependencies");
    }
    // verify the required parameter 'searchTerm' is set
    if (searchTerm == null) {
      throw new ApiException(400, "Missing the required parameter 'searchTerm' when calling searchForAvailablePlanChildDependencies");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling searchForAvailablePlanChildDependencies");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/dependency/search/{projectKey}-{buildKey}/child"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "max-result";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-result", maxResult));
    localVarQueryParameterBaseName = "searchTerm";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchTerm", searchTerm));
    localVarQueryParameterBaseName = "start-index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start-index", startIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Search for available plan parent dependencies
   * @param projectKey Project key (required)
   * @param searchTerm Search term (required)
   * @param buildKey Build key (required)
   * @param maxResult Maximum count of plans (optional)
   * @param startIndex Start index of plans (optional)
   * @return RestDependencies
   * @throws ApiException if fails to make API call
   */
  public RestDependencies searchForAvailablePlanParentDependencies(String projectKey, String searchTerm, String buildKey, Integer maxResult, Integer startIndex) throws ApiException {
    ApiResponse<RestDependencies> localVarResponse = searchForAvailablePlanParentDependenciesWithHttpInfo(projectKey, searchTerm, buildKey, maxResult, startIndex);
    return localVarResponse.getData();
  }

  /**
   * 
   * Search for available plan parent dependencies
   * @param projectKey Project key (required)
   * @param searchTerm Search term (required)
   * @param buildKey Build key (required)
   * @param maxResult Maximum count of plans (optional)
   * @param startIndex Start index of plans (optional)
   * @return ApiResponse&lt;RestDependencies&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestDependencies> searchForAvailablePlanParentDependenciesWithHttpInfo(String projectKey, String searchTerm, String buildKey, Integer maxResult, Integer startIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = searchForAvailablePlanParentDependenciesRequestBuilder(projectKey, searchTerm, buildKey, maxResult, startIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("searchForAvailablePlanParentDependencies", localVarResponse);
        }
        return new ApiResponse<RestDependencies>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestDependencies>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder searchForAvailablePlanParentDependenciesRequestBuilder(String projectKey, String searchTerm, String buildKey, Integer maxResult, Integer startIndex) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling searchForAvailablePlanParentDependencies");
    }
    // verify the required parameter 'searchTerm' is set
    if (searchTerm == null) {
      throw new ApiException(400, "Missing the required parameter 'searchTerm' when calling searchForAvailablePlanParentDependencies");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling searchForAvailablePlanParentDependencies");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/dependency/search/{projectKey}-{buildKey}/parent"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "max-result";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-result", maxResult));
    localVarQueryParameterBaseName = "searchTerm";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchTerm", searchTerm));
    localVarQueryParameterBaseName = "start-index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start-index", startIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Performs a \&quot;starts with\&quot; search against full job name and full job key.
   * @param planKey planKey for plan where jobs will be searched for (required)
   * @param maxResult Maximum count of returned elements (optional)
   * @param searchTerm The term to search for in jobs (optional)
   * @param startIndex Start index (optional)
   * @return SearchResultsList
   * @throws ApiException if fails to make API call
   */
  public SearchResultsList searchJobs(String planKey, Integer maxResult, String searchTerm, Integer startIndex) throws ApiException {
    ApiResponse<SearchResultsList> localVarResponse = searchJobsWithHttpInfo(planKey, maxResult, searchTerm, startIndex);
    return localVarResponse.getData();
  }

  /**
   * 
   * Performs a \&quot;starts with\&quot; search against full job name and full job key.
   * @param planKey planKey for plan where jobs will be searched for (required)
   * @param maxResult Maximum count of returned elements (optional)
   * @param searchTerm The term to search for in jobs (optional)
   * @param startIndex Start index (optional)
   * @return ApiResponse&lt;SearchResultsList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SearchResultsList> searchJobsWithHttpInfo(String planKey, Integer maxResult, String searchTerm, Integer startIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = searchJobsRequestBuilder(planKey, maxResult, searchTerm, startIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("searchJobs", localVarResponse);
        }
        return new ApiResponse<SearchResultsList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SearchResultsList>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder searchJobsRequestBuilder(String planKey, Integer maxResult, String searchTerm, Integer startIndex) throws ApiException {
    // verify the required parameter 'planKey' is set
    if (planKey == null) {
      throw new ApiException(400, "Missing the required parameter 'planKey' when calling searchJobs");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/search/jobs/{planKey}"
        .replace("{planKey}", ApiClient.urlEncode(planKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "max-result";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-result", maxResult));
    localVarQueryParameterBaseName = "searchTerm";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchTerm", searchTerm));
    localVarQueryParameterBaseName = "start-index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start-index", startIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Performs a \&quot;starts with\&quot; search against full plan name and full plan key.  Use \&quot;type\&quot; argument to filter by plan type by default will return TopLevelPlans
   * @param maxResult Maximum count of returned elements (optional)
   * @param searchTerm The term to search for in plans (optional)
   * @param startIndex Start index (optional)
   * @param permission Only return those plans that querying user has permission to. Default is READ (optional)
   * @param type Type of the plan to return (optional)
   * @param fuzzy Whether the search should be more relaxed when matching results. Default is false (optional)
   * @return SearchResultsList
   * @throws ApiException if fails to make API call
   */
  public SearchResultsList searchPlans(Integer maxResult, String searchTerm, Integer startIndex, String permission, String type, Boolean fuzzy) throws ApiException {
    ApiResponse<SearchResultsList> localVarResponse = searchPlansWithHttpInfo(maxResult, searchTerm, startIndex, permission, type, fuzzy);
    return localVarResponse.getData();
  }

  /**
   * 
   * Performs a \&quot;starts with\&quot; search against full plan name and full plan key.  Use \&quot;type\&quot; argument to filter by plan type by default will return TopLevelPlans
   * @param maxResult Maximum count of returned elements (optional)
   * @param searchTerm The term to search for in plans (optional)
   * @param startIndex Start index (optional)
   * @param permission Only return those plans that querying user has permission to. Default is READ (optional)
   * @param type Type of the plan to return (optional)
   * @param fuzzy Whether the search should be more relaxed when matching results. Default is false (optional)
   * @return ApiResponse&lt;SearchResultsList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SearchResultsList> searchPlansWithHttpInfo(Integer maxResult, String searchTerm, Integer startIndex, String permission, String type, Boolean fuzzy) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = searchPlansRequestBuilder(maxResult, searchTerm, startIndex, permission, type, fuzzy);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("searchPlans", localVarResponse);
        }
        return new ApiResponse<SearchResultsList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SearchResultsList>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder searchPlansRequestBuilder(Integer maxResult, String searchTerm, Integer startIndex, String permission, String type, Boolean fuzzy) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/search/plans";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "max-result";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-result", maxResult));
    localVarQueryParameterBaseName = "searchTerm";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchTerm", searchTerm));
    localVarQueryParameterBaseName = "start-index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start-index", startIndex));
    localVarQueryParameterBaseName = "permission";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("permission", permission));
    localVarQueryParameterBaseName = "type";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParameterBaseName = "fuzzy";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("fuzzy", fuzzy));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Performs a contains search against project name.
   * @param maxResult Maximum count of returned elements (optional)
   * @param searchTerm The term to search for in projects (optional)
   * @param startIndex Start index (optional)
   * @param permission only return those projects that querying user has permission to. Default is READ (optional)
   * @return SearchResultsList
   * @throws ApiException if fails to make API call
   */
  public SearchResultsList searchProjects(Integer maxResult, String searchTerm, Integer startIndex, String permission) throws ApiException {
    ApiResponse<SearchResultsList> localVarResponse = searchProjectsWithHttpInfo(maxResult, searchTerm, startIndex, permission);
    return localVarResponse.getData();
  }

  /**
   * 
   * Performs a contains search against project name.
   * @param maxResult Maximum count of returned elements (optional)
   * @param searchTerm The term to search for in projects (optional)
   * @param startIndex Start index (optional)
   * @param permission only return those projects that querying user has permission to. Default is READ (optional)
   * @return ApiResponse&lt;SearchResultsList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SearchResultsList> searchProjectsWithHttpInfo(Integer maxResult, String searchTerm, Integer startIndex, String permission) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = searchProjectsRequestBuilder(maxResult, searchTerm, startIndex, permission);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("searchProjects", localVarResponse);
        }
        return new ApiResponse<SearchResultsList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SearchResultsList>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder searchProjectsRequestBuilder(Integer maxResult, String searchTerm, Integer startIndex, String permission) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/search/projects";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "max-result";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-result", maxResult));
    localVarQueryParameterBaseName = "searchTerm";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchTerm", searchTerm));
    localVarQueryParameterBaseName = "start-index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start-index", startIndex));
    localVarQueryParameterBaseName = "permission";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("permission", permission));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Search for divergent branches names (i.e. vcs branches that have RSS execution results).
   * @param repositoryId id of the linked repository which stores Bamboo Specs (required)
   * @param searchTerm Part of branch name. Used to filter output (optional)
   * @return RestBranchList
   * @throws ApiException if fails to make API call
   */
  public RestBranchList searchSpecsBranches(Long repositoryId, String searchTerm) throws ApiException {
    ApiResponse<RestBranchList> localVarResponse = searchSpecsBranchesWithHttpInfo(repositoryId, searchTerm);
    return localVarResponse.getData();
  }

  /**
   * 
   * Search for divergent branches names (i.e. vcs branches that have RSS execution results).
   * @param repositoryId id of the linked repository which stores Bamboo Specs (required)
   * @param searchTerm Part of branch name. Used to filter output (optional)
   * @return ApiResponse&lt;RestBranchList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestBranchList> searchSpecsBranchesWithHttpInfo(Long repositoryId, String searchTerm) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = searchSpecsBranchesRequestBuilder(repositoryId, searchTerm);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("searchSpecsBranches", localVarResponse);
        }
        return new ApiResponse<RestBranchList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestBranchList>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder searchSpecsBranchesRequestBuilder(Long repositoryId, String searchTerm) throws ApiException {
    // verify the required parameter 'repositoryId' is set
    if (repositoryId == null) {
      throw new ApiException(400, "Missing the required parameter 'repositoryId' when calling searchSpecsBranches");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/repository/{repositoryId}/rssBranches"
        .replace("{repositoryId}", ApiClient.urlEncode(repositoryId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "searchTerm";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchTerm", searchTerm));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Performs a \&quot;starts with\&quot; search against full stage name.
   * @param planKey planKey for plan where stages will be searched for (required)
   * @param maxResult Maximum count of returned elements (optional)
   * @param searchTerm The term to search for in stages (optional)
   * @param startIndex Start index (optional)
   * @param stageId Stage id (optional)
   * @return SearchResultsList
   * @throws ApiException if fails to make API call
   */
  public SearchResultsList searchStages(String planKey, Integer maxResult, String searchTerm, Integer startIndex, String stageId) throws ApiException {
    ApiResponse<SearchResultsList> localVarResponse = searchStagesWithHttpInfo(planKey, maxResult, searchTerm, startIndex, stageId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Performs a \&quot;starts with\&quot; search against full stage name.
   * @param planKey planKey for plan where stages will be searched for (required)
   * @param maxResult Maximum count of returned elements (optional)
   * @param searchTerm The term to search for in stages (optional)
   * @param startIndex Start index (optional)
   * @param stageId Stage id (optional)
   * @return ApiResponse&lt;SearchResultsList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SearchResultsList> searchStagesWithHttpInfo(String planKey, Integer maxResult, String searchTerm, Integer startIndex, String stageId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = searchStagesRequestBuilder(planKey, maxResult, searchTerm, startIndex, stageId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("searchStages", localVarResponse);
        }
        return new ApiResponse<SearchResultsList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SearchResultsList>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder searchStagesRequestBuilder(String planKey, Integer maxResult, String searchTerm, Integer startIndex, String stageId) throws ApiException {
    // verify the required parameter 'planKey' is set
    if (planKey == null) {
      throw new ApiException(400, "Missing the required parameter 'planKey' when calling searchStages");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/search/stages/{planKey}"
        .replace("{planKey}", ApiClient.urlEncode(planKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "max-result";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-result", maxResult));
    localVarQueryParameterBaseName = "searchTerm";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchTerm", searchTerm));
    localVarQueryParameterBaseName = "start-index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start-index", startIndex));
    localVarQueryParameterBaseName = "stageId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("stageId", stageId));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * A starts-with search of users based on their username, full-name and if allowed email address.
   * @param searchTerm The term to search for in users (required)
   * @param maxResult Maximum count of returned elements (optional)
   * @param includeAvatars if true will include avatar urls in the response.  If gravatar is not enabled, no urls will be returned (optional)
   * @param startIndex Start index (optional)
   * @return SearchResultsList
   * @throws ApiException if fails to make API call
   */
  public SearchResultsList searchUsers(String searchTerm, Integer maxResult, Boolean includeAvatars, Integer startIndex) throws ApiException {
    ApiResponse<SearchResultsList> localVarResponse = searchUsersWithHttpInfo(searchTerm, maxResult, includeAvatars, startIndex);
    return localVarResponse.getData();
  }

  /**
   * 
   * A starts-with search of users based on their username, full-name and if allowed email address.
   * @param searchTerm The term to search for in users (required)
   * @param maxResult Maximum count of returned elements (optional)
   * @param includeAvatars if true will include avatar urls in the response.  If gravatar is not enabled, no urls will be returned (optional)
   * @param startIndex Start index (optional)
   * @return ApiResponse&lt;SearchResultsList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SearchResultsList> searchUsersWithHttpInfo(String searchTerm, Integer maxResult, Boolean includeAvatars, Integer startIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = searchUsersRequestBuilder(searchTerm, maxResult, includeAvatars, startIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("searchUsers", localVarResponse);
        }
        return new ApiResponse<SearchResultsList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SearchResultsList>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder searchUsersRequestBuilder(String searchTerm, Integer maxResult, Boolean includeAvatars, Integer startIndex) throws ApiException {
    // verify the required parameter 'searchTerm' is set
    if (searchTerm == null) {
      throw new ApiException(400, "Missing the required parameter 'searchTerm' when calling searchUsers");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/search/users";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "max-result";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-result", maxResult));
    localVarQueryParameterBaseName = "includeAvatars";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("includeAvatars", includeAvatars));
    localVarQueryParameterBaseName = "searchTerm";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchTerm", searchTerm));
    localVarQueryParameterBaseName = "start-index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start-index", startIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Performs a contains search against a version name.
   * @param deploymentProjectId The deployment project to search under (required)
   * @param maxResult Maximum count of returned elements (optional)
   * @param branchKey Narrow the search to releases created out of the branch (optional)
   * @param searchTerm The term to search for in projects (optional)
   * @param startIndex Start index (optional)
   * @param chronologicalOrder Sort releases by creation date (optional)
   * @return SearchResultsList
   * @throws ApiException if fails to make API call
   */
  public SearchResultsList searchVersions(Long deploymentProjectId, Integer maxResult, String branchKey, String searchTerm, Integer startIndex, Boolean chronologicalOrder) throws ApiException {
    ApiResponse<SearchResultsList> localVarResponse = searchVersionsWithHttpInfo(deploymentProjectId, maxResult, branchKey, searchTerm, startIndex, chronologicalOrder);
    return localVarResponse.getData();
  }

  /**
   * 
   * Performs a contains search against a version name.
   * @param deploymentProjectId The deployment project to search under (required)
   * @param maxResult Maximum count of returned elements (optional)
   * @param branchKey Narrow the search to releases created out of the branch (optional)
   * @param searchTerm The term to search for in projects (optional)
   * @param startIndex Start index (optional)
   * @param chronologicalOrder Sort releases by creation date (optional)
   * @return ApiResponse&lt;SearchResultsList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SearchResultsList> searchVersionsWithHttpInfo(Long deploymentProjectId, Integer maxResult, String branchKey, String searchTerm, Integer startIndex, Boolean chronologicalOrder) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = searchVersionsRequestBuilder(deploymentProjectId, maxResult, branchKey, searchTerm, startIndex, chronologicalOrder);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("searchVersions", localVarResponse);
        }
        return new ApiResponse<SearchResultsList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SearchResultsList>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder searchVersionsRequestBuilder(Long deploymentProjectId, Integer maxResult, String branchKey, String searchTerm, Integer startIndex, Boolean chronologicalOrder) throws ApiException {
    // verify the required parameter 'deploymentProjectId' is set
    if (deploymentProjectId == null) {
      throw new ApiException(400, "Missing the required parameter 'deploymentProjectId' when calling searchVersions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/search/versions";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "max-result";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-result", maxResult));
    localVarQueryParameterBaseName = "branchKey";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("branchKey", branchKey));
    localVarQueryParameterBaseName = "searchTerm";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchTerm", searchTerm));
    localVarQueryParameterBaseName = "start-index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start-index", startIndex));
    localVarQueryParameterBaseName = "deploymentProjectId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("deploymentProjectId", deploymentProjectId));
    localVarQueryParameterBaseName = "chronologicalOrder";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("chronologicalOrder", chronologicalOrder));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update global build and deployment expiry configuration for this Bamboo instance. Partial configuration is not allowed (it will fail validation).
   * @param restCombinedExpiryConfiguration  (required)
   * @return RestCombinedExpiryConfiguration
   * @throws ApiException if fails to make API call
   */
  public RestCombinedExpiryConfiguration setConfiguration(RestCombinedExpiryConfiguration restCombinedExpiryConfiguration) throws ApiException {
    ApiResponse<RestCombinedExpiryConfiguration> localVarResponse = setConfigurationWithHttpInfo(restCombinedExpiryConfiguration);
    return localVarResponse.getData();
  }

  /**
   * 
   * Update global build and deployment expiry configuration for this Bamboo instance. Partial configuration is not allowed (it will fail validation).
   * @param restCombinedExpiryConfiguration  (required)
   * @return ApiResponse&lt;RestCombinedExpiryConfiguration&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestCombinedExpiryConfiguration> setConfigurationWithHttpInfo(RestCombinedExpiryConfiguration restCombinedExpiryConfiguration) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = setConfigurationRequestBuilder(restCombinedExpiryConfiguration);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("setConfiguration", localVarResponse);
        }
        return new ApiResponse<RestCombinedExpiryConfiguration>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestCombinedExpiryConfiguration>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder setConfigurationRequestBuilder(RestCombinedExpiryConfiguration restCombinedExpiryConfiguration) throws ApiException {
    // verify the required parameter 'restCombinedExpiryConfiguration' is set
    if (restCombinedExpiryConfiguration == null) {
      throw new ApiException(400, "Missing the required parameter 'restCombinedExpiryConfiguration' when calling setConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/expiry/configuration";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restCombinedExpiryConfiguration);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Saves the list of visible quick filters for currently logged in user.
   * @param requestBody Quick filter ids (required)
   * @throws ApiException if fails to make API call
   */
  public void setVisibleFilters(List<Long> requestBody) throws ApiException {
    setVisibleFiltersWithHttpInfo(requestBody);
  }

  /**
   * 
   * Saves the list of visible quick filters for currently logged in user.
   * @param requestBody Quick filter ids (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> setVisibleFiltersWithHttpInfo(List<Long> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = setVisibleFiltersRequestBuilder(requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("setVisibleFilters", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder setVisibleFiltersRequestBuilder(List<Long> requestBody) throws ApiException {
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'requestBody' when calling setVisibleFilters");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/quickFilter/visible";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Provide list of build scheduled for execution and waiting in build queue.  Fire build execution for specified plan. Effectively, this method adds build to the build queue, so is not guarantied that build would be executed immediately. Depending on currently executed builds and length of build queue, build may be executed when queue would be drained. Additional variables could be passed to this method either as form encoded POST payload or query parameters. PLEASE note: Query parameters are more important - override those stored in form payload. Variables defined in Bamboo as global variables or plan variables MUST be prefixed with bamboo.variable ie. &lt;code&gt;bamboo.variable.myVariable&#x3D;valueForMyVariable&lt;/code&gt;. When global or plan variables would be passed to this method, will override default values for variables.
   * @param projectKey project key (required)
   * @param buildKey plan key (only top level plan key, can not be job key) (required)
   * @param executeAllStages enforce executing all stages in a plan, even if defined as manual stages. Execution will follow and include latest stage, unless some stage will fail. (optional)
   * @param customRevision execute this plan for a custom revision instead of the latest one (optional)
   * @param stage name of the stage that should be executed even if defined as manual stage. Execution will follow to the next manual stage after this or end of plan if no subsequent manual stage (optional)
   * @param startBuildRequest  (optional)
   * @return RestQueuedBuild
   * @throws ApiException if fails to make API call
   */
  public RestQueuedBuild startBuild(String projectKey, String buildKey, Boolean executeAllStages, String customRevision, String stage, StartBuildRequest startBuildRequest) throws ApiException {
    ApiResponse<RestQueuedBuild> localVarResponse = startBuildWithHttpInfo(projectKey, buildKey, executeAllStages, customRevision, stage, startBuildRequest);
    return localVarResponse.getData();
  }

  /**
   * 
   * Provide list of build scheduled for execution and waiting in build queue.  Fire build execution for specified plan. Effectively, this method adds build to the build queue, so is not guarantied that build would be executed immediately. Depending on currently executed builds and length of build queue, build may be executed when queue would be drained. Additional variables could be passed to this method either as form encoded POST payload or query parameters. PLEASE note: Query parameters are more important - override those stored in form payload. Variables defined in Bamboo as global variables or plan variables MUST be prefixed with bamboo.variable ie. &lt;code&gt;bamboo.variable.myVariable&#x3D;valueForMyVariable&lt;/code&gt;. When global or plan variables would be passed to this method, will override default values for variables.
   * @param projectKey project key (required)
   * @param buildKey plan key (only top level plan key, can not be job key) (required)
   * @param executeAllStages enforce executing all stages in a plan, even if defined as manual stages. Execution will follow and include latest stage, unless some stage will fail. (optional)
   * @param customRevision execute this plan for a custom revision instead of the latest one (optional)
   * @param stage name of the stage that should be executed even if defined as manual stage. Execution will follow to the next manual stage after this or end of plan if no subsequent manual stage (optional)
   * @param startBuildRequest  (optional)
   * @return ApiResponse&lt;RestQueuedBuild&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestQueuedBuild> startBuildWithHttpInfo(String projectKey, String buildKey, Boolean executeAllStages, String customRevision, String stage, StartBuildRequest startBuildRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = startBuildRequestBuilder(projectKey, buildKey, executeAllStages, customRevision, stage, startBuildRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("startBuild", localVarResponse);
        }
        return new ApiResponse<RestQueuedBuild>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestQueuedBuild>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder startBuildRequestBuilder(String projectKey, String buildKey, Boolean executeAllStages, String customRevision, String stage, StartBuildRequest startBuildRequest) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling startBuild");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling startBuild");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/queue/{projectKey}-{buildKey}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "executeAllStages";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("executeAllStages", executeAllStages));
    localVarQueryParameterBaseName = "customRevision";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("customRevision", customRevision));
    localVarQueryParameterBaseName = "stage";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("stage", stage));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(startBuildRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Stop build execution.
   * @param projectKey Project key (required)
   * @param buildKey Plan key - IMPORTANT: as build queue contains only jobs not top level plans, plan key here MUST be a job key as opposite to other methods in this resource. (required)
   * @param buildNumber Build number (required)
   * @throws ApiException if fails to make API call
   */
  public void stopBuild(String projectKey, String buildKey, Integer buildNumber) throws ApiException {
    stopBuildWithHttpInfo(projectKey, buildKey, buildNumber);
  }

  /**
   * 
   * Stop build execution.
   * @param projectKey Project key (required)
   * @param buildKey Plan key - IMPORTANT: as build queue contains only jobs not top level plans, plan key here MUST be a job key as opposite to other methods in this resource. (required)
   * @param buildNumber Build number (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> stopBuildWithHttpInfo(String projectKey, String buildKey, Integer buildNumber) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = stopBuildRequestBuilder(projectKey, buildKey, buildNumber);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("stopBuild", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder stopBuildRequestBuilder(String projectKey, String buildKey, Integer buildNumber) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling stopBuild");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling stopBuild");
    }
    // verify the required parameter 'buildNumber' is set
    if (buildNumber == null) {
      throw new ApiException(400, "Missing the required parameter 'buildNumber' when calling stopBuild");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/queue/{projectKey}-{buildKey}-{buildNumber}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()))
        .replace("{buildNumber}", ApiClient.urlEncode(buildNumber.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Test connection to ephemeral agents provider.
   * @param ephemeralAgentsConfigurationDTO  (required)
   * @return TestConnectionResultDto
   * @throws ApiException if fails to make API call
   */
  public TestConnectionResultDto testConnection(EphemeralAgentsConfigurationDTO ephemeralAgentsConfigurationDTO) throws ApiException {
    ApiResponse<TestConnectionResultDto> localVarResponse = testConnectionWithHttpInfo(ephemeralAgentsConfigurationDTO);
    return localVarResponse.getData();
  }

  /**
   * 
   * Test connection to ephemeral agents provider.
   * @param ephemeralAgentsConfigurationDTO  (required)
   * @return ApiResponse&lt;TestConnectionResultDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TestConnectionResultDto> testConnectionWithHttpInfo(EphemeralAgentsConfigurationDTO ephemeralAgentsConfigurationDTO) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = testConnectionRequestBuilder(ephemeralAgentsConfigurationDTO);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("testConnection", localVarResponse);
        }
        return new ApiResponse<TestConnectionResultDto>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TestConnectionResultDto>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder testConnectionRequestBuilder(EphemeralAgentsConfigurationDTO ephemeralAgentsConfigurationDTO) throws ApiException {
    // verify the required parameter 'ephemeralAgentsConfigurationDTO' is set
    if (ephemeralAgentsConfigurationDTO == null) {
      throw new ApiException(400, "Missing the required parameter 'ephemeralAgentsConfigurationDTO' when calling testConnection");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/ephemeral/config/test-connection";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(ephemeralAgentsConfigurationDTO);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Tests connection to a repository if the repository type supports connection testing. Request payload should contain repository configuration.
   * @param body  (optional)
   * @return RestRepositoryConnectionResult
   * @throws ApiException if fails to make API call
   */
  public RestRepositoryConnectionResult testConnection1(Object body) throws ApiException {
    ApiResponse<RestRepositoryConnectionResult> localVarResponse = testConnection1WithHttpInfo(body);
    return localVarResponse.getData();
  }

  /**
   * 
   * Tests connection to a repository if the repository type supports connection testing. Request payload should contain repository configuration.
   * @param body  (optional)
   * @return ApiResponse&lt;RestRepositoryConnectionResult&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestRepositoryConnectionResult> testConnection1WithHttpInfo(Object body) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = testConnection1RequestBuilder(body);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("testConnection1", localVarResponse);
        }
        return new ApiResponse<RestRepositoryConnectionResult>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestRepositoryConnectionResult>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder testConnection1RequestBuilder(Object body) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/repository/testConnection";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Trigger background job execution.
   * @param restScheduledJob  (required)
   * @return RestQuarantineConfig
   * @throws ApiException if fails to make API call
   */
  public RestQuarantineConfig triggerJob(RestScheduledJob restScheduledJob) throws ApiException {
    ApiResponse<RestQuarantineConfig> localVarResponse = triggerJobWithHttpInfo(restScheduledJob);
    return localVarResponse.getData();
  }

  /**
   * 
   * Trigger background job execution.
   * @param restScheduledJob  (required)
   * @return ApiResponse&lt;RestQuarantineConfig&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestQuarantineConfig> triggerJobWithHttpInfo(RestScheduledJob restScheduledJob) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = triggerJobRequestBuilder(restScheduledJob);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("triggerJob", localVarResponse);
        }
        return new ApiResponse<RestQuarantineConfig>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestQuarantineConfig>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder triggerJobRequestBuilder(RestScheduledJob restScheduledJob) throws ApiException {
    // verify the required parameter 'restScheduledJob' is set
    if (restScheduledJob == null) {
      throw new ApiException(400, "Missing the required parameter 'restScheduledJob' when calling triggerJob");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/scheduler/jobs/trigger";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restScheduledJob);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Resource for triggering Repository-stored Bamboo Specs in a &#39;forced&#39; way. Successful requests to this resource will trigger Bamboo Specs execution even if standard processing would have been skipped (e.g. no new commits to process).
   * @param repositoryId id of the repository to trigger (required)
   * @param branch Optional branch of the repository. Works only if repository supports divergent branches (optional)
   * @throws ApiException if fails to make API call
   */
  public void triggerSpecsScanning(Long repositoryId, String branch) throws ApiException {
    triggerSpecsScanningWithHttpInfo(repositoryId, branch);
  }

  /**
   * 
   * Resource for triggering Repository-stored Bamboo Specs in a &#39;forced&#39; way. Successful requests to this resource will trigger Bamboo Specs execution even if standard processing would have been skipped (e.g. no new commits to process).
   * @param repositoryId id of the repository to trigger (required)
   * @param branch Optional branch of the repository. Works only if repository supports divergent branches (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> triggerSpecsScanningWithHttpInfo(Long repositoryId, String branch) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = triggerSpecsScanningRequestBuilder(repositoryId, branch);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("triggerSpecsScanning", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder triggerSpecsScanningRequestBuilder(Long repositoryId, String branch) throws ApiException {
    // verify the required parameter 'repositoryId' is set
    if (repositoryId == null) {
      throw new ApiException(400, "Missing the required parameter 'repositoryId' when calling triggerSpecsScanning");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/repository/{repositoryId}/scanNow"
        .replace("{repositoryId}", ApiClient.urlEncode(repositoryId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "branch";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("branch", branch));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Webhook resource for triggering Repository-stored Bamboo Specs. Either repository ID or name must be provided via query parameters to identify the linked repository in which Bamboo Specs are defined.  Ambiguous requests, which reference more than one repository via the query params, will result in one parameter taking precedence over the others. There&#39;s no guarantee which one.  This resource does not require authorisation. It will always return HTTP 204 response on every valid request, even if the targeted repository doesn&#39;t exist or does not contain Bamboo Specs.
   * @param name Unique name of the linked repository which stores Bamboo Specs (optional)
   * @param repositoryId alternative name of the query parameter to provide repository ID (optional)
   * @param id ID of the linked repository which stores Bamboo Specs (optional)
   * @param repositoryName Alternative name of the query parameter to provide repository name (optional)
   * @throws ApiException if fails to make API call
   */
  public void triggerSpecsScanning1(String name, Long repositoryId, Long id, String repositoryName) throws ApiException {
    triggerSpecsScanning1WithHttpInfo(name, repositoryId, id, repositoryName);
  }

  /**
   * 
   * Webhook resource for triggering Repository-stored Bamboo Specs. Either repository ID or name must be provided via query parameters to identify the linked repository in which Bamboo Specs are defined.  Ambiguous requests, which reference more than one repository via the query params, will result in one parameter taking precedence over the others. There&#39;s no guarantee which one.  This resource does not require authorisation. It will always return HTTP 204 response on every valid request, even if the targeted repository doesn&#39;t exist or does not contain Bamboo Specs.
   * @param name Unique name of the linked repository which stores Bamboo Specs (optional)
   * @param repositoryId alternative name of the query parameter to provide repository ID (optional)
   * @param id ID of the linked repository which stores Bamboo Specs (optional)
   * @param repositoryName Alternative name of the query parameter to provide repository name (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> triggerSpecsScanning1WithHttpInfo(String name, Long repositoryId, Long id, String repositoryName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = triggerSpecsScanning1RequestBuilder(name, repositoryId, id, repositoryName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("triggerSpecsScanning1", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder triggerSpecsScanning1RequestBuilder(String name, Long repositoryId, Long id, String repositoryName) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/repository/scan";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParameterBaseName = "repositoryId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("repositoryId", repositoryId));
    localVarQueryParameterBaseName = "id";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("id", id));
    localVarQueryParameterBaseName = "repositoryName";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("repositoryName", repositoryName));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update existing agent capability. It&#39;s allowed to skip capability key at request payload.
   * @param agentId agent id (required)
   * @param capabilityKey Capability key (required)
   * @param restRemoteAgentCapability Agent capability (required)
   * @throws ApiException if fails to make API call
   */
  public void updateAgentCapability(Long agentId, String capabilityKey, RestRemoteAgentCapability restRemoteAgentCapability) throws ApiException {
    updateAgentCapabilityWithHttpInfo(agentId, capabilityKey, restRemoteAgentCapability);
  }

  /**
   * 
   * Update existing agent capability. It&#39;s allowed to skip capability key at request payload.
   * @param agentId agent id (required)
   * @param capabilityKey Capability key (required)
   * @param restRemoteAgentCapability Agent capability (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> updateAgentCapabilityWithHttpInfo(Long agentId, String capabilityKey, RestRemoteAgentCapability restRemoteAgentCapability) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateAgentCapabilityRequestBuilder(agentId, capabilityKey, restRemoteAgentCapability);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateAgentCapability", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateAgentCapabilityRequestBuilder(Long agentId, String capabilityKey, RestRemoteAgentCapability restRemoteAgentCapability) throws ApiException {
    // verify the required parameter 'agentId' is set
    if (agentId == null) {
      throw new ApiException(400, "Missing the required parameter 'agentId' when calling updateAgentCapability");
    }
    // verify the required parameter 'capabilityKey' is set
    if (capabilityKey == null) {
      throw new ApiException(400, "Missing the required parameter 'capabilityKey' when calling updateAgentCapability");
    }
    // verify the required parameter 'restRemoteAgentCapability' is set
    if (restRemoteAgentCapability == null) {
      throw new ApiException(400, "Missing the required parameter 'restRemoteAgentCapability' when calling updateAgentCapability");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/agent/{agentId}/capability/{capabilityKey}"
        .replace("{agentId}", ApiClient.urlEncode(agentId.toString()))
        .replace("{capabilityKey}", ApiClient.urlEncode(capabilityKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restRemoteAgentCapability);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update Agent-Local Artifact Handler configuration.
   * @param restArtifactHandler New configuration of the artifact handler. If a configuration attribute is not present in the request, the previously stored value is used (required)
   * @return RestArtifactHandler
   * @throws ApiException if fails to make API call
   */
  public RestArtifactHandler updateAgentLocalHandler(RestArtifactHandler restArtifactHandler) throws ApiException {
    ApiResponse<RestArtifactHandler> localVarResponse = updateAgentLocalHandlerWithHttpInfo(restArtifactHandler);
    return localVarResponse.getData();
  }

  /**
   * 
   * Update Agent-Local Artifact Handler configuration.
   * @param restArtifactHandler New configuration of the artifact handler. If a configuration attribute is not present in the request, the previously stored value is used (required)
   * @return ApiResponse&lt;RestArtifactHandler&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestArtifactHandler> updateAgentLocalHandlerWithHttpInfo(RestArtifactHandler restArtifactHandler) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateAgentLocalHandlerRequestBuilder(restArtifactHandler);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateAgentLocalHandler", localVarResponse);
        }
        return new ApiResponse<RestArtifactHandler>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestArtifactHandler>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateAgentLocalHandlerRequestBuilder(RestArtifactHandler restArtifactHandler) throws ApiException {
    // verify the required parameter 'restArtifactHandler' is set
    if (restArtifactHandler == null) {
      throw new ApiException(400, "Missing the required parameter 'restArtifactHandler' when calling updateAgentLocalHandler");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/artifactHandlers/agentLocal";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restArtifactHandler);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Bulk update of all images AMI id.
   * @param imageId AMI id (required)
   * @param newImageId New AMI id (required)
   * @throws ApiException if fails to make API call
   */
  public void updateAllImageIds(String imageId, String newImageId) throws ApiException {
    updateAllImageIdsWithHttpInfo(imageId, newImageId);
  }

  /**
   * 
   * Bulk update of all images AMI id.
   * @param imageId AMI id (required)
   * @param newImageId New AMI id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> updateAllImageIdsWithHttpInfo(String imageId, String newImageId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateAllImageIdsRequestBuilder(imageId, newImageId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateAllImageIds", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateAllImageIdsRequestBuilder(String imageId, String newImageId) throws ApiException {
    // verify the required parameter 'imageId' is set
    if (imageId == null) {
      throw new ApiException(400, "Missing the required parameter 'imageId' when calling updateAllImageIds");
    }
    // verify the required parameter 'newImageId' is set
    if (newImageId == null) {
      throw new ApiException(400, "Missing the required parameter 'newImageId' when calling updateAllImageIds");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/elasticConfiguration/image-id/{imageId}"
        .replace("{imageId}", ApiClient.urlEncode(imageId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "newImageId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("newImageId", newImageId));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Enable/disable audit log.
   * @param restAuditLogConfiguration Audit log settings (required)
   * @return RestAuditLogConfiguration
   * @throws ApiException if fails to make API call
   */
  public RestAuditLogConfiguration updateAuditLogConfiguration(RestAuditLogConfiguration restAuditLogConfiguration) throws ApiException {
    ApiResponse<RestAuditLogConfiguration> localVarResponse = updateAuditLogConfigurationWithHttpInfo(restAuditLogConfiguration);
    return localVarResponse.getData();
  }

  /**
   * 
   * Enable/disable audit log.
   * @param restAuditLogConfiguration Audit log settings (required)
   * @return ApiResponse&lt;RestAuditLogConfiguration&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestAuditLogConfiguration> updateAuditLogConfigurationWithHttpInfo(RestAuditLogConfiguration restAuditLogConfiguration) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateAuditLogConfigurationRequestBuilder(restAuditLogConfiguration);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateAuditLogConfiguration", localVarResponse);
        }
        return new ApiResponse<RestAuditLogConfiguration>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestAuditLogConfiguration>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateAuditLogConfigurationRequestBuilder(RestAuditLogConfiguration restAuditLogConfiguration) throws ApiException {
    // verify the required parameter 'restAuditLogConfiguration' is set
    if (restAuditLogConfiguration == null) {
      throw new ApiException(400, "Missing the required parameter 'restAuditLogConfiguration' when calling updateAuditLogConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/config/auditLog";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restAuditLogConfiguration);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update Bamboo Server Artifact Handler configuration.
   * @param simpleRestArtifactHandler New configuration of the artifact handler. If a configuration attribute is not present in the request, the previously stored value is used (required)
   * @return RestArtifactHandler
   * @throws ApiException if fails to make API call
   */
  public RestArtifactHandler updateBambooRemoteHandler(SimpleRestArtifactHandler simpleRestArtifactHandler) throws ApiException {
    ApiResponse<RestArtifactHandler> localVarResponse = updateBambooRemoteHandlerWithHttpInfo(simpleRestArtifactHandler);
    return localVarResponse.getData();
  }

  /**
   * 
   * Update Bamboo Server Artifact Handler configuration.
   * @param simpleRestArtifactHandler New configuration of the artifact handler. If a configuration attribute is not present in the request, the previously stored value is used (required)
   * @return ApiResponse&lt;RestArtifactHandler&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestArtifactHandler> updateBambooRemoteHandlerWithHttpInfo(SimpleRestArtifactHandler simpleRestArtifactHandler) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateBambooRemoteHandlerRequestBuilder(simpleRestArtifactHandler);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateBambooRemoteHandler", localVarResponse);
        }
        return new ApiResponse<RestArtifactHandler>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestArtifactHandler>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateBambooRemoteHandlerRequestBuilder(SimpleRestArtifactHandler simpleRestArtifactHandler) throws ApiException {
    // verify the required parameter 'simpleRestArtifactHandler' is set
    if (simpleRestArtifactHandler == null) {
      throw new ApiException(400, "Missing the required parameter 'simpleRestArtifactHandler' when calling updateBambooRemoteHandler");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/artifactHandlers/bambooRemote";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(simpleRestArtifactHandler);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update ephemeral agent template capability.
   * @param configurationId Configuration ID (required)
   * @param restCapability Ephemeral agent template capability (required)
   * @throws ApiException if fails to make API call
   */
  public void updateCapability(Long configurationId, RestCapability restCapability) throws ApiException {
    updateCapabilityWithHttpInfo(configurationId, restCapability);
  }

  /**
   * 
   * Update ephemeral agent template capability.
   * @param configurationId Configuration ID (required)
   * @param restCapability Ephemeral agent template capability (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> updateCapabilityWithHttpInfo(Long configurationId, RestCapability restCapability) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateCapabilityRequestBuilder(configurationId, restCapability);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateCapability", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateCapabilityRequestBuilder(Long configurationId, RestCapability restCapability) throws ApiException {
    // verify the required parameter 'configurationId' is set
    if (configurationId == null) {
      throw new ApiException(400, "Missing the required parameter 'configurationId' when calling updateCapability");
    }
    // verify the required parameter 'restCapability' is set
    if (restCapability == null) {
      throw new ApiException(400, "Missing the required parameter 'restCapability' when calling updateCapability");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/ephemeral/templateConfiguration/{configurationId}/capability"
        .replace("{configurationId}", ApiClient.urlEncode(configurationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restCapability);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update elastic image configuration.
   * @param configurationId Image configuration id (required)
   * @param restElasticImageConfig Elastic image configuration (required)
   * @return RestElasticImageConfig
   * @throws ApiException if fails to make API call
   */
  public RestElasticImageConfig updateConfiguration(Long configurationId, RestElasticImageConfig restElasticImageConfig) throws ApiException {
    ApiResponse<RestElasticImageConfig> localVarResponse = updateConfigurationWithHttpInfo(configurationId, restElasticImageConfig);
    return localVarResponse.getData();
  }

  /**
   * 
   * Update elastic image configuration.
   * @param configurationId Image configuration id (required)
   * @param restElasticImageConfig Elastic image configuration (required)
   * @return ApiResponse&lt;RestElasticImageConfig&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestElasticImageConfig> updateConfigurationWithHttpInfo(Long configurationId, RestElasticImageConfig restElasticImageConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateConfigurationRequestBuilder(configurationId, restElasticImageConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateConfiguration", localVarResponse);
        }
        return new ApiResponse<RestElasticImageConfig>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestElasticImageConfig>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateConfigurationRequestBuilder(Long configurationId, RestElasticImageConfig restElasticImageConfig) throws ApiException {
    // verify the required parameter 'configurationId' is set
    if (configurationId == null) {
      throw new ApiException(400, "Missing the required parameter 'configurationId' when calling updateConfiguration");
    }
    // verify the required parameter 'restElasticImageConfig' is set
    if (restElasticImageConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'restElasticImageConfig' when calling updateConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/elasticConfiguration/{configurationId}"
        .replace("{configurationId}", ApiClient.urlEncode(configurationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restElasticImageConfig);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update bamboo server general configurations. Partially update supported.
   * @param restGeneralConfiguration  (required)
   * @return RestBuildConcurrency
   * @throws ApiException if fails to make API call
   */
  public RestBuildConcurrency updateGeneralConfiguration(RestGeneralConfiguration restGeneralConfiguration) throws ApiException {
    ApiResponse<RestBuildConcurrency> localVarResponse = updateGeneralConfigurationWithHttpInfo(restGeneralConfiguration);
    return localVarResponse.getData();
  }

  /**
   * 
   * Update bamboo server general configurations. Partially update supported.
   * @param restGeneralConfiguration  (required)
   * @return ApiResponse&lt;RestBuildConcurrency&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestBuildConcurrency> updateGeneralConfigurationWithHttpInfo(RestGeneralConfiguration restGeneralConfiguration) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateGeneralConfigurationRequestBuilder(restGeneralConfiguration);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateGeneralConfiguration", localVarResponse);
        }
        return new ApiResponse<RestBuildConcurrency>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestBuildConcurrency>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateGeneralConfigurationRequestBuilder(RestGeneralConfiguration restGeneralConfiguration) throws ApiException {
    // verify the required parameter 'restGeneralConfiguration' is set
    if (restGeneralConfiguration == null) {
      throw new ApiException(400, "Missing the required parameter 'restGeneralConfiguration' when calling updateGeneralConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/config/general";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restGeneralConfiguration);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update value of a global variable.
   * @param variableId Id of the variable (required)
   * @param restGlobalVariable  (required)
   * @return RestGlobalVariable
   * @throws ApiException if fails to make API call
   */
  public RestGlobalVariable updateGlobalVariable(String variableId, RestGlobalVariable restGlobalVariable) throws ApiException {
    ApiResponse<RestGlobalVariable> localVarResponse = updateGlobalVariableWithHttpInfo(variableId, restGlobalVariable);
    return localVarResponse.getData();
  }

  /**
   * 
   * Update value of a global variable.
   * @param variableId Id of the variable (required)
   * @param restGlobalVariable  (required)
   * @return ApiResponse&lt;RestGlobalVariable&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestGlobalVariable> updateGlobalVariableWithHttpInfo(String variableId, RestGlobalVariable restGlobalVariable) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateGlobalVariableRequestBuilder(variableId, restGlobalVariable);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateGlobalVariable", localVarResponse);
        }
        return new ApiResponse<RestGlobalVariable>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestGlobalVariable>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateGlobalVariableRequestBuilder(String variableId, RestGlobalVariable restGlobalVariable) throws ApiException {
    // verify the required parameter 'variableId' is set
    if (variableId == null) {
      throw new ApiException(400, "Missing the required parameter 'variableId' when calling updateGlobalVariable");
    }
    // verify the required parameter 'restGlobalVariable' is set
    if (restGlobalVariable == null) {
      throw new ApiException(400, "Missing the required parameter 'restGlobalVariable' when calling updateGlobalVariable");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/globalVariables/{variableId}"
        .replace("{variableId}", ApiClient.urlEncode(variableId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restGlobalVariable);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update or create existing IM server configuration in bamboo. If IM server is already configured in bamboo, update existing configuration. Otherwise, create IM server configuration.
   * @param restIMServerConfiguration  (required)
   * @return RestIMServerConfiguration
   * @throws ApiException if fails to make API call
   */
  public RestIMServerConfiguration updateIMServerConfig(RestIMServerConfiguration restIMServerConfiguration) throws ApiException {
    ApiResponse<RestIMServerConfiguration> localVarResponse = updateIMServerConfigWithHttpInfo(restIMServerConfiguration);
    return localVarResponse.getData();
  }

  /**
   * 
   * Update or create existing IM server configuration in bamboo. If IM server is already configured in bamboo, update existing configuration. Otherwise, create IM server configuration.
   * @param restIMServerConfiguration  (required)
   * @return ApiResponse&lt;RestIMServerConfiguration&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestIMServerConfiguration> updateIMServerConfigWithHttpInfo(RestIMServerConfiguration restIMServerConfiguration) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateIMServerConfigRequestBuilder(restIMServerConfiguration);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateIMServerConfig", localVarResponse);
        }
        return new ApiResponse<RestIMServerConfiguration>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestIMServerConfiguration>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateIMServerConfigRequestBuilder(RestIMServerConfiguration restIMServerConfiguration) throws ApiException {
    // verify the required parameter 'restIMServerConfiguration' is set
    if (restIMServerConfiguration == null) {
      throw new ApiException(400, "Missing the required parameter 'restIMServerConfiguration' when calling updateIMServerConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/config/imServer";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restIMServerConfiguration);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update the mail server configuration.
   * @param restMailConfiguration  (required)
   * @return RestMailConfiguration
   * @throws ApiException if fails to make API call
   */
  public RestMailConfiguration updateMailConfiguration(RestMailConfiguration restMailConfiguration) throws ApiException {
    ApiResponse<RestMailConfiguration> localVarResponse = updateMailConfigurationWithHttpInfo(restMailConfiguration);
    return localVarResponse.getData();
  }

  /**
   * 
   * Update the mail server configuration.
   * @param restMailConfiguration  (required)
   * @return ApiResponse&lt;RestMailConfiguration&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestMailConfiguration> updateMailConfigurationWithHttpInfo(RestMailConfiguration restMailConfiguration) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateMailConfigurationRequestBuilder(restMailConfiguration);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateMailConfiguration", localVarResponse);
        }
        return new ApiResponse<RestMailConfiguration>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestMailConfiguration>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateMailConfigurationRequestBuilder(RestMailConfiguration restMailConfiguration) throws ApiException {
    // verify the required parameter 'restMailConfiguration' is set
    if (restMailConfiguration == null) {
      throw new ApiException(400, "Missing the required parameter 'restMailConfiguration' when calling updateMailConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/config/mailServer";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restMailConfiguration);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update Bamboo quarantine settings.
   * @param restQuarantineConfig  (required)
   * @return RestQuarantineConfig
   * @throws ApiException if fails to make API call
   */
  public RestQuarantineConfig updateQuarantineSettings(RestQuarantineConfig restQuarantineConfig) throws ApiException {
    ApiResponse<RestQuarantineConfig> localVarResponse = updateQuarantineSettingsWithHttpInfo(restQuarantineConfig);
    return localVarResponse.getData();
  }

  /**
   * 
   * Update Bamboo quarantine settings.
   * @param restQuarantineConfig  (required)
   * @return ApiResponse&lt;RestQuarantineConfig&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestQuarantineConfig> updateQuarantineSettingsWithHttpInfo(RestQuarantineConfig restQuarantineConfig) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateQuarantineSettingsRequestBuilder(restQuarantineConfig);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateQuarantineSettings", localVarResponse);
        }
        return new ApiResponse<RestQuarantineConfig>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestQuarantineConfig>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateQuarantineSettingsRequestBuilder(RestQuarantineConfig restQuarantineConfig) throws ApiException {
    // verify the required parameter 'restQuarantineConfig' is set
    if (restQuarantineConfig == null) {
      throw new ApiException(400, "Missing the required parameter 'restQuarantineConfig' when calling updateQuarantineSettings");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/config/quarantine";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restQuarantineConfig);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update quick filter&#39;s basic configuration, e.g. name or position on list. This method does not allow to configure quick filter&#39;s rules.
   * @param id Quick filter id (required)
   * @param restQuickFilter Quick filter (required)
   * @return RestQuickFilter
   * @throws ApiException if fails to make API call
   */
  public RestQuickFilter updateQuickFilter(Long id, RestQuickFilter restQuickFilter) throws ApiException {
    ApiResponse<RestQuickFilter> localVarResponse = updateQuickFilterWithHttpInfo(id, restQuickFilter);
    return localVarResponse.getData();
  }

  /**
   * 
   * Update quick filter&#39;s basic configuration, e.g. name or position on list. This method does not allow to configure quick filter&#39;s rules.
   * @param id Quick filter id (required)
   * @param restQuickFilter Quick filter (required)
   * @return ApiResponse&lt;RestQuickFilter&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestQuickFilter> updateQuickFilterWithHttpInfo(Long id, RestQuickFilter restQuickFilter) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateQuickFilterRequestBuilder(id, restQuickFilter);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateQuickFilter", localVarResponse);
        }
        return new ApiResponse<RestQuickFilter>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestQuickFilter>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateQuickFilterRequestBuilder(Long id, RestQuickFilter restQuickFilter) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateQuickFilter");
    }
    // verify the required parameter 'restQuickFilter' is set
    if (restQuickFilter == null) {
      throw new ApiException(400, "Missing the required parameter 'restQuickFilter' when calling updateQuickFilter");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/quickFilter/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restQuickFilter);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update the remote agent configuration
   * @param restRemoteAgentConfiguration Remote agent configuration (required)
   * @return RestRemoteAgentConfiguration
   * @throws ApiException if fails to make API call
   */
  public RestRemoteAgentConfiguration updateRemoteAgentConfiguration(RestRemoteAgentConfiguration restRemoteAgentConfiguration) throws ApiException {
    ApiResponse<RestRemoteAgentConfiguration> localVarResponse = updateRemoteAgentConfigurationWithHttpInfo(restRemoteAgentConfiguration);
    return localVarResponse.getData();
  }

  /**
   * 
   * Update the remote agent configuration
   * @param restRemoteAgentConfiguration Remote agent configuration (required)
   * @return ApiResponse&lt;RestRemoteAgentConfiguration&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestRemoteAgentConfiguration> updateRemoteAgentConfigurationWithHttpInfo(RestRemoteAgentConfiguration restRemoteAgentConfiguration) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateRemoteAgentConfigurationRequestBuilder(restRemoteAgentConfiguration);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateRemoteAgentConfiguration", localVarResponse);
        }
        return new ApiResponse<RestRemoteAgentConfiguration>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestRemoteAgentConfiguration>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateRemoteAgentConfigurationRequestBuilder(RestRemoteAgentConfiguration restRemoteAgentConfiguration) throws ApiException {
    // verify the required parameter 'restRemoteAgentConfiguration' is set
    if (restRemoteAgentConfiguration == null) {
      throw new ApiException(400, "Missing the required parameter 'restRemoteAgentConfiguration' when calling updateRemoteAgentConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/config/remoteAgentSupport";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restRemoteAgentConfiguration);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update agent details
   * @param agentId Id of the agent (required)
   * @param restAgent RestAgent that contains the update values (required)
   * @return RestAgent
   * @throws ApiException if fails to make API call
   */
  public RestAgent updateRestAgent(String agentId, RestAgent restAgent) throws ApiException {
    ApiResponse<RestAgent> localVarResponse = updateRestAgentWithHttpInfo(agentId, restAgent);
    return localVarResponse.getData();
  }

  /**
   * 
   * Update agent details
   * @param agentId Id of the agent (required)
   * @param restAgent RestAgent that contains the update values (required)
   * @return ApiResponse&lt;RestAgent&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestAgent> updateRestAgentWithHttpInfo(String agentId, RestAgent restAgent) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateRestAgentRequestBuilder(agentId, restAgent);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateRestAgent", localVarResponse);
        }
        return new ApiResponse<RestAgent>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestAgent>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateRestAgentRequestBuilder(String agentId, RestAgent restAgent) throws ApiException {
    // verify the required parameter 'agentId' is set
    if (agentId == null) {
      throw new ApiException(400, "Missing the required parameter 'agentId' when calling updateRestAgent");
    }
    // verify the required parameter 'restAgent' is set
    if (restAgent == null) {
      throw new ApiException(400, "Missing the required parameter 'restAgent' when calling updateRestAgent");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/config/agents/{agentId}"
        .replace("{agentId}", ApiClient.urlEncode(agentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restAgent);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update build concurrency settings. Partially update supported.
   * @param restBuildConcurrency  (required)
   * @return RestBuildConcurrency
   * @throws ApiException if fails to make API call
   */
  public RestBuildConcurrency updateRestBuildConcurrency(RestBuildConcurrency restBuildConcurrency) throws ApiException {
    ApiResponse<RestBuildConcurrency> localVarResponse = updateRestBuildConcurrencyWithHttpInfo(restBuildConcurrency);
    return localVarResponse.getData();
  }

  /**
   * 
   * Update build concurrency settings. Partially update supported.
   * @param restBuildConcurrency  (required)
   * @return ApiResponse&lt;RestBuildConcurrency&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestBuildConcurrency> updateRestBuildConcurrencyWithHttpInfo(RestBuildConcurrency restBuildConcurrency) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateRestBuildConcurrencyRequestBuilder(restBuildConcurrency);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateRestBuildConcurrency", localVarResponse);
        }
        return new ApiResponse<RestBuildConcurrency>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestBuildConcurrency>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateRestBuildConcurrencyRequestBuilder(RestBuildConcurrency restBuildConcurrency) throws ApiException {
    // verify the required parameter 'restBuildConcurrency' is set
    if (restBuildConcurrency == null) {
      throw new ApiException(400, "Missing the required parameter 'restBuildConcurrency' when calling updateRestBuildConcurrency");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/config/build/concurrency";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restBuildConcurrency);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update build monitoring settings. Partially update supported.
   * @param restBuildMonitoring  (required)
   * @return BuildMonitoringLink
   * @throws ApiException if fails to make API call
   */
  public BuildMonitoringLink updateRestBuildMonitoring(RestBuildMonitoring restBuildMonitoring) throws ApiException {
    ApiResponse<BuildMonitoringLink> localVarResponse = updateRestBuildMonitoringWithHttpInfo(restBuildMonitoring);
    return localVarResponse.getData();
  }

  /**
   * 
   * Update build monitoring settings. Partially update supported.
   * @param restBuildMonitoring  (required)
   * @return ApiResponse&lt;BuildMonitoringLink&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BuildMonitoringLink> updateRestBuildMonitoringWithHttpInfo(RestBuildMonitoring restBuildMonitoring) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateRestBuildMonitoringRequestBuilder(restBuildMonitoring);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateRestBuildMonitoring", localVarResponse);
        }
        return new ApiResponse<BuildMonitoringLink>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BuildMonitoringLink>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateRestBuildMonitoringRequestBuilder(RestBuildMonitoring restBuildMonitoring) throws ApiException {
    // verify the required parameter 'restBuildMonitoring' is set
    if (restBuildMonitoring == null) {
      throw new ApiException(400, "Missing the required parameter 'restBuildMonitoring' when calling updateRestBuildMonitoring");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/config/build/monitoring";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restBuildMonitoring);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update elastic configuration.
   * @param restElasticConfiguration  (required)
   * @return RestElasticConfiguration
   * @throws ApiException if fails to make API call
   */
  public RestElasticConfiguration updateRestElasticConfiguration(RestElasticConfiguration restElasticConfiguration) throws ApiException {
    ApiResponse<RestElasticConfiguration> localVarResponse = updateRestElasticConfigurationWithHttpInfo(restElasticConfiguration);
    return localVarResponse.getData();
  }

  /**
   * 
   * Update elastic configuration.
   * @param restElasticConfiguration  (required)
   * @return ApiResponse&lt;RestElasticConfiguration&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestElasticConfiguration> updateRestElasticConfigurationWithHttpInfo(RestElasticConfiguration restElasticConfiguration) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateRestElasticConfigurationRequestBuilder(restElasticConfiguration);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateRestElasticConfiguration", localVarResponse);
        }
        return new ApiResponse<RestElasticConfiguration>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestElasticConfiguration>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateRestElasticConfigurationRequestBuilder(RestElasticConfiguration restElasticConfiguration) throws ApiException {
    // verify the required parameter 'restElasticConfiguration' is set
    if (restElasticConfiguration == null) {
      throw new ApiException(400, "Missing the required parameter 'restElasticConfiguration' when calling updateRestElasticConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/elastic/config";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restElasticConfiguration);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update security settings. Partial update supported.
   * @param restSecuritySettings  (required)
   * @return SecuritySettingsLink
   * @throws ApiException if fails to make API call
   */
  public SecuritySettingsLink updateRestSecuritySettings(RestSecuritySettings restSecuritySettings) throws ApiException {
    ApiResponse<SecuritySettingsLink> localVarResponse = updateRestSecuritySettingsWithHttpInfo(restSecuritySettings);
    return localVarResponse.getData();
  }

  /**
   * 
   * Update security settings. Partial update supported.
   * @param restSecuritySettings  (required)
   * @return ApiResponse&lt;SecuritySettingsLink&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SecuritySettingsLink> updateRestSecuritySettingsWithHttpInfo(RestSecuritySettings restSecuritySettings) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateRestSecuritySettingsRequestBuilder(restSecuritySettings);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateRestSecuritySettings", localVarResponse);
        }
        return new ApiResponse<SecuritySettingsLink>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SecuritySettingsLink>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateRestSecuritySettingsRequestBuilder(RestSecuritySettings restSecuritySettings) throws ApiException {
    // verify the required parameter 'restSecuritySettings' is set
    if (restSecuritySettings == null) {
      throw new ApiException(400, "Missing the required parameter 'restSecuritySettings' when calling updateRestSecuritySettings");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/security/settings";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restSecuritySettings);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update S3 Artifact Handler configuration.
   * @param restArtifactHandler New configuration of the artifact handler. If a configuration attribute is not present in the request, the previously stored value is used (required)
   * @return RestArtifactHandler
   * @throws ApiException if fails to make API call
   */
  public RestArtifactHandler updateS3Handler(RestArtifactHandler restArtifactHandler) throws ApiException {
    ApiResponse<RestArtifactHandler> localVarResponse = updateS3HandlerWithHttpInfo(restArtifactHandler);
    return localVarResponse.getData();
  }

  /**
   * 
   * Update S3 Artifact Handler configuration.
   * @param restArtifactHandler New configuration of the artifact handler. If a configuration attribute is not present in the request, the previously stored value is used (required)
   * @return ApiResponse&lt;RestArtifactHandler&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestArtifactHandler> updateS3HandlerWithHttpInfo(RestArtifactHandler restArtifactHandler) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateS3HandlerRequestBuilder(restArtifactHandler);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateS3Handler", localVarResponse);
        }
        return new ApiResponse<RestArtifactHandler>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestArtifactHandler>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateS3HandlerRequestBuilder(RestArtifactHandler restArtifactHandler) throws ApiException {
    // verify the required parameter 'restArtifactHandler' is set
    if (restArtifactHandler == null) {
      throw new ApiException(400, "Missing the required parameter 'restArtifactHandler' when calling updateS3Handler");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/artifactHandlers/s3";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restArtifactHandler);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update SFTP Artifact Handler configuration.
   * @param simpleRestArtifactHandler New configuration of the artifact handler. If a configuration attribute is not present in the request, the previously stored value is used (required)
   * @return RestArtifactHandler
   * @throws ApiException if fails to make API call
   */
  public RestArtifactHandler updateSftpHandler(SimpleRestArtifactHandler simpleRestArtifactHandler) throws ApiException {
    ApiResponse<RestArtifactHandler> localVarResponse = updateSftpHandlerWithHttpInfo(simpleRestArtifactHandler);
    return localVarResponse.getData();
  }

  /**
   * 
   * Update SFTP Artifact Handler configuration.
   * @param simpleRestArtifactHandler New configuration of the artifact handler. If a configuration attribute is not present in the request, the previously stored value is used (required)
   * @return ApiResponse&lt;RestArtifactHandler&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestArtifactHandler> updateSftpHandlerWithHttpInfo(SimpleRestArtifactHandler simpleRestArtifactHandler) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateSftpHandlerRequestBuilder(simpleRestArtifactHandler);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateSftpHandler", localVarResponse);
        }
        return new ApiResponse<RestArtifactHandler>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestArtifactHandler>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateSftpHandlerRequestBuilder(SimpleRestArtifactHandler simpleRestArtifactHandler) throws ApiException {
    // verify the required parameter 'simpleRestArtifactHandler' is set
    if (simpleRestArtifactHandler == null) {
      throw new ApiException(400, "Missing the required parameter 'simpleRestArtifactHandler' when calling updateSftpHandler");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/artifactHandlers/sftp";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(simpleRestArtifactHandler);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update ephemeral agent template.
   * @param configurationId Configuration ID (required)
   * @param restEphemeralAgentTemplate Ephemeral agent template (required)
   * @return RestEphemeralAgentTemplate
   * @throws ApiException if fails to make API call
   */
  public RestEphemeralAgentTemplate updateTemplateConfiguration(Long configurationId, RestEphemeralAgentTemplate restEphemeralAgentTemplate) throws ApiException {
    ApiResponse<RestEphemeralAgentTemplate> localVarResponse = updateTemplateConfigurationWithHttpInfo(configurationId, restEphemeralAgentTemplate);
    return localVarResponse.getData();
  }

  /**
   * 
   * Update ephemeral agent template.
   * @param configurationId Configuration ID (required)
   * @param restEphemeralAgentTemplate Ephemeral agent template (required)
   * @return ApiResponse&lt;RestEphemeralAgentTemplate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestEphemeralAgentTemplate> updateTemplateConfigurationWithHttpInfo(Long configurationId, RestEphemeralAgentTemplate restEphemeralAgentTemplate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateTemplateConfigurationRequestBuilder(configurationId, restEphemeralAgentTemplate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateTemplateConfiguration", localVarResponse);
        }
        return new ApiResponse<RestEphemeralAgentTemplate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestEphemeralAgentTemplate>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateTemplateConfigurationRequestBuilder(Long configurationId, RestEphemeralAgentTemplate restEphemeralAgentTemplate) throws ApiException {
    // verify the required parameter 'configurationId' is set
    if (configurationId == null) {
      throw new ApiException(400, "Missing the required parameter 'configurationId' when calling updateTemplateConfiguration");
    }
    // verify the required parameter 'restEphemeralAgentTemplate' is set
    if (restEphemeralAgentTemplate == null) {
      throw new ApiException(400, "Missing the required parameter 'restEphemeralAgentTemplate' when calling updateTemplateConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/ephemeral/templateConfiguration/{configurationId}"
        .replace("{configurationId}", ApiClient.urlEncode(configurationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restEphemeralAgentTemplate);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update deployment version status.
   * @param deploymentVersionId Deployment version id (required)
   * @param newStatus deployment version status. Possible values: UNKNOWN, APPROVED, BROKEN, INCOMPLETE (required)
   * @return RestDeploymentVersionStatus
   * @throws ApiException if fails to make API call
   */
  public RestDeploymentVersionStatus updateVersionStatus(String deploymentVersionId, String newStatus) throws ApiException {
    ApiResponse<RestDeploymentVersionStatus> localVarResponse = updateVersionStatusWithHttpInfo(deploymentVersionId, newStatus);
    return localVarResponse.getData();
  }

  /**
   * 
   * Update deployment version status.
   * @param deploymentVersionId Deployment version id (required)
   * @param newStatus deployment version status. Possible values: UNKNOWN, APPROVED, BROKEN, INCOMPLETE (required)
   * @return ApiResponse&lt;RestDeploymentVersionStatus&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestDeploymentVersionStatus> updateVersionStatusWithHttpInfo(String deploymentVersionId, String newStatus) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateVersionStatusRequestBuilder(deploymentVersionId, newStatus);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateVersionStatus", localVarResponse);
        }
        return new ApiResponse<RestDeploymentVersionStatus>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestDeploymentVersionStatus>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateVersionStatusRequestBuilder(String deploymentVersionId, String newStatus) throws ApiException {
    // verify the required parameter 'deploymentVersionId' is set
    if (deploymentVersionId == null) {
      throw new ApiException(400, "Missing the required parameter 'deploymentVersionId' when calling updateVersionStatus");
    }
    // verify the required parameter 'newStatus' is set
    if (newStatus == null) {
      throw new ApiException(400, "Missing the required parameter 'newStatus' when calling updateVersionStatus");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/version/{deploymentVersionId}/status/{newStatus}"
        .replace("{deploymentVersionId}", ApiClient.urlEncode(deploymentVersionId.toString()))
        .replace("{newStatus}", ApiClient.urlEncode(newStatus.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Server side verification that the encrypted value of a global variable has changed.
   * @param restVerificationRequest  (required)
   * @throws ApiException if fails to make API call
   */
  public void verifyGlobalVariableValue(RestVerificationRequest restVerificationRequest) throws ApiException {
    verifyGlobalVariableValueWithHttpInfo(restVerificationRequest);
  }

  /**
   * 
   * Server side verification that the encrypted value of a global variable has changed.
   * @param restVerificationRequest  (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> verifyGlobalVariableValueWithHttpInfo(RestVerificationRequest restVerificationRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = verifyGlobalVariableValueRequestBuilder(restVerificationRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("verifyGlobalVariableValue", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder verifyGlobalVariableValueRequestBuilder(RestVerificationRequest restVerificationRequest) throws ApiException {
    // verify the required parameter 'restVerificationRequest' is set
    if (restVerificationRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'restVerificationRequest' when calling verifyGlobalVariableValue");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/globalVariables/verify";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restVerificationRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
