/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * TestResultsSummary
 */
@JsonPropertyOrder({
  TestResultsSummary.JSON_PROPERTY_FAILED_TEST_CASE_COUNT,
  TestResultsSummary.JSON_PROPERTY_SUCCESSFUL_TEST_CASE_COUNT,
  TestResultsSummary.JSON_PROPERTY_QUARANTINED_TEST_CASE_COUNT,
  TestResultsSummary.JSON_PROPERTY_SKIPPED_TEST_CASE_COUNT,
  TestResultsSummary.JSON_PROPERTY_TEST_SUMMARY_DESCRIPTION,
  TestResultsSummary.JSON_PROPERTY_TOTAL_TEST_CASE_COUNT,
  TestResultsSummary.JSON_PROPERTY_NEW_FAILED_TEST_CASE_COUNT,
  TestResultsSummary.JSON_PROPERTY_EXISTING_FAILED_TEST_COUNT,
  TestResultsSummary.JSON_PROPERTY_FIXED_TEST_CASE_COUNT,
  TestResultsSummary.JSON_PROPERTY_IGNORED_TEST_CASE_COUNT,
  TestResultsSummary.JSON_PROPERTY_TOTAL_TEST_DURATION
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TestResultsSummary implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_FAILED_TEST_CASE_COUNT = "failedTestCaseCount";
  private Integer failedTestCaseCount;

  public static final String JSON_PROPERTY_SUCCESSFUL_TEST_CASE_COUNT = "successfulTestCaseCount";
  private Integer successfulTestCaseCount;

  public static final String JSON_PROPERTY_QUARANTINED_TEST_CASE_COUNT = "quarantinedTestCaseCount";
  private Integer quarantinedTestCaseCount;

  public static final String JSON_PROPERTY_SKIPPED_TEST_CASE_COUNT = "skippedTestCaseCount";
  private Integer skippedTestCaseCount;

  public static final String JSON_PROPERTY_TEST_SUMMARY_DESCRIPTION = "testSummaryDescription";
  private String testSummaryDescription;

  public static final String JSON_PROPERTY_TOTAL_TEST_CASE_COUNT = "totalTestCaseCount";
  private Integer totalTestCaseCount;

  public static final String JSON_PROPERTY_NEW_FAILED_TEST_CASE_COUNT = "newFailedTestCaseCount";
  private Integer newFailedTestCaseCount;

  public static final String JSON_PROPERTY_EXISTING_FAILED_TEST_COUNT = "existingFailedTestCount";
  private Integer existingFailedTestCount;

  public static final String JSON_PROPERTY_FIXED_TEST_CASE_COUNT = "fixedTestCaseCount";
  private Integer fixedTestCaseCount;

  public static final String JSON_PROPERTY_IGNORED_TEST_CASE_COUNT = "ignoredTestCaseCount";
  private Integer ignoredTestCaseCount;

  public static final String JSON_PROPERTY_TOTAL_TEST_DURATION = "totalTestDuration";
  private Long totalTestDuration;

  public TestResultsSummary() { 
  }

  public TestResultsSummary failedTestCaseCount(Integer failedTestCaseCount) {
    this.failedTestCaseCount = failedTestCaseCount;
    return this;
  }

   /**
   * Get failedTestCaseCount
   * @return failedTestCaseCount
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_FAILED_TEST_CASE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFailedTestCaseCount() {
    return failedTestCaseCount;
  }


  @JsonProperty(JSON_PROPERTY_FAILED_TEST_CASE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFailedTestCaseCount(Integer failedTestCaseCount) {
    this.failedTestCaseCount = failedTestCaseCount;
  }


  public TestResultsSummary successfulTestCaseCount(Integer successfulTestCaseCount) {
    this.successfulTestCaseCount = successfulTestCaseCount;
    return this;
  }

   /**
   * Get successfulTestCaseCount
   * @return successfulTestCaseCount
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SUCCESSFUL_TEST_CASE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSuccessfulTestCaseCount() {
    return successfulTestCaseCount;
  }


  @JsonProperty(JSON_PROPERTY_SUCCESSFUL_TEST_CASE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSuccessfulTestCaseCount(Integer successfulTestCaseCount) {
    this.successfulTestCaseCount = successfulTestCaseCount;
  }


  public TestResultsSummary quarantinedTestCaseCount(Integer quarantinedTestCaseCount) {
    this.quarantinedTestCaseCount = quarantinedTestCaseCount;
    return this;
  }

   /**
   * Get quarantinedTestCaseCount
   * @return quarantinedTestCaseCount
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_QUARANTINED_TEST_CASE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getQuarantinedTestCaseCount() {
    return quarantinedTestCaseCount;
  }


  @JsonProperty(JSON_PROPERTY_QUARANTINED_TEST_CASE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuarantinedTestCaseCount(Integer quarantinedTestCaseCount) {
    this.quarantinedTestCaseCount = quarantinedTestCaseCount;
  }


  public TestResultsSummary skippedTestCaseCount(Integer skippedTestCaseCount) {
    this.skippedTestCaseCount = skippedTestCaseCount;
    return this;
  }

   /**
   * Get skippedTestCaseCount
   * @return skippedTestCaseCount
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SKIPPED_TEST_CASE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSkippedTestCaseCount() {
    return skippedTestCaseCount;
  }


  @JsonProperty(JSON_PROPERTY_SKIPPED_TEST_CASE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSkippedTestCaseCount(Integer skippedTestCaseCount) {
    this.skippedTestCaseCount = skippedTestCaseCount;
  }


  public TestResultsSummary testSummaryDescription(String testSummaryDescription) {
    this.testSummaryDescription = testSummaryDescription;
    return this;
  }

   /**
   * Get testSummaryDescription
   * @return testSummaryDescription
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TEST_SUMMARY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTestSummaryDescription() {
    return testSummaryDescription;
  }


  @JsonProperty(JSON_PROPERTY_TEST_SUMMARY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTestSummaryDescription(String testSummaryDescription) {
    this.testSummaryDescription = testSummaryDescription;
  }


  public TestResultsSummary totalTestCaseCount(Integer totalTestCaseCount) {
    this.totalTestCaseCount = totalTestCaseCount;
    return this;
  }

   /**
   * Get totalTestCaseCount
   * @return totalTestCaseCount
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TOTAL_TEST_CASE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTotalTestCaseCount() {
    return totalTestCaseCount;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_TEST_CASE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalTestCaseCount(Integer totalTestCaseCount) {
    this.totalTestCaseCount = totalTestCaseCount;
  }


  public TestResultsSummary newFailedTestCaseCount(Integer newFailedTestCaseCount) {
    this.newFailedTestCaseCount = newFailedTestCaseCount;
    return this;
  }

   /**
   * Get newFailedTestCaseCount
   * @return newFailedTestCaseCount
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NEW_FAILED_TEST_CASE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNewFailedTestCaseCount() {
    return newFailedTestCaseCount;
  }


  @JsonProperty(JSON_PROPERTY_NEW_FAILED_TEST_CASE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNewFailedTestCaseCount(Integer newFailedTestCaseCount) {
    this.newFailedTestCaseCount = newFailedTestCaseCount;
  }


  public TestResultsSummary existingFailedTestCount(Integer existingFailedTestCount) {
    this.existingFailedTestCount = existingFailedTestCount;
    return this;
  }

   /**
   * Get existingFailedTestCount
   * @return existingFailedTestCount
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_EXISTING_FAILED_TEST_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getExistingFailedTestCount() {
    return existingFailedTestCount;
  }


  @JsonProperty(JSON_PROPERTY_EXISTING_FAILED_TEST_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExistingFailedTestCount(Integer existingFailedTestCount) {
    this.existingFailedTestCount = existingFailedTestCount;
  }


  public TestResultsSummary fixedTestCaseCount(Integer fixedTestCaseCount) {
    this.fixedTestCaseCount = fixedTestCaseCount;
    return this;
  }

   /**
   * Get fixedTestCaseCount
   * @return fixedTestCaseCount
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_FIXED_TEST_CASE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFixedTestCaseCount() {
    return fixedTestCaseCount;
  }


  @JsonProperty(JSON_PROPERTY_FIXED_TEST_CASE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFixedTestCaseCount(Integer fixedTestCaseCount) {
    this.fixedTestCaseCount = fixedTestCaseCount;
  }


  public TestResultsSummary ignoredTestCaseCount(Integer ignoredTestCaseCount) {
    this.ignoredTestCaseCount = ignoredTestCaseCount;
    return this;
  }

   /**
   * Get ignoredTestCaseCount
   * @return ignoredTestCaseCount
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_IGNORED_TEST_CASE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getIgnoredTestCaseCount() {
    return ignoredTestCaseCount;
  }


  @JsonProperty(JSON_PROPERTY_IGNORED_TEST_CASE_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIgnoredTestCaseCount(Integer ignoredTestCaseCount) {
    this.ignoredTestCaseCount = ignoredTestCaseCount;
  }


  public TestResultsSummary totalTestDuration(Long totalTestDuration) {
    this.totalTestDuration = totalTestDuration;
    return this;
  }

   /**
   * Get totalTestDuration
   * @return totalTestDuration
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TOTAL_TEST_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getTotalTestDuration() {
    return totalTestDuration;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_TEST_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalTestDuration(Long totalTestDuration) {
    this.totalTestDuration = totalTestDuration;
  }


  /**
   * Return true if this TestResultsSummary object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestResultsSummary testResultsSummary = (TestResultsSummary) o;
    return Objects.equals(this.failedTestCaseCount, testResultsSummary.failedTestCaseCount) &&
        Objects.equals(this.successfulTestCaseCount, testResultsSummary.successfulTestCaseCount) &&
        Objects.equals(this.quarantinedTestCaseCount, testResultsSummary.quarantinedTestCaseCount) &&
        Objects.equals(this.skippedTestCaseCount, testResultsSummary.skippedTestCaseCount) &&
        Objects.equals(this.testSummaryDescription, testResultsSummary.testSummaryDescription) &&
        Objects.equals(this.totalTestCaseCount, testResultsSummary.totalTestCaseCount) &&
        Objects.equals(this.newFailedTestCaseCount, testResultsSummary.newFailedTestCaseCount) &&
        Objects.equals(this.existingFailedTestCount, testResultsSummary.existingFailedTestCount) &&
        Objects.equals(this.fixedTestCaseCount, testResultsSummary.fixedTestCaseCount) &&
        Objects.equals(this.ignoredTestCaseCount, testResultsSummary.ignoredTestCaseCount) &&
        Objects.equals(this.totalTestDuration, testResultsSummary.totalTestDuration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failedTestCaseCount, successfulTestCaseCount, quarantinedTestCaseCount, skippedTestCaseCount, testSummaryDescription, totalTestCaseCount, newFailedTestCaseCount, existingFailedTestCount, fixedTestCaseCount, ignoredTestCaseCount, totalTestDuration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestResultsSummary {\n");
    sb.append("    failedTestCaseCount: ").append(toIndentedString(failedTestCaseCount)).append("\n");
    sb.append("    successfulTestCaseCount: ").append(toIndentedString(successfulTestCaseCount)).append("\n");
    sb.append("    quarantinedTestCaseCount: ").append(toIndentedString(quarantinedTestCaseCount)).append("\n");
    sb.append("    skippedTestCaseCount: ").append(toIndentedString(skippedTestCaseCount)).append("\n");
    sb.append("    testSummaryDescription: ").append(toIndentedString(testSummaryDescription)).append("\n");
    sb.append("    totalTestCaseCount: ").append(toIndentedString(totalTestCaseCount)).append("\n");
    sb.append("    newFailedTestCaseCount: ").append(toIndentedString(newFailedTestCaseCount)).append("\n");
    sb.append("    existingFailedTestCount: ").append(toIndentedString(existingFailedTestCount)).append("\n");
    sb.append("    fixedTestCaseCount: ").append(toIndentedString(fixedTestCaseCount)).append("\n");
    sb.append("    ignoredTestCaseCount: ").append(toIndentedString(ignoredTestCaseCount)).append("\n");
    sb.append("    totalTestDuration: ").append(toIndentedString(totalTestDuration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

