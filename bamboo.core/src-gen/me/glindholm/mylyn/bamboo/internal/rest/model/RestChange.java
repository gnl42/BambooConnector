/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import java.util.Date;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestChangeFileList;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * RestChange
 */
@JsonPropertyOrder({
  RestChange.JSON_PROPERTY_EXPAND,
  RestChange.JSON_PROPERTY_AUTHOR,
  RestChange.JSON_PROPERTY_USER_NAME,
  RestChange.JSON_PROPERTY_FULL_NAME,
  RestChange.JSON_PROPERTY_COMMENT,
  RestChange.JSON_PROPERTY_CHANGESET_ID,
  RestChange.JSON_PROPERTY_COMMIT_URL,
  RestChange.JSON_PROPERTY_DATE,
  RestChange.JSON_PROPERTY_CHANGE_FILES
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RestChange implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_EXPAND = "expand";
  private String expand;

  public static final String JSON_PROPERTY_AUTHOR = "author";
  private String author;

  public static final String JSON_PROPERTY_USER_NAME = "userName";
  private String userName;

  public static final String JSON_PROPERTY_FULL_NAME = "fullName";
  private String fullName;

  public static final String JSON_PROPERTY_COMMENT = "comment";
  private String comment;

  public static final String JSON_PROPERTY_CHANGESET_ID = "changesetId";
  private String changesetId;

  public static final String JSON_PROPERTY_COMMIT_URL = "commitUrl";
  private String commitUrl;

  public static final String JSON_PROPERTY_DATE = "date";
  private Date date;

  public static final String JSON_PROPERTY_CHANGE_FILES = "changeFiles";
  private RestChangeFileList changeFiles;

  public RestChange() { 
  }

  public RestChange expand(String expand) {
    this.expand = expand;
    return this;
  }

   /**
   * Get expand
   * @return expand
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_EXPAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExpand() {
    return expand;
  }


  @JsonProperty(JSON_PROPERTY_EXPAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpand(String expand) {
    this.expand = expand;
  }


  public RestChange author(String author) {
    this.author = author;
    return this;
  }

   /**
   * Get author
   * @return author
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_AUTHOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAuthor() {
    return author;
  }


  @JsonProperty(JSON_PROPERTY_AUTHOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthor(String author) {
    this.author = author;
  }


  public RestChange userName(String userName) {
    this.userName = userName;
    return this;
  }

   /**
   * Get userName
   * @return userName
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_USER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserName() {
    return userName;
  }


  @JsonProperty(JSON_PROPERTY_USER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserName(String userName) {
    this.userName = userName;
  }


  public RestChange fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

   /**
   * Get fullName
   * @return fullName
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_FULL_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFullName() {
    return fullName;
  }


  @JsonProperty(JSON_PROPERTY_FULL_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public RestChange comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getComment() {
    return comment;
  }


  @JsonProperty(JSON_PROPERTY_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setComment(String comment) {
    this.comment = comment;
  }


  public RestChange changesetId(String changesetId) {
    this.changesetId = changesetId;
    return this;
  }

   /**
   * Get changesetId
   * @return changesetId
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CHANGESET_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getChangesetId() {
    return changesetId;
  }


  @JsonProperty(JSON_PROPERTY_CHANGESET_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChangesetId(String changesetId) {
    this.changesetId = changesetId;
  }


  public RestChange commitUrl(String commitUrl) {
    this.commitUrl = commitUrl;
    return this;
  }

   /**
   * Get commitUrl
   * @return commitUrl
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_COMMIT_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCommitUrl() {
    return commitUrl;
  }


  @JsonProperty(JSON_PROPERTY_COMMIT_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommitUrl(String commitUrl) {
    this.commitUrl = commitUrl;
  }


  public RestChange date(Date date) {
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Date getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDate(Date date) {
    this.date = date;
  }


  public RestChange changeFiles(RestChangeFileList changeFiles) {
    this.changeFiles = changeFiles;
    return this;
  }

   /**
   * Get changeFiles
   * @return changeFiles
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CHANGE_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestChangeFileList getChangeFiles() {
    return changeFiles;
  }


  @JsonProperty(JSON_PROPERTY_CHANGE_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChangeFiles(RestChangeFileList changeFiles) {
    this.changeFiles = changeFiles;
  }


  /**
   * Return true if this RestChange object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestChange restChange = (RestChange) o;
    return Objects.equals(this.expand, restChange.expand) &&
        Objects.equals(this.author, restChange.author) &&
        Objects.equals(this.userName, restChange.userName) &&
        Objects.equals(this.fullName, restChange.fullName) &&
        Objects.equals(this.comment, restChange.comment) &&
        Objects.equals(this.changesetId, restChange.changesetId) &&
        Objects.equals(this.commitUrl, restChange.commitUrl) &&
        Objects.equals(this.date, restChange.date) &&
        Objects.equals(this.changeFiles, restChange.changeFiles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expand, author, userName, fullName, comment, changesetId, commitUrl, date, changeFiles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestChange {\n");
    sb.append("    expand: ").append(toIndentedString(expand)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    changesetId: ").append(toIndentedString(changesetId)).append("\n");
    sb.append("    commitUrl: ").append(toIndentedString(commitUrl)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    changeFiles: ").append(toIndentedString(changeFiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

