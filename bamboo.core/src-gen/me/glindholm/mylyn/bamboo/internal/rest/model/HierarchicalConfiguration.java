/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import me.glindholm.mylyn.bamboo.internal.rest.model.ConfigurationInterpolator;
import me.glindholm.mylyn.bamboo.internal.rest.model.ConfigurationNode;
import me.glindholm.mylyn.bamboo.internal.rest.model.Log;
import me.glindholm.mylyn.bamboo.internal.rest.model.Node;
import me.glindholm.mylyn.bamboo.internal.rest.model.StrSubstitutor;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * HierarchicalConfiguration
 */
@JsonPropertyOrder({
  HierarchicalConfiguration.JSON_PROPERTY_ERROR_LISTENERS,
  HierarchicalConfiguration.JSON_PROPERTY_DETAIL_EVENTS,
  HierarchicalConfiguration.JSON_PROPERTY_LIST_DELIMITER,
  HierarchicalConfiguration.JSON_PROPERTY_DELIMITER_PARSING_DISABLED,
  HierarchicalConfiguration.JSON_PROPERTY_THROW_EXCEPTION_ON_MISSING,
  HierarchicalConfiguration.JSON_PROPERTY_SUBSTITUTOR,
  HierarchicalConfiguration.JSON_PROPERTY_ROOT,
  HierarchicalConfiguration.JSON_PROPERTY_ROOT_NODE,
  HierarchicalConfiguration.JSON_PROPERTY_EXPRESSION_ENGINE,
  HierarchicalConfiguration.JSON_PROPERTY_KEYS,
  HierarchicalConfiguration.JSON_PROPERTY_LOGGER,
  HierarchicalConfiguration.JSON_PROPERTY_INTERPOLATOR,
  HierarchicalConfiguration.JSON_PROPERTY_CONFIGURATION_LISTENERS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class HierarchicalConfiguration implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ERROR_LISTENERS = "errorListeners";
  private List<Object> errorListeners;

  public static final String JSON_PROPERTY_DETAIL_EVENTS = "detailEvents";
  private Boolean detailEvents;

  public static final String JSON_PROPERTY_LIST_DELIMITER = "listDelimiter";
  private String listDelimiter;

  public static final String JSON_PROPERTY_DELIMITER_PARSING_DISABLED = "delimiterParsingDisabled";
  private Boolean delimiterParsingDisabled;

  public static final String JSON_PROPERTY_THROW_EXCEPTION_ON_MISSING = "throwExceptionOnMissing";
  private Boolean throwExceptionOnMissing;

  public static final String JSON_PROPERTY_SUBSTITUTOR = "substitutor";
  private StrSubstitutor substitutor;

  public static final String JSON_PROPERTY_ROOT = "root";
  private Node root;

  public static final String JSON_PROPERTY_ROOT_NODE = "rootNode";
  private ConfigurationNode rootNode;

  public static final String JSON_PROPERTY_EXPRESSION_ENGINE = "expressionEngine";
  private JsonNullable<Object> expressionEngine = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_KEYS = "keys";
  private Object keys;

  public static final String JSON_PROPERTY_LOGGER = "logger";
  private Log logger;

  public static final String JSON_PROPERTY_INTERPOLATOR = "interpolator";
  private ConfigurationInterpolator interpolator;

  public static final String JSON_PROPERTY_CONFIGURATION_LISTENERS = "configurationListeners";
  private List<Object> configurationListeners;

  public HierarchicalConfiguration() { 
  }

  public HierarchicalConfiguration errorListeners(List<Object> errorListeners) {
    this.errorListeners = errorListeners;
    return this;
  }

  public HierarchicalConfiguration addErrorListenersItem(Object errorListenersItem) {
    if (this.errorListeners == null) {
      this.errorListeners = new ArrayList<>();
    }
    this.errorListeners.add(errorListenersItem);
    return this;
  }

   /**
   * Get errorListeners
   * @return errorListeners
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ERROR_LISTENERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Object> getErrorListeners() {
    return errorListeners;
  }


  @JsonProperty(JSON_PROPERTY_ERROR_LISTENERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setErrorListeners(List<Object> errorListeners) {
    this.errorListeners = errorListeners;
  }


  public HierarchicalConfiguration detailEvents(Boolean detailEvents) {
    this.detailEvents = detailEvents;
    return this;
  }

   /**
   * Get detailEvents
   * @return detailEvents
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DETAIL_EVENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDetailEvents() {
    return detailEvents;
  }


  @JsonProperty(JSON_PROPERTY_DETAIL_EVENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDetailEvents(Boolean detailEvents) {
    this.detailEvents = detailEvents;
  }


  public HierarchicalConfiguration listDelimiter(String listDelimiter) {
    this.listDelimiter = listDelimiter;
    return this;
  }

   /**
   * Get listDelimiter
   * @return listDelimiter
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_LIST_DELIMITER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getListDelimiter() {
    return listDelimiter;
  }


  @JsonProperty(JSON_PROPERTY_LIST_DELIMITER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setListDelimiter(String listDelimiter) {
    this.listDelimiter = listDelimiter;
  }


  public HierarchicalConfiguration delimiterParsingDisabled(Boolean delimiterParsingDisabled) {
    this.delimiterParsingDisabled = delimiterParsingDisabled;
    return this;
  }

   /**
   * Get delimiterParsingDisabled
   * @return delimiterParsingDisabled
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DELIMITER_PARSING_DISABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDelimiterParsingDisabled() {
    return delimiterParsingDisabled;
  }


  @JsonProperty(JSON_PROPERTY_DELIMITER_PARSING_DISABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDelimiterParsingDisabled(Boolean delimiterParsingDisabled) {
    this.delimiterParsingDisabled = delimiterParsingDisabled;
  }


  public HierarchicalConfiguration throwExceptionOnMissing(Boolean throwExceptionOnMissing) {
    this.throwExceptionOnMissing = throwExceptionOnMissing;
    return this;
  }

   /**
   * Get throwExceptionOnMissing
   * @return throwExceptionOnMissing
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_THROW_EXCEPTION_ON_MISSING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getThrowExceptionOnMissing() {
    return throwExceptionOnMissing;
  }


  @JsonProperty(JSON_PROPERTY_THROW_EXCEPTION_ON_MISSING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThrowExceptionOnMissing(Boolean throwExceptionOnMissing) {
    this.throwExceptionOnMissing = throwExceptionOnMissing;
  }


  public HierarchicalConfiguration substitutor(StrSubstitutor substitutor) {
    this.substitutor = substitutor;
    return this;
  }

   /**
   * Get substitutor
   * @return substitutor
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SUBSTITUTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StrSubstitutor getSubstitutor() {
    return substitutor;
  }


  @JsonProperty(JSON_PROPERTY_SUBSTITUTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubstitutor(StrSubstitutor substitutor) {
    this.substitutor = substitutor;
  }


  public HierarchicalConfiguration root(Node root) {
    this.root = root;
    return this;
  }

   /**
   * Get root
   * @return root
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ROOT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Node getRoot() {
    return root;
  }


  @JsonProperty(JSON_PROPERTY_ROOT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRoot(Node root) {
    this.root = root;
  }


  public HierarchicalConfiguration rootNode(ConfigurationNode rootNode) {
    this.rootNode = rootNode;
    return this;
  }

   /**
   * Get rootNode
   * @return rootNode
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ROOT_NODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConfigurationNode getRootNode() {
    return rootNode;
  }


  @JsonProperty(JSON_PROPERTY_ROOT_NODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRootNode(ConfigurationNode rootNode) {
    this.rootNode = rootNode;
  }


  public HierarchicalConfiguration expressionEngine(Object expressionEngine) {
    this.expressionEngine = JsonNullable.<Object>of(expressionEngine);
    return this;
  }

   /**
   * Get expressionEngine
   * @return expressionEngine
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonIgnore

  public Object getExpressionEngine() {
        return expressionEngine.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXPRESSION_ENGINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getExpressionEngine_JsonNullable() {
    return expressionEngine;
  }
  
  @JsonProperty(JSON_PROPERTY_EXPRESSION_ENGINE)
  public void setExpressionEngine_JsonNullable(JsonNullable<Object> expressionEngine) {
    this.expressionEngine = expressionEngine;
  }

  public void setExpressionEngine(Object expressionEngine) {
    this.expressionEngine = JsonNullable.<Object>of(expressionEngine);
  }


  public HierarchicalConfiguration keys(Object keys) {
    this.keys = keys;
    return this;
  }

   /**
   * Get keys
   * @return keys
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_KEYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getKeys() {
    return keys;
  }


  @JsonProperty(JSON_PROPERTY_KEYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKeys(Object keys) {
    this.keys = keys;
  }


  public HierarchicalConfiguration logger(Log logger) {
    this.logger = logger;
    return this;
  }

   /**
   * Get logger
   * @return logger
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_LOGGER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Log getLogger() {
    return logger;
  }


  @JsonProperty(JSON_PROPERTY_LOGGER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogger(Log logger) {
    this.logger = logger;
  }


  public HierarchicalConfiguration interpolator(ConfigurationInterpolator interpolator) {
    this.interpolator = interpolator;
    return this;
  }

   /**
   * Get interpolator
   * @return interpolator
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_INTERPOLATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConfigurationInterpolator getInterpolator() {
    return interpolator;
  }


  @JsonProperty(JSON_PROPERTY_INTERPOLATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInterpolator(ConfigurationInterpolator interpolator) {
    this.interpolator = interpolator;
  }


  public HierarchicalConfiguration configurationListeners(List<Object> configurationListeners) {
    this.configurationListeners = configurationListeners;
    return this;
  }

  public HierarchicalConfiguration addConfigurationListenersItem(Object configurationListenersItem) {
    if (this.configurationListeners == null) {
      this.configurationListeners = new ArrayList<>();
    }
    this.configurationListeners.add(configurationListenersItem);
    return this;
  }

   /**
   * Get configurationListeners
   * @return configurationListeners
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CONFIGURATION_LISTENERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Object> getConfigurationListeners() {
    return configurationListeners;
  }


  @JsonProperty(JSON_PROPERTY_CONFIGURATION_LISTENERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfigurationListeners(List<Object> configurationListeners) {
    this.configurationListeners = configurationListeners;
  }


  /**
   * Return true if this HierarchicalConfiguration object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HierarchicalConfiguration hierarchicalConfiguration = (HierarchicalConfiguration) o;
    return Objects.equals(this.errorListeners, hierarchicalConfiguration.errorListeners) &&
        Objects.equals(this.detailEvents, hierarchicalConfiguration.detailEvents) &&
        Objects.equals(this.listDelimiter, hierarchicalConfiguration.listDelimiter) &&
        Objects.equals(this.delimiterParsingDisabled, hierarchicalConfiguration.delimiterParsingDisabled) &&
        Objects.equals(this.throwExceptionOnMissing, hierarchicalConfiguration.throwExceptionOnMissing) &&
        Objects.equals(this.substitutor, hierarchicalConfiguration.substitutor) &&
        Objects.equals(this.root, hierarchicalConfiguration.root) &&
        Objects.equals(this.rootNode, hierarchicalConfiguration.rootNode) &&
        equalsNullable(this.expressionEngine, hierarchicalConfiguration.expressionEngine) &&
        Objects.equals(this.keys, hierarchicalConfiguration.keys) &&
        Objects.equals(this.logger, hierarchicalConfiguration.logger) &&
        Objects.equals(this.interpolator, hierarchicalConfiguration.interpolator) &&
        Objects.equals(this.configurationListeners, hierarchicalConfiguration.configurationListeners);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorListeners, detailEvents, listDelimiter, delimiterParsingDisabled, throwExceptionOnMissing, substitutor, root, rootNode, hashCodeNullable(expressionEngine), keys, logger, interpolator, configurationListeners);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HierarchicalConfiguration {\n");
    sb.append("    errorListeners: ").append(toIndentedString(errorListeners)).append("\n");
    sb.append("    detailEvents: ").append(toIndentedString(detailEvents)).append("\n");
    sb.append("    listDelimiter: ").append(toIndentedString(listDelimiter)).append("\n");
    sb.append("    delimiterParsingDisabled: ").append(toIndentedString(delimiterParsingDisabled)).append("\n");
    sb.append("    throwExceptionOnMissing: ").append(toIndentedString(throwExceptionOnMissing)).append("\n");
    sb.append("    substitutor: ").append(toIndentedString(substitutor)).append("\n");
    sb.append("    root: ").append(toIndentedString(root)).append("\n");
    sb.append("    rootNode: ").append(toIndentedString(rootNode)).append("\n");
    sb.append("    expressionEngine: ").append(toIndentedString(expressionEngine)).append("\n");
    sb.append("    keys: ").append(toIndentedString(keys)).append("\n");
    sb.append("    logger: ").append(toIndentedString(logger)).append("\n");
    sb.append("    interpolator: ").append(toIndentedString(interpolator)).append("\n");
    sb.append("    configurationListeners: ").append(toIndentedString(configurationListeners)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

