/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import me.glindholm.mylyn.bamboo.internal.rest.model.BambooEntityOid;
import me.glindholm.mylyn.bamboo.internal.rest.model.HierarchicalConfiguration;
import me.glindholm.mylyn.bamboo.internal.rest.model.Repository;
import me.glindholm.mylyn.bamboo.internal.rest.model.WebRepositoryViewer;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * RepositoryDefinition
 */
@JsonPropertyOrder({
  RepositoryDefinition.JSON_PROPERTY_MARKED_FOR_DELETION,
  RepositoryDefinition.JSON_PROPERTY_ENTITY_TYPE,
  RepositoryDefinition.JSON_PROPERTY_CONFIGURATION,
  RepositoryDefinition.JSON_PROPERTY_REPOSITORY,
  RepositoryDefinition.JSON_PROPERTY_GLOBAL,
  RepositoryDefinition.JSON_PROPERTY_WEB_REPOSITORY_PLUGIN_KEY,
  RepositoryDefinition.JSON_PROPERTY_WEB_REPOSITORY_VIEWER,
  RepositoryDefinition.JSON_PROPERTY_ID,
  RepositoryDefinition.JSON_PROPERTY_DESCRIPTION,
  RepositoryDefinition.JSON_PROPERTY_NAME,
  RepositoryDefinition.JSON_PROPERTY_NEW_REPOSITORY_INSTANCE,
  RepositoryDefinition.JSON_PROPERTY_OID,
  RepositoryDefinition.JSON_PROPERTY_PLUGIN_KEY,
  RepositoryDefinition.JSON_PROPERTY_POSITION
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RepositoryDefinition implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_MARKED_FOR_DELETION = "markedForDeletion";
  private Boolean markedForDeletion;

  /**
   * Gets or Sets entityType
   */
  public enum EntityTypeEnum {
    CHAIN("CHAIN"),
    
    STAGE("STAGE"),
    
    JOB("JOB"),
    
    REPOSITORY("REPOSITORY"),
    
    CHAIN_BRANCH("CHAIN_BRANCH"),
    
    JOB_BRANCH("JOB_BRANCH"),
    
    TASK("TASK"),
    
    PROJECT("PROJECT"),
    
    ARTIFACT_DEFINITION("ARTIFACT_DEFINITION"),
    
    DEPLOYMENT_PROJECT("DEPLOYMENT_PROJECT"),
    
    SHARED_CREDENTIAL("SHARED_CREDENTIAL");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ENTITY_TYPE = "entityType";
  private EntityTypeEnum entityType;

  public static final String JSON_PROPERTY_CONFIGURATION = "configuration";
  private HierarchicalConfiguration _configuration;

  public static final String JSON_PROPERTY_REPOSITORY = "repository";
  private Repository repository;

  public static final String JSON_PROPERTY_GLOBAL = "global";
  private Boolean global;

  public static final String JSON_PROPERTY_WEB_REPOSITORY_PLUGIN_KEY = "webRepositoryPluginKey";
  private String webRepositoryPluginKey;

  public static final String JSON_PROPERTY_WEB_REPOSITORY_VIEWER = "webRepositoryViewer";
  private WebRepositoryViewer webRepositoryViewer;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_NEW_REPOSITORY_INSTANCE = "newRepositoryInstance";
  private Repository newRepositoryInstance;

  public static final String JSON_PROPERTY_OID = "oid";
  private BambooEntityOid oid;

  public static final String JSON_PROPERTY_PLUGIN_KEY = "pluginKey";
  private String pluginKey;

  public static final String JSON_PROPERTY_POSITION = "position";
  private Integer position;

  public RepositoryDefinition() { 
  }

  public RepositoryDefinition markedForDeletion(Boolean markedForDeletion) {
    this.markedForDeletion = markedForDeletion;
    return this;
  }

   /**
   * Get markedForDeletion
   * @return markedForDeletion
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MARKED_FOR_DELETION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getMarkedForDeletion() {
    return markedForDeletion;
  }


  @JsonProperty(JSON_PROPERTY_MARKED_FOR_DELETION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMarkedForDeletion(Boolean markedForDeletion) {
    this.markedForDeletion = markedForDeletion;
  }


  public RepositoryDefinition entityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * Get entityType
   * @return entityType
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EntityTypeEnum getEntityType() {
    return entityType;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
  }


  public RepositoryDefinition _configuration(HierarchicalConfiguration _configuration) {
    this._configuration = _configuration;
    return this;
  }

   /**
   * Get _configuration
   * @return _configuration
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public HierarchicalConfiguration getConfiguration() {
    return _configuration;
  }


  @JsonProperty(JSON_PROPERTY_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfiguration(HierarchicalConfiguration _configuration) {
    this._configuration = _configuration;
  }


  public RepositoryDefinition repository(Repository repository) {
    this.repository = repository;
    return this;
  }

   /**
   * Get repository
   * @return repository
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_REPOSITORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Repository getRepository() {
    return repository;
  }


  @JsonProperty(JSON_PROPERTY_REPOSITORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRepository(Repository repository) {
    this.repository = repository;
  }


  public RepositoryDefinition global(Boolean global) {
    this.global = global;
    return this;
  }

   /**
   * Get global
   * @return global
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_GLOBAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getGlobal() {
    return global;
  }


  @JsonProperty(JSON_PROPERTY_GLOBAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGlobal(Boolean global) {
    this.global = global;
  }


  public RepositoryDefinition webRepositoryPluginKey(String webRepositoryPluginKey) {
    this.webRepositoryPluginKey = webRepositoryPluginKey;
    return this;
  }

   /**
   * Get webRepositoryPluginKey
   * @return webRepositoryPluginKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_WEB_REPOSITORY_PLUGIN_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getWebRepositoryPluginKey() {
    return webRepositoryPluginKey;
  }


  @JsonProperty(JSON_PROPERTY_WEB_REPOSITORY_PLUGIN_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWebRepositoryPluginKey(String webRepositoryPluginKey) {
    this.webRepositoryPluginKey = webRepositoryPluginKey;
  }


  public RepositoryDefinition webRepositoryViewer(WebRepositoryViewer webRepositoryViewer) {
    this.webRepositoryViewer = webRepositoryViewer;
    return this;
  }

   /**
   * Get webRepositoryViewer
   * @return webRepositoryViewer
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_WEB_REPOSITORY_VIEWER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public WebRepositoryViewer getWebRepositoryViewer() {
    return webRepositoryViewer;
  }


  @JsonProperty(JSON_PROPERTY_WEB_REPOSITORY_VIEWER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWebRepositoryViewer(WebRepositoryViewer webRepositoryViewer) {
    this.webRepositoryViewer = webRepositoryViewer;
  }


  public RepositoryDefinition id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  public RepositoryDefinition description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public RepositoryDefinition name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public RepositoryDefinition newRepositoryInstance(Repository newRepositoryInstance) {
    this.newRepositoryInstance = newRepositoryInstance;
    return this;
  }

   /**
   * Get newRepositoryInstance
   * @return newRepositoryInstance
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NEW_REPOSITORY_INSTANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Repository getNewRepositoryInstance() {
    return newRepositoryInstance;
  }


  @JsonProperty(JSON_PROPERTY_NEW_REPOSITORY_INSTANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNewRepositoryInstance(Repository newRepositoryInstance) {
    this.newRepositoryInstance = newRepositoryInstance;
  }


  public RepositoryDefinition oid(BambooEntityOid oid) {
    this.oid = oid;
    return this;
  }

   /**
   * Get oid
   * @return oid
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_OID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BambooEntityOid getOid() {
    return oid;
  }


  @JsonProperty(JSON_PROPERTY_OID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOid(BambooEntityOid oid) {
    this.oid = oid;
  }


  public RepositoryDefinition pluginKey(String pluginKey) {
    this.pluginKey = pluginKey;
    return this;
  }

   /**
   * Get pluginKey
   * @return pluginKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLUGIN_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPluginKey() {
    return pluginKey;
  }


  @JsonProperty(JSON_PROPERTY_PLUGIN_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPluginKey(String pluginKey) {
    this.pluginKey = pluginKey;
  }


  public RepositoryDefinition position(Integer position) {
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_POSITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPosition() {
    return position;
  }


  @JsonProperty(JSON_PROPERTY_POSITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPosition(Integer position) {
    this.position = position;
  }


  /**
   * Return true if this RepositoryDefinition object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepositoryDefinition repositoryDefinition = (RepositoryDefinition) o;
    return Objects.equals(this.markedForDeletion, repositoryDefinition.markedForDeletion) &&
        Objects.equals(this.entityType, repositoryDefinition.entityType) &&
        Objects.equals(this._configuration, repositoryDefinition._configuration) &&
        Objects.equals(this.repository, repositoryDefinition.repository) &&
        Objects.equals(this.global, repositoryDefinition.global) &&
        Objects.equals(this.webRepositoryPluginKey, repositoryDefinition.webRepositoryPluginKey) &&
        Objects.equals(this.webRepositoryViewer, repositoryDefinition.webRepositoryViewer) &&
        Objects.equals(this.id, repositoryDefinition.id) &&
        Objects.equals(this.description, repositoryDefinition.description) &&
        Objects.equals(this.name, repositoryDefinition.name) &&
        Objects.equals(this.newRepositoryInstance, repositoryDefinition.newRepositoryInstance) &&
        Objects.equals(this.oid, repositoryDefinition.oid) &&
        Objects.equals(this.pluginKey, repositoryDefinition.pluginKey) &&
        Objects.equals(this.position, repositoryDefinition.position);
  }

  @Override
  public int hashCode() {
    return Objects.hash(markedForDeletion, entityType, _configuration, repository, global, webRepositoryPluginKey, webRepositoryViewer, id, description, name, newRepositoryInstance, oid, pluginKey, position);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepositoryDefinition {\n");
    sb.append("    markedForDeletion: ").append(toIndentedString(markedForDeletion)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    global: ").append(toIndentedString(global)).append("\n");
    sb.append("    webRepositoryPluginKey: ").append(toIndentedString(webRepositoryPluginKey)).append("\n");
    sb.append("    webRepositoryViewer: ").append(toIndentedString(webRepositoryViewer)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    newRepositoryInstance: ").append(toIndentedString(newRepositoryInstance)).append("\n");
    sb.append("    oid: ").append(toIndentedString(oid)).append("\n");
    sb.append("    pluginKey: ").append(toIndentedString(pluginKey)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

