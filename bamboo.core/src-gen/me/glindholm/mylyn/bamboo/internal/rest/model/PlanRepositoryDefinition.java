/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import me.glindholm.mylyn.bamboo.internal.rest.model.BambooEntityOid;
import me.glindholm.mylyn.bamboo.internal.rest.model.VcsBambooSpecsDetectionOptions;
import me.glindholm.mylyn.bamboo.internal.rest.model.VcsBranchDefinition;
import me.glindholm.mylyn.bamboo.internal.rest.model.VcsBranchDetectionOptions;
import me.glindholm.mylyn.bamboo.internal.rest.model.VcsChangeDetectionOptions;
import me.glindholm.mylyn.bamboo.internal.rest.model.VcsLocationDefinition;
import me.glindholm.mylyn.bamboo.internal.rest.model.VcsRepositoryViewerDefinition;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * PlanRepositoryDefinition
 */
@JsonPropertyOrder({
  PlanRepositoryDefinition.JSON_PROPERTY_BAMBOO_SPECS_DETECTION_OPTIONS,
  PlanRepositoryDefinition.JSON_PROPERTY_MARKED_FOR_DELETION,
  PlanRepositoryDefinition.JSON_PROPERTY_VCS_LOCATION,
  PlanRepositoryDefinition.JSON_PROPERTY_ROOT_VCS_REPOSITORY_ID,
  PlanRepositoryDefinition.JSON_PROPERTY_BRANCH,
  PlanRepositoryDefinition.JSON_PROPERTY_LINKED,
  PlanRepositoryDefinition.JSON_PROPERTY_VCS_CHANGE_DETECTION_OPTIONS,
  PlanRepositoryDefinition.JSON_PROPERTY_VCS_BRANCH_DETECTION_OPTIONS,
  PlanRepositoryDefinition.JSON_PROPERTY_VIEWER_CONFIGURATION,
  PlanRepositoryDefinition.JSON_PROPERTY_LEGACY_REPOSITORY,
  PlanRepositoryDefinition.JSON_PROPERTY_PARENT_OID,
  PlanRepositoryDefinition.JSON_PROPERTY_ROOT_VCS_LINKED,
  PlanRepositoryDefinition.JSON_PROPERTY_ROOT_VCS_PROJECT,
  PlanRepositoryDefinition.JSON_PROPERTY_ROOT_VCS_SHARED,
  PlanRepositoryDefinition.JSON_PROPERTY_ENTITY_TYPE,
  PlanRepositoryDefinition.JSON_PROPERTY_PARENT_ID,
  PlanRepositoryDefinition.JSON_PROPERTY_SHARED,
  PlanRepositoryDefinition.JSON_PROPERTY_PROJECT_ID,
  PlanRepositoryDefinition.JSON_PROPERTY_ID,
  PlanRepositoryDefinition.JSON_PROPERTY_DESCRIPTION,
  PlanRepositoryDefinition.JSON_PROPERTY_NAME,
  PlanRepositoryDefinition.JSON_PROPERTY_OID,
  PlanRepositoryDefinition.JSON_PROPERTY_PLUGIN_KEY,
  PlanRepositoryDefinition.JSON_PROPERTY_POSITION
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PlanRepositoryDefinition implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_BAMBOO_SPECS_DETECTION_OPTIONS = "bambooSpecsDetectionOptions";
  private VcsBambooSpecsDetectionOptions bambooSpecsDetectionOptions;

  public static final String JSON_PROPERTY_MARKED_FOR_DELETION = "markedForDeletion";
  private Boolean markedForDeletion;

  public static final String JSON_PROPERTY_VCS_LOCATION = "vcsLocation";
  private VcsLocationDefinition vcsLocation;

  public static final String JSON_PROPERTY_ROOT_VCS_REPOSITORY_ID = "rootVcsRepositoryId";
  private Long rootVcsRepositoryId;

  public static final String JSON_PROPERTY_BRANCH = "branch";
  private VcsBranchDefinition branch;

  public static final String JSON_PROPERTY_LINKED = "linked";
  private Boolean linked;

  public static final String JSON_PROPERTY_VCS_CHANGE_DETECTION_OPTIONS = "vcsChangeDetectionOptions";
  private VcsChangeDetectionOptions vcsChangeDetectionOptions;

  public static final String JSON_PROPERTY_VCS_BRANCH_DETECTION_OPTIONS = "vcsBranchDetectionOptions";
  private VcsBranchDetectionOptions vcsBranchDetectionOptions;

  public static final String JSON_PROPERTY_VIEWER_CONFIGURATION = "viewerConfiguration";
  private VcsRepositoryViewerDefinition viewerConfiguration;

  public static final String JSON_PROPERTY_LEGACY_REPOSITORY = "legacyRepository";
  private Boolean legacyRepository;

  public static final String JSON_PROPERTY_PARENT_OID = "parentOid";
  private BambooEntityOid parentOid;

  public static final String JSON_PROPERTY_ROOT_VCS_LINKED = "rootVcsLinked";
  private Boolean rootVcsLinked;

  public static final String JSON_PROPERTY_ROOT_VCS_PROJECT = "rootVcsProject";
  private Boolean rootVcsProject;

  public static final String JSON_PROPERTY_ROOT_VCS_SHARED = "rootVcsShared";
  private Boolean rootVcsShared;

  /**
   * Gets or Sets entityType
   */
  public enum EntityTypeEnum {
    CHAIN("CHAIN"),
    
    STAGE("STAGE"),
    
    JOB("JOB"),
    
    REPOSITORY("REPOSITORY"),
    
    CHAIN_BRANCH("CHAIN_BRANCH"),
    
    JOB_BRANCH("JOB_BRANCH"),
    
    TASK("TASK"),
    
    PROJECT("PROJECT"),
    
    ARTIFACT_DEFINITION("ARTIFACT_DEFINITION"),
    
    DEPLOYMENT_PROJECT("DEPLOYMENT_PROJECT"),
    
    SHARED_CREDENTIAL("SHARED_CREDENTIAL");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ENTITY_TYPE = "entityType";
  private EntityTypeEnum entityType;

  public static final String JSON_PROPERTY_PARENT_ID = "parentId";
  private Long parentId;

  public static final String JSON_PROPERTY_SHARED = "shared";
  private Boolean shared;

  public static final String JSON_PROPERTY_PROJECT_ID = "projectId";
  private Long projectId;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_OID = "oid";
  private BambooEntityOid oid;

  public static final String JSON_PROPERTY_PLUGIN_KEY = "pluginKey";
  private String pluginKey;

  public static final String JSON_PROPERTY_POSITION = "position";
  private Integer position;

  public PlanRepositoryDefinition() { 
  }

  public PlanRepositoryDefinition bambooSpecsDetectionOptions(VcsBambooSpecsDetectionOptions bambooSpecsDetectionOptions) {
    this.bambooSpecsDetectionOptions = bambooSpecsDetectionOptions;
    return this;
  }

   /**
   * Get bambooSpecsDetectionOptions
   * @return bambooSpecsDetectionOptions
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BAMBOO_SPECS_DETECTION_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VcsBambooSpecsDetectionOptions getBambooSpecsDetectionOptions() {
    return bambooSpecsDetectionOptions;
  }


  @JsonProperty(JSON_PROPERTY_BAMBOO_SPECS_DETECTION_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBambooSpecsDetectionOptions(VcsBambooSpecsDetectionOptions bambooSpecsDetectionOptions) {
    this.bambooSpecsDetectionOptions = bambooSpecsDetectionOptions;
  }


  public PlanRepositoryDefinition markedForDeletion(Boolean markedForDeletion) {
    this.markedForDeletion = markedForDeletion;
    return this;
  }

   /**
   * Get markedForDeletion
   * @return markedForDeletion
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MARKED_FOR_DELETION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getMarkedForDeletion() {
    return markedForDeletion;
  }


  @JsonProperty(JSON_PROPERTY_MARKED_FOR_DELETION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMarkedForDeletion(Boolean markedForDeletion) {
    this.markedForDeletion = markedForDeletion;
  }


  public PlanRepositoryDefinition vcsLocation(VcsLocationDefinition vcsLocation) {
    this.vcsLocation = vcsLocation;
    return this;
  }

   /**
   * Get vcsLocation
   * @return vcsLocation
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_VCS_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VcsLocationDefinition getVcsLocation() {
    return vcsLocation;
  }


  @JsonProperty(JSON_PROPERTY_VCS_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVcsLocation(VcsLocationDefinition vcsLocation) {
    this.vcsLocation = vcsLocation;
  }


  public PlanRepositoryDefinition rootVcsRepositoryId(Long rootVcsRepositoryId) {
    this.rootVcsRepositoryId = rootVcsRepositoryId;
    return this;
  }

   /**
   * Get rootVcsRepositoryId
   * @return rootVcsRepositoryId
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ROOT_VCS_REPOSITORY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getRootVcsRepositoryId() {
    return rootVcsRepositoryId;
  }


  @JsonProperty(JSON_PROPERTY_ROOT_VCS_REPOSITORY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRootVcsRepositoryId(Long rootVcsRepositoryId) {
    this.rootVcsRepositoryId = rootVcsRepositoryId;
  }


  public PlanRepositoryDefinition branch(VcsBranchDefinition branch) {
    this.branch = branch;
    return this;
  }

   /**
   * Get branch
   * @return branch
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BRANCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VcsBranchDefinition getBranch() {
    return branch;
  }


  @JsonProperty(JSON_PROPERTY_BRANCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBranch(VcsBranchDefinition branch) {
    this.branch = branch;
  }


  public PlanRepositoryDefinition linked(Boolean linked) {
    this.linked = linked;
    return this;
  }

   /**
   * Get linked
   * @return linked
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_LINKED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLinked() {
    return linked;
  }


  @JsonProperty(JSON_PROPERTY_LINKED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLinked(Boolean linked) {
    this.linked = linked;
  }


  public PlanRepositoryDefinition vcsChangeDetectionOptions(VcsChangeDetectionOptions vcsChangeDetectionOptions) {
    this.vcsChangeDetectionOptions = vcsChangeDetectionOptions;
    return this;
  }

   /**
   * Get vcsChangeDetectionOptions
   * @return vcsChangeDetectionOptions
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_VCS_CHANGE_DETECTION_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VcsChangeDetectionOptions getVcsChangeDetectionOptions() {
    return vcsChangeDetectionOptions;
  }


  @JsonProperty(JSON_PROPERTY_VCS_CHANGE_DETECTION_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVcsChangeDetectionOptions(VcsChangeDetectionOptions vcsChangeDetectionOptions) {
    this.vcsChangeDetectionOptions = vcsChangeDetectionOptions;
  }


  public PlanRepositoryDefinition vcsBranchDetectionOptions(VcsBranchDetectionOptions vcsBranchDetectionOptions) {
    this.vcsBranchDetectionOptions = vcsBranchDetectionOptions;
    return this;
  }

   /**
   * Get vcsBranchDetectionOptions
   * @return vcsBranchDetectionOptions
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_VCS_BRANCH_DETECTION_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VcsBranchDetectionOptions getVcsBranchDetectionOptions() {
    return vcsBranchDetectionOptions;
  }


  @JsonProperty(JSON_PROPERTY_VCS_BRANCH_DETECTION_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVcsBranchDetectionOptions(VcsBranchDetectionOptions vcsBranchDetectionOptions) {
    this.vcsBranchDetectionOptions = vcsBranchDetectionOptions;
  }


  public PlanRepositoryDefinition viewerConfiguration(VcsRepositoryViewerDefinition viewerConfiguration) {
    this.viewerConfiguration = viewerConfiguration;
    return this;
  }

   /**
   * Get viewerConfiguration
   * @return viewerConfiguration
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_VIEWER_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VcsRepositoryViewerDefinition getViewerConfiguration() {
    return viewerConfiguration;
  }


  @JsonProperty(JSON_PROPERTY_VIEWER_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setViewerConfiguration(VcsRepositoryViewerDefinition viewerConfiguration) {
    this.viewerConfiguration = viewerConfiguration;
  }


  public PlanRepositoryDefinition legacyRepository(Boolean legacyRepository) {
    this.legacyRepository = legacyRepository;
    return this;
  }

   /**
   * Get legacyRepository
   * @return legacyRepository
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_LEGACY_REPOSITORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLegacyRepository() {
    return legacyRepository;
  }


  @JsonProperty(JSON_PROPERTY_LEGACY_REPOSITORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLegacyRepository(Boolean legacyRepository) {
    this.legacyRepository = legacyRepository;
  }


  public PlanRepositoryDefinition parentOid(BambooEntityOid parentOid) {
    this.parentOid = parentOid;
    return this;
  }

   /**
   * Get parentOid
   * @return parentOid
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PARENT_OID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BambooEntityOid getParentOid() {
    return parentOid;
  }


  @JsonProperty(JSON_PROPERTY_PARENT_OID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParentOid(BambooEntityOid parentOid) {
    this.parentOid = parentOid;
  }


  public PlanRepositoryDefinition rootVcsLinked(Boolean rootVcsLinked) {
    this.rootVcsLinked = rootVcsLinked;
    return this;
  }

   /**
   * Get rootVcsLinked
   * @return rootVcsLinked
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ROOT_VCS_LINKED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRootVcsLinked() {
    return rootVcsLinked;
  }


  @JsonProperty(JSON_PROPERTY_ROOT_VCS_LINKED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRootVcsLinked(Boolean rootVcsLinked) {
    this.rootVcsLinked = rootVcsLinked;
  }


  public PlanRepositoryDefinition rootVcsProject(Boolean rootVcsProject) {
    this.rootVcsProject = rootVcsProject;
    return this;
  }

   /**
   * Get rootVcsProject
   * @return rootVcsProject
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ROOT_VCS_PROJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRootVcsProject() {
    return rootVcsProject;
  }


  @JsonProperty(JSON_PROPERTY_ROOT_VCS_PROJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRootVcsProject(Boolean rootVcsProject) {
    this.rootVcsProject = rootVcsProject;
  }


  public PlanRepositoryDefinition rootVcsShared(Boolean rootVcsShared) {
    this.rootVcsShared = rootVcsShared;
    return this;
  }

   /**
   * Get rootVcsShared
   * @return rootVcsShared
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ROOT_VCS_SHARED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRootVcsShared() {
    return rootVcsShared;
  }


  @JsonProperty(JSON_PROPERTY_ROOT_VCS_SHARED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRootVcsShared(Boolean rootVcsShared) {
    this.rootVcsShared = rootVcsShared;
  }


  public PlanRepositoryDefinition entityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * Get entityType
   * @return entityType
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EntityTypeEnum getEntityType() {
    return entityType;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
  }


  public PlanRepositoryDefinition parentId(Long parentId) {
    this.parentId = parentId;
    return this;
  }

   /**
   * Get parentId
   * @return parentId
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PARENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getParentId() {
    return parentId;
  }


  @JsonProperty(JSON_PROPERTY_PARENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParentId(Long parentId) {
    this.parentId = parentId;
  }


  public PlanRepositoryDefinition shared(Boolean shared) {
    this.shared = shared;
    return this;
  }

   /**
   * Get shared
   * @return shared
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SHARED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getShared() {
    return shared;
  }


  @JsonProperty(JSON_PROPERTY_SHARED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShared(Boolean shared) {
    this.shared = shared;
  }


  public PlanRepositoryDefinition projectId(Long projectId) {
    this.projectId = projectId;
    return this;
  }

   /**
   * Get projectId
   * @return projectId
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PROJECT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getProjectId() {
    return projectId;
  }


  @JsonProperty(JSON_PROPERTY_PROJECT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProjectId(Long projectId) {
    this.projectId = projectId;
  }


  public PlanRepositoryDefinition id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  public PlanRepositoryDefinition description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public PlanRepositoryDefinition name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public PlanRepositoryDefinition oid(BambooEntityOid oid) {
    this.oid = oid;
    return this;
  }

   /**
   * Get oid
   * @return oid
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_OID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BambooEntityOid getOid() {
    return oid;
  }


  @JsonProperty(JSON_PROPERTY_OID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOid(BambooEntityOid oid) {
    this.oid = oid;
  }


  public PlanRepositoryDefinition pluginKey(String pluginKey) {
    this.pluginKey = pluginKey;
    return this;
  }

   /**
   * Get pluginKey
   * @return pluginKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLUGIN_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPluginKey() {
    return pluginKey;
  }


  @JsonProperty(JSON_PROPERTY_PLUGIN_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPluginKey(String pluginKey) {
    this.pluginKey = pluginKey;
  }


  public PlanRepositoryDefinition position(Integer position) {
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_POSITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPosition() {
    return position;
  }


  @JsonProperty(JSON_PROPERTY_POSITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPosition(Integer position) {
    this.position = position;
  }


  /**
   * Return true if this PlanRepositoryDefinition object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlanRepositoryDefinition planRepositoryDefinition = (PlanRepositoryDefinition) o;
    return Objects.equals(this.bambooSpecsDetectionOptions, planRepositoryDefinition.bambooSpecsDetectionOptions) &&
        Objects.equals(this.markedForDeletion, planRepositoryDefinition.markedForDeletion) &&
        Objects.equals(this.vcsLocation, planRepositoryDefinition.vcsLocation) &&
        Objects.equals(this.rootVcsRepositoryId, planRepositoryDefinition.rootVcsRepositoryId) &&
        Objects.equals(this.branch, planRepositoryDefinition.branch) &&
        Objects.equals(this.linked, planRepositoryDefinition.linked) &&
        Objects.equals(this.vcsChangeDetectionOptions, planRepositoryDefinition.vcsChangeDetectionOptions) &&
        Objects.equals(this.vcsBranchDetectionOptions, planRepositoryDefinition.vcsBranchDetectionOptions) &&
        Objects.equals(this.viewerConfiguration, planRepositoryDefinition.viewerConfiguration) &&
        Objects.equals(this.legacyRepository, planRepositoryDefinition.legacyRepository) &&
        Objects.equals(this.parentOid, planRepositoryDefinition.parentOid) &&
        Objects.equals(this.rootVcsLinked, planRepositoryDefinition.rootVcsLinked) &&
        Objects.equals(this.rootVcsProject, planRepositoryDefinition.rootVcsProject) &&
        Objects.equals(this.rootVcsShared, planRepositoryDefinition.rootVcsShared) &&
        Objects.equals(this.entityType, planRepositoryDefinition.entityType) &&
        Objects.equals(this.parentId, planRepositoryDefinition.parentId) &&
        Objects.equals(this.shared, planRepositoryDefinition.shared) &&
        Objects.equals(this.projectId, planRepositoryDefinition.projectId) &&
        Objects.equals(this.id, planRepositoryDefinition.id) &&
        Objects.equals(this.description, planRepositoryDefinition.description) &&
        Objects.equals(this.name, planRepositoryDefinition.name) &&
        Objects.equals(this.oid, planRepositoryDefinition.oid) &&
        Objects.equals(this.pluginKey, planRepositoryDefinition.pluginKey) &&
        Objects.equals(this.position, planRepositoryDefinition.position);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bambooSpecsDetectionOptions, markedForDeletion, vcsLocation, rootVcsRepositoryId, branch, linked, vcsChangeDetectionOptions, vcsBranchDetectionOptions, viewerConfiguration, legacyRepository, parentOid, rootVcsLinked, rootVcsProject, rootVcsShared, entityType, parentId, shared, projectId, id, description, name, oid, pluginKey, position);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlanRepositoryDefinition {\n");
    sb.append("    bambooSpecsDetectionOptions: ").append(toIndentedString(bambooSpecsDetectionOptions)).append("\n");
    sb.append("    markedForDeletion: ").append(toIndentedString(markedForDeletion)).append("\n");
    sb.append("    vcsLocation: ").append(toIndentedString(vcsLocation)).append("\n");
    sb.append("    rootVcsRepositoryId: ").append(toIndentedString(rootVcsRepositoryId)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    linked: ").append(toIndentedString(linked)).append("\n");
    sb.append("    vcsChangeDetectionOptions: ").append(toIndentedString(vcsChangeDetectionOptions)).append("\n");
    sb.append("    vcsBranchDetectionOptions: ").append(toIndentedString(vcsBranchDetectionOptions)).append("\n");
    sb.append("    viewerConfiguration: ").append(toIndentedString(viewerConfiguration)).append("\n");
    sb.append("    legacyRepository: ").append(toIndentedString(legacyRepository)).append("\n");
    sb.append("    parentOid: ").append(toIndentedString(parentOid)).append("\n");
    sb.append("    rootVcsLinked: ").append(toIndentedString(rootVcsLinked)).append("\n");
    sb.append("    rootVcsProject: ").append(toIndentedString(rootVcsProject)).append("\n");
    sb.append("    rootVcsShared: ").append(toIndentedString(rootVcsShared)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    shared: ").append(toIndentedString(shared)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    oid: ").append(toIndentedString(oid)).append("\n");
    sb.append("    pluginKey: ").append(toIndentedString(pluginKey)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

