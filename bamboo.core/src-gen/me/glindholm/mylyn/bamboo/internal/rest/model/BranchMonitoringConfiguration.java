/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import me.glindholm.mylyn.bamboo.internal.rest.model.BranchIntegrationConfiguration;
import me.glindholm.mylyn.bamboo.internal.rest.model.TriggerDefinition;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * BranchMonitoringConfiguration
 */
@JsonPropertyOrder({
  BranchMonitoringConfiguration.JSON_PROPERTY_PLAN_BRANCH_WORKFLOW,
  BranchMonitoringConfiguration.JSON_PROPERTY_MATCHING_PATTERN,
  BranchMonitoringConfiguration.JSON_PROPERTY_PLAN_BRANCH_CREATION_ENABLED,
  BranchMonitoringConfiguration.JSON_PROPERTY_REMOVED_BRANCH_CLEAN_UP_ENABLED,
  BranchMonitoringConfiguration.JSON_PROPERTY_INACTIVE_BRANCH_CLEAN_UP_ENABLED,
  BranchMonitoringConfiguration.JSON_PROPERTY_INACTIVE_BRANCH_CLEAN_UP_PERIOD_IN_DAYS,
  BranchMonitoringConfiguration.JSON_PROPERTY_REMOVED_BRANCH_CLEAN_UP_PERIOD_IN_DAYS,
  BranchMonitoringConfiguration.JSON_PROPERTY_DEFAULT_BRANCH_NOTIFICATION_STRATEGY,
  BranchMonitoringConfiguration.JSON_PROPERTY_DEFAULT_BRANCH_INTEGRATION_CONFIGURATION,
  BranchMonitoringConfiguration.JSON_PROPERTY_REMOTE_JIRA_BRANCH_LINKING_ENABLED,
  BranchMonitoringConfiguration.JSON_PROPERTY_BRANCH_TRIGGERING_OPTION,
  BranchMonitoringConfiguration.JSON_PROPERTY_DEFAULT_TRIGGER,
  BranchMonitoringConfiguration.JSON_PROPERTY_VALID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BranchMonitoringConfiguration implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Gets or Sets planBranchWorkflow
   */
  public enum PlanBranchWorkflowEnum {
    BRANCH_WORKFLOW("BRANCH_WORKFLOW"),
    
    MANUAL_WORKFLOW("MANUAL_WORKFLOW"),
    
    PULL_REQUEST_WORKFLOW("PULL_REQUEST_WORKFLOW"),
    
    FORK_ENABLED_PULL_REQUEST_WORKFLOW("FORK_ENABLED_PULL_REQUEST_WORKFLOW");

    private String value;

    PlanBranchWorkflowEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PlanBranchWorkflowEnum fromValue(String value) {
      for (PlanBranchWorkflowEnum b : PlanBranchWorkflowEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PLAN_BRANCH_WORKFLOW = "planBranchWorkflow";
  private PlanBranchWorkflowEnum planBranchWorkflow;

  public static final String JSON_PROPERTY_MATCHING_PATTERN = "matchingPattern";
  private String matchingPattern;

  public static final String JSON_PROPERTY_PLAN_BRANCH_CREATION_ENABLED = "planBranchCreationEnabled";
  private Boolean planBranchCreationEnabled;

  public static final String JSON_PROPERTY_REMOVED_BRANCH_CLEAN_UP_ENABLED = "removedBranchCleanUpEnabled";
  private Boolean removedBranchCleanUpEnabled;

  public static final String JSON_PROPERTY_INACTIVE_BRANCH_CLEAN_UP_ENABLED = "inactiveBranchCleanUpEnabled";
  private Boolean inactiveBranchCleanUpEnabled;

  public static final String JSON_PROPERTY_INACTIVE_BRANCH_CLEAN_UP_PERIOD_IN_DAYS = "inactiveBranchCleanUpPeriodInDays";
  private Integer inactiveBranchCleanUpPeriodInDays;

  public static final String JSON_PROPERTY_REMOVED_BRANCH_CLEAN_UP_PERIOD_IN_DAYS = "removedBranchCleanUpPeriodInDays";
  private Integer removedBranchCleanUpPeriodInDays;

  /**
   * Gets or Sets defaultBranchNotificationStrategy
   */
  public enum DefaultBranchNotificationStrategyEnum {
    NOTIFY_COMMITTERS("NOTIFY_COMMITTERS"),
    
    INHERIT("INHERIT"),
    
    NONE("NONE");

    private String value;

    DefaultBranchNotificationStrategyEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DefaultBranchNotificationStrategyEnum fromValue(String value) {
      for (DefaultBranchNotificationStrategyEnum b : DefaultBranchNotificationStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DEFAULT_BRANCH_NOTIFICATION_STRATEGY = "defaultBranchNotificationStrategy";
  private DefaultBranchNotificationStrategyEnum defaultBranchNotificationStrategy;

  public static final String JSON_PROPERTY_DEFAULT_BRANCH_INTEGRATION_CONFIGURATION = "defaultBranchIntegrationConfiguration";
  private BranchIntegrationConfiguration defaultBranchIntegrationConfiguration;

  public static final String JSON_PROPERTY_REMOTE_JIRA_BRANCH_LINKING_ENABLED = "remoteJiraBranchLinkingEnabled";
  private Boolean remoteJiraBranchLinkingEnabled;

  /**
   * Gets or Sets branchTriggeringOption
   */
  public enum BranchTriggeringOptionEnum {
    INHERITED("INHERITED"),
    
    MANUAL_ONLY("MANUAL_ONLY"),
    
    CUSTOM("CUSTOM");

    private String value;

    BranchTriggeringOptionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static BranchTriggeringOptionEnum fromValue(String value) {
      for (BranchTriggeringOptionEnum b : BranchTriggeringOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_BRANCH_TRIGGERING_OPTION = "branchTriggeringOption";
  private BranchTriggeringOptionEnum branchTriggeringOption;

  public static final String JSON_PROPERTY_DEFAULT_TRIGGER = "defaultTrigger";
  private TriggerDefinition defaultTrigger;

  public static final String JSON_PROPERTY_VALID = "valid";
  private Boolean valid;

  public BranchMonitoringConfiguration() { 
  }

  public BranchMonitoringConfiguration planBranchWorkflow(PlanBranchWorkflowEnum planBranchWorkflow) {
    this.planBranchWorkflow = planBranchWorkflow;
    return this;
  }

   /**
   * Get planBranchWorkflow
   * @return planBranchWorkflow
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLAN_BRANCH_WORKFLOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PlanBranchWorkflowEnum getPlanBranchWorkflow() {
    return planBranchWorkflow;
  }


  @JsonProperty(JSON_PROPERTY_PLAN_BRANCH_WORKFLOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlanBranchWorkflow(PlanBranchWorkflowEnum planBranchWorkflow) {
    this.planBranchWorkflow = planBranchWorkflow;
  }


  public BranchMonitoringConfiguration matchingPattern(String matchingPattern) {
    this.matchingPattern = matchingPattern;
    return this;
  }

   /**
   * Get matchingPattern
   * @return matchingPattern
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MATCHING_PATTERN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMatchingPattern() {
    return matchingPattern;
  }


  @JsonProperty(JSON_PROPERTY_MATCHING_PATTERN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMatchingPattern(String matchingPattern) {
    this.matchingPattern = matchingPattern;
  }


  public BranchMonitoringConfiguration planBranchCreationEnabled(Boolean planBranchCreationEnabled) {
    this.planBranchCreationEnabled = planBranchCreationEnabled;
    return this;
  }

   /**
   * Get planBranchCreationEnabled
   * @return planBranchCreationEnabled
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLAN_BRANCH_CREATION_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPlanBranchCreationEnabled() {
    return planBranchCreationEnabled;
  }


  @JsonProperty(JSON_PROPERTY_PLAN_BRANCH_CREATION_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlanBranchCreationEnabled(Boolean planBranchCreationEnabled) {
    this.planBranchCreationEnabled = planBranchCreationEnabled;
  }


  public BranchMonitoringConfiguration removedBranchCleanUpEnabled(Boolean removedBranchCleanUpEnabled) {
    this.removedBranchCleanUpEnabled = removedBranchCleanUpEnabled;
    return this;
  }

   /**
   * Get removedBranchCleanUpEnabled
   * @return removedBranchCleanUpEnabled
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_REMOVED_BRANCH_CLEAN_UP_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRemovedBranchCleanUpEnabled() {
    return removedBranchCleanUpEnabled;
  }


  @JsonProperty(JSON_PROPERTY_REMOVED_BRANCH_CLEAN_UP_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRemovedBranchCleanUpEnabled(Boolean removedBranchCleanUpEnabled) {
    this.removedBranchCleanUpEnabled = removedBranchCleanUpEnabled;
  }


  public BranchMonitoringConfiguration inactiveBranchCleanUpEnabled(Boolean inactiveBranchCleanUpEnabled) {
    this.inactiveBranchCleanUpEnabled = inactiveBranchCleanUpEnabled;
    return this;
  }

   /**
   * Get inactiveBranchCleanUpEnabled
   * @return inactiveBranchCleanUpEnabled
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_INACTIVE_BRANCH_CLEAN_UP_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getInactiveBranchCleanUpEnabled() {
    return inactiveBranchCleanUpEnabled;
  }


  @JsonProperty(JSON_PROPERTY_INACTIVE_BRANCH_CLEAN_UP_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInactiveBranchCleanUpEnabled(Boolean inactiveBranchCleanUpEnabled) {
    this.inactiveBranchCleanUpEnabled = inactiveBranchCleanUpEnabled;
  }


  public BranchMonitoringConfiguration inactiveBranchCleanUpPeriodInDays(Integer inactiveBranchCleanUpPeriodInDays) {
    this.inactiveBranchCleanUpPeriodInDays = inactiveBranchCleanUpPeriodInDays;
    return this;
  }

   /**
   * Get inactiveBranchCleanUpPeriodInDays
   * @return inactiveBranchCleanUpPeriodInDays
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_INACTIVE_BRANCH_CLEAN_UP_PERIOD_IN_DAYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInactiveBranchCleanUpPeriodInDays() {
    return inactiveBranchCleanUpPeriodInDays;
  }


  @JsonProperty(JSON_PROPERTY_INACTIVE_BRANCH_CLEAN_UP_PERIOD_IN_DAYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInactiveBranchCleanUpPeriodInDays(Integer inactiveBranchCleanUpPeriodInDays) {
    this.inactiveBranchCleanUpPeriodInDays = inactiveBranchCleanUpPeriodInDays;
  }


  public BranchMonitoringConfiguration removedBranchCleanUpPeriodInDays(Integer removedBranchCleanUpPeriodInDays) {
    this.removedBranchCleanUpPeriodInDays = removedBranchCleanUpPeriodInDays;
    return this;
  }

   /**
   * Get removedBranchCleanUpPeriodInDays
   * @return removedBranchCleanUpPeriodInDays
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_REMOVED_BRANCH_CLEAN_UP_PERIOD_IN_DAYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getRemovedBranchCleanUpPeriodInDays() {
    return removedBranchCleanUpPeriodInDays;
  }


  @JsonProperty(JSON_PROPERTY_REMOVED_BRANCH_CLEAN_UP_PERIOD_IN_DAYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRemovedBranchCleanUpPeriodInDays(Integer removedBranchCleanUpPeriodInDays) {
    this.removedBranchCleanUpPeriodInDays = removedBranchCleanUpPeriodInDays;
  }


  public BranchMonitoringConfiguration defaultBranchNotificationStrategy(DefaultBranchNotificationStrategyEnum defaultBranchNotificationStrategy) {
    this.defaultBranchNotificationStrategy = defaultBranchNotificationStrategy;
    return this;
  }

   /**
   * Get defaultBranchNotificationStrategy
   * @return defaultBranchNotificationStrategy
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DEFAULT_BRANCH_NOTIFICATION_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DefaultBranchNotificationStrategyEnum getDefaultBranchNotificationStrategy() {
    return defaultBranchNotificationStrategy;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_BRANCH_NOTIFICATION_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultBranchNotificationStrategy(DefaultBranchNotificationStrategyEnum defaultBranchNotificationStrategy) {
    this.defaultBranchNotificationStrategy = defaultBranchNotificationStrategy;
  }


  public BranchMonitoringConfiguration defaultBranchIntegrationConfiguration(BranchIntegrationConfiguration defaultBranchIntegrationConfiguration) {
    this.defaultBranchIntegrationConfiguration = defaultBranchIntegrationConfiguration;
    return this;
  }

   /**
   * Get defaultBranchIntegrationConfiguration
   * @return defaultBranchIntegrationConfiguration
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DEFAULT_BRANCH_INTEGRATION_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BranchIntegrationConfiguration getDefaultBranchIntegrationConfiguration() {
    return defaultBranchIntegrationConfiguration;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_BRANCH_INTEGRATION_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultBranchIntegrationConfiguration(BranchIntegrationConfiguration defaultBranchIntegrationConfiguration) {
    this.defaultBranchIntegrationConfiguration = defaultBranchIntegrationConfiguration;
  }


  public BranchMonitoringConfiguration remoteJiraBranchLinkingEnabled(Boolean remoteJiraBranchLinkingEnabled) {
    this.remoteJiraBranchLinkingEnabled = remoteJiraBranchLinkingEnabled;
    return this;
  }

   /**
   * Get remoteJiraBranchLinkingEnabled
   * @return remoteJiraBranchLinkingEnabled
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_REMOTE_JIRA_BRANCH_LINKING_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRemoteJiraBranchLinkingEnabled() {
    return remoteJiraBranchLinkingEnabled;
  }


  @JsonProperty(JSON_PROPERTY_REMOTE_JIRA_BRANCH_LINKING_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRemoteJiraBranchLinkingEnabled(Boolean remoteJiraBranchLinkingEnabled) {
    this.remoteJiraBranchLinkingEnabled = remoteJiraBranchLinkingEnabled;
  }


  public BranchMonitoringConfiguration branchTriggeringOption(BranchTriggeringOptionEnum branchTriggeringOption) {
    this.branchTriggeringOption = branchTriggeringOption;
    return this;
  }

   /**
   * Get branchTriggeringOption
   * @return branchTriggeringOption
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BRANCH_TRIGGERING_OPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BranchTriggeringOptionEnum getBranchTriggeringOption() {
    return branchTriggeringOption;
  }


  @JsonProperty(JSON_PROPERTY_BRANCH_TRIGGERING_OPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBranchTriggeringOption(BranchTriggeringOptionEnum branchTriggeringOption) {
    this.branchTriggeringOption = branchTriggeringOption;
  }


  public BranchMonitoringConfiguration defaultTrigger(TriggerDefinition defaultTrigger) {
    this.defaultTrigger = defaultTrigger;
    return this;
  }

   /**
   * Get defaultTrigger
   * @return defaultTrigger
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DEFAULT_TRIGGER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TriggerDefinition getDefaultTrigger() {
    return defaultTrigger;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_TRIGGER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultTrigger(TriggerDefinition defaultTrigger) {
    this.defaultTrigger = defaultTrigger;
  }


  public BranchMonitoringConfiguration valid(Boolean valid) {
    this.valid = valid;
    return this;
  }

   /**
   * Get valid
   * @return valid
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_VALID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getValid() {
    return valid;
  }


  @JsonProperty(JSON_PROPERTY_VALID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValid(Boolean valid) {
    this.valid = valid;
  }


  /**
   * Return true if this BranchMonitoringConfiguration object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BranchMonitoringConfiguration branchMonitoringConfiguration = (BranchMonitoringConfiguration) o;
    return Objects.equals(this.planBranchWorkflow, branchMonitoringConfiguration.planBranchWorkflow) &&
        Objects.equals(this.matchingPattern, branchMonitoringConfiguration.matchingPattern) &&
        Objects.equals(this.planBranchCreationEnabled, branchMonitoringConfiguration.planBranchCreationEnabled) &&
        Objects.equals(this.removedBranchCleanUpEnabled, branchMonitoringConfiguration.removedBranchCleanUpEnabled) &&
        Objects.equals(this.inactiveBranchCleanUpEnabled, branchMonitoringConfiguration.inactiveBranchCleanUpEnabled) &&
        Objects.equals(this.inactiveBranchCleanUpPeriodInDays, branchMonitoringConfiguration.inactiveBranchCleanUpPeriodInDays) &&
        Objects.equals(this.removedBranchCleanUpPeriodInDays, branchMonitoringConfiguration.removedBranchCleanUpPeriodInDays) &&
        Objects.equals(this.defaultBranchNotificationStrategy, branchMonitoringConfiguration.defaultBranchNotificationStrategy) &&
        Objects.equals(this.defaultBranchIntegrationConfiguration, branchMonitoringConfiguration.defaultBranchIntegrationConfiguration) &&
        Objects.equals(this.remoteJiraBranchLinkingEnabled, branchMonitoringConfiguration.remoteJiraBranchLinkingEnabled) &&
        Objects.equals(this.branchTriggeringOption, branchMonitoringConfiguration.branchTriggeringOption) &&
        Objects.equals(this.defaultTrigger, branchMonitoringConfiguration.defaultTrigger) &&
        Objects.equals(this.valid, branchMonitoringConfiguration.valid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(planBranchWorkflow, matchingPattern, planBranchCreationEnabled, removedBranchCleanUpEnabled, inactiveBranchCleanUpEnabled, inactiveBranchCleanUpPeriodInDays, removedBranchCleanUpPeriodInDays, defaultBranchNotificationStrategy, defaultBranchIntegrationConfiguration, remoteJiraBranchLinkingEnabled, branchTriggeringOption, defaultTrigger, valid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BranchMonitoringConfiguration {\n");
    sb.append("    planBranchWorkflow: ").append(toIndentedString(planBranchWorkflow)).append("\n");
    sb.append("    matchingPattern: ").append(toIndentedString(matchingPattern)).append("\n");
    sb.append("    planBranchCreationEnabled: ").append(toIndentedString(planBranchCreationEnabled)).append("\n");
    sb.append("    removedBranchCleanUpEnabled: ").append(toIndentedString(removedBranchCleanUpEnabled)).append("\n");
    sb.append("    inactiveBranchCleanUpEnabled: ").append(toIndentedString(inactiveBranchCleanUpEnabled)).append("\n");
    sb.append("    inactiveBranchCleanUpPeriodInDays: ").append(toIndentedString(inactiveBranchCleanUpPeriodInDays)).append("\n");
    sb.append("    removedBranchCleanUpPeriodInDays: ").append(toIndentedString(removedBranchCleanUpPeriodInDays)).append("\n");
    sb.append("    defaultBranchNotificationStrategy: ").append(toIndentedString(defaultBranchNotificationStrategy)).append("\n");
    sb.append("    defaultBranchIntegrationConfiguration: ").append(toIndentedString(defaultBranchIntegrationConfiguration)).append("\n");
    sb.append("    remoteJiraBranchLinkingEnabled: ").append(toIndentedString(remoteJiraBranchLinkingEnabled)).append("\n");
    sb.append("    branchTriggeringOption: ").append(toIndentedString(branchTriggeringOption)).append("\n");
    sb.append("    defaultTrigger: ").append(toIndentedString(defaultTrigger)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

