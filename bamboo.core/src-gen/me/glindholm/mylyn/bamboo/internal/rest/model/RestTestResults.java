/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestTestResultsResultList;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * RestTestResults
 */
@JsonPropertyOrder({
  RestTestResults.JSON_PROPERTY_ALL,
  RestTestResults.JSON_PROPERTY_SUCCESSFUL,
  RestTestResults.JSON_PROPERTY_FAILED,
  RestTestResults.JSON_PROPERTY_NEW_FAILED,
  RestTestResults.JSON_PROPERTY_EXISTING_FAILED,
  RestTestResults.JSON_PROPERTY_FIXED,
  RestTestResults.JSON_PROPERTY_QUARANTINED,
  RestTestResults.JSON_PROPERTY_SKIPPED,
  RestTestResults.JSON_PROPERTY_ALL_TESTS,
  RestTestResults.JSON_PROPERTY_SUCCESSFUL_TESTS,
  RestTestResults.JSON_PROPERTY_FAILED_TESTS,
  RestTestResults.JSON_PROPERTY_NEW_FAILED_TESTS,
  RestTestResults.JSON_PROPERTY_EXISTING_FAILED_TESTS,
  RestTestResults.JSON_PROPERTY_FIXED_TESTS,
  RestTestResults.JSON_PROPERTY_QUARANTINED_TESTS,
  RestTestResults.JSON_PROPERTY_SKIPPED_TESTS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RestTestResults implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ALL = "all";
  private Long all;

  public static final String JSON_PROPERTY_SUCCESSFUL = "successful";
  private Long successful;

  public static final String JSON_PROPERTY_FAILED = "failed";
  private Long failed;

  public static final String JSON_PROPERTY_NEW_FAILED = "newFailed";
  private Long newFailed;

  public static final String JSON_PROPERTY_EXISTING_FAILED = "existingFailed";
  private Long existingFailed;

  public static final String JSON_PROPERTY_FIXED = "fixed";
  private Long fixed;

  public static final String JSON_PROPERTY_QUARANTINED = "quarantined";
  private Long quarantined;

  public static final String JSON_PROPERTY_SKIPPED = "skipped";
  private Long skipped;

  public static final String JSON_PROPERTY_ALL_TESTS = "allTests";
  private RestTestResultsResultList allTests;

  public static final String JSON_PROPERTY_SUCCESSFUL_TESTS = "successfulTests";
  private RestTestResultsResultList successfulTests;

  public static final String JSON_PROPERTY_FAILED_TESTS = "failedTests";
  private RestTestResultsResultList failedTests;

  public static final String JSON_PROPERTY_NEW_FAILED_TESTS = "newFailedTests";
  private RestTestResultsResultList newFailedTests;

  public static final String JSON_PROPERTY_EXISTING_FAILED_TESTS = "existingFailedTests";
  private RestTestResultsResultList existingFailedTests;

  public static final String JSON_PROPERTY_FIXED_TESTS = "fixedTests";
  private RestTestResultsResultList fixedTests;

  public static final String JSON_PROPERTY_QUARANTINED_TESTS = "quarantinedTests";
  private RestTestResultsResultList quarantinedTests;

  public static final String JSON_PROPERTY_SKIPPED_TESTS = "skippedTests";
  private RestTestResultsResultList skippedTests;

  public RestTestResults() { 
  }

  @JsonCreator
  public RestTestResults(
    @JsonProperty(JSON_PROPERTY_ALL) Long all, 
    @JsonProperty(JSON_PROPERTY_SUCCESSFUL) Long successful, 
    @JsonProperty(JSON_PROPERTY_FAILED) Long failed, 
    @JsonProperty(JSON_PROPERTY_NEW_FAILED) Long newFailed, 
    @JsonProperty(JSON_PROPERTY_EXISTING_FAILED) Long existingFailed, 
    @JsonProperty(JSON_PROPERTY_FIXED) Long fixed, 
    @JsonProperty(JSON_PROPERTY_QUARANTINED) Long quarantined, 
    @JsonProperty(JSON_PROPERTY_SKIPPED) Long skipped
  ) {
  this();
    this.all = all;
    this.successful = successful;
    this.failed = failed;
    this.newFailed = newFailed;
    this.existingFailed = existingFailed;
    this.fixed = fixed;
    this.quarantined = quarantined;
    this.skipped = skipped;
  }

   /**
   * Get all
   * @return all
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getAll() {
    return all;
  }




   /**
   * Get successful
   * @return successful
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SUCCESSFUL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getSuccessful() {
    return successful;
  }




   /**
   * Get failed
   * @return failed
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_FAILED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getFailed() {
    return failed;
  }




   /**
   * Get newFailed
   * @return newFailed
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NEW_FAILED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getNewFailed() {
    return newFailed;
  }




   /**
   * Get existingFailed
   * @return existingFailed
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_EXISTING_FAILED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getExistingFailed() {
    return existingFailed;
  }




   /**
   * Get fixed
   * @return fixed
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_FIXED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getFixed() {
    return fixed;
  }




   /**
   * Get quarantined
   * @return quarantined
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_QUARANTINED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getQuarantined() {
    return quarantined;
  }




   /**
   * Get skipped
   * @return skipped
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SKIPPED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getSkipped() {
    return skipped;
  }




  public RestTestResults allTests(RestTestResultsResultList allTests) {
    this.allTests = allTests;
    return this;
  }

   /**
   * Get allTests
   * @return allTests
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ALL_TESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestTestResultsResultList getAllTests() {
    return allTests;
  }


  @JsonProperty(JSON_PROPERTY_ALL_TESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllTests(RestTestResultsResultList allTests) {
    this.allTests = allTests;
  }


  public RestTestResults successfulTests(RestTestResultsResultList successfulTests) {
    this.successfulTests = successfulTests;
    return this;
  }

   /**
   * Get successfulTests
   * @return successfulTests
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SUCCESSFUL_TESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestTestResultsResultList getSuccessfulTests() {
    return successfulTests;
  }


  @JsonProperty(JSON_PROPERTY_SUCCESSFUL_TESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSuccessfulTests(RestTestResultsResultList successfulTests) {
    this.successfulTests = successfulTests;
  }


  public RestTestResults failedTests(RestTestResultsResultList failedTests) {
    this.failedTests = failedTests;
    return this;
  }

   /**
   * Get failedTests
   * @return failedTests
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_FAILED_TESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestTestResultsResultList getFailedTests() {
    return failedTests;
  }


  @JsonProperty(JSON_PROPERTY_FAILED_TESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFailedTests(RestTestResultsResultList failedTests) {
    this.failedTests = failedTests;
  }


  public RestTestResults newFailedTests(RestTestResultsResultList newFailedTests) {
    this.newFailedTests = newFailedTests;
    return this;
  }

   /**
   * Get newFailedTests
   * @return newFailedTests
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NEW_FAILED_TESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestTestResultsResultList getNewFailedTests() {
    return newFailedTests;
  }


  @JsonProperty(JSON_PROPERTY_NEW_FAILED_TESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNewFailedTests(RestTestResultsResultList newFailedTests) {
    this.newFailedTests = newFailedTests;
  }


  public RestTestResults existingFailedTests(RestTestResultsResultList existingFailedTests) {
    this.existingFailedTests = existingFailedTests;
    return this;
  }

   /**
   * Get existingFailedTests
   * @return existingFailedTests
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_EXISTING_FAILED_TESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestTestResultsResultList getExistingFailedTests() {
    return existingFailedTests;
  }


  @JsonProperty(JSON_PROPERTY_EXISTING_FAILED_TESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExistingFailedTests(RestTestResultsResultList existingFailedTests) {
    this.existingFailedTests = existingFailedTests;
  }


  public RestTestResults fixedTests(RestTestResultsResultList fixedTests) {
    this.fixedTests = fixedTests;
    return this;
  }

   /**
   * Get fixedTests
   * @return fixedTests
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_FIXED_TESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestTestResultsResultList getFixedTests() {
    return fixedTests;
  }


  @JsonProperty(JSON_PROPERTY_FIXED_TESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFixedTests(RestTestResultsResultList fixedTests) {
    this.fixedTests = fixedTests;
  }


  public RestTestResults quarantinedTests(RestTestResultsResultList quarantinedTests) {
    this.quarantinedTests = quarantinedTests;
    return this;
  }

   /**
   * Get quarantinedTests
   * @return quarantinedTests
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_QUARANTINED_TESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestTestResultsResultList getQuarantinedTests() {
    return quarantinedTests;
  }


  @JsonProperty(JSON_PROPERTY_QUARANTINED_TESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuarantinedTests(RestTestResultsResultList quarantinedTests) {
    this.quarantinedTests = quarantinedTests;
  }


  public RestTestResults skippedTests(RestTestResultsResultList skippedTests) {
    this.skippedTests = skippedTests;
    return this;
  }

   /**
   * Get skippedTests
   * @return skippedTests
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SKIPPED_TESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestTestResultsResultList getSkippedTests() {
    return skippedTests;
  }


  @JsonProperty(JSON_PROPERTY_SKIPPED_TESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSkippedTests(RestTestResultsResultList skippedTests) {
    this.skippedTests = skippedTests;
  }


  /**
   * Return true if this RestTestResults object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestTestResults restTestResults = (RestTestResults) o;
    return Objects.equals(this.all, restTestResults.all) &&
        Objects.equals(this.successful, restTestResults.successful) &&
        Objects.equals(this.failed, restTestResults.failed) &&
        Objects.equals(this.newFailed, restTestResults.newFailed) &&
        Objects.equals(this.existingFailed, restTestResults.existingFailed) &&
        Objects.equals(this.fixed, restTestResults.fixed) &&
        Objects.equals(this.quarantined, restTestResults.quarantined) &&
        Objects.equals(this.skipped, restTestResults.skipped) &&
        Objects.equals(this.allTests, restTestResults.allTests) &&
        Objects.equals(this.successfulTests, restTestResults.successfulTests) &&
        Objects.equals(this.failedTests, restTestResults.failedTests) &&
        Objects.equals(this.newFailedTests, restTestResults.newFailedTests) &&
        Objects.equals(this.existingFailedTests, restTestResults.existingFailedTests) &&
        Objects.equals(this.fixedTests, restTestResults.fixedTests) &&
        Objects.equals(this.quarantinedTests, restTestResults.quarantinedTests) &&
        Objects.equals(this.skippedTests, restTestResults.skippedTests);
  }

  @Override
  public int hashCode() {
    return Objects.hash(all, successful, failed, newFailed, existingFailed, fixed, quarantined, skipped, allTests, successfulTests, failedTests, newFailedTests, existingFailedTests, fixedTests, quarantinedTests, skippedTests);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestTestResults {\n");
    sb.append("    all: ").append(toIndentedString(all)).append("\n");
    sb.append("    successful: ").append(toIndentedString(successful)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    newFailed: ").append(toIndentedString(newFailed)).append("\n");
    sb.append("    existingFailed: ").append(toIndentedString(existingFailed)).append("\n");
    sb.append("    fixed: ").append(toIndentedString(fixed)).append("\n");
    sb.append("    quarantined: ").append(toIndentedString(quarantined)).append("\n");
    sb.append("    skipped: ").append(toIndentedString(skipped)).append("\n");
    sb.append("    allTests: ").append(toIndentedString(allTests)).append("\n");
    sb.append("    successfulTests: ").append(toIndentedString(successfulTests)).append("\n");
    sb.append("    failedTests: ").append(toIndentedString(failedTests)).append("\n");
    sb.append("    newFailedTests: ").append(toIndentedString(newFailedTests)).append("\n");
    sb.append("    existingFailedTests: ").append(toIndentedString(existingFailedTests)).append("\n");
    sb.append("    fixedTests: ").append(toIndentedString(fixedTests)).append("\n");
    sb.append("    quarantinedTests: ").append(toIndentedString(quarantinedTests)).append("\n");
    sb.append("    skippedTests: ").append(toIndentedString(skippedTests)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

