/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * TriggerDefinition
 */
@JsonPropertyOrder({
  TriggerDefinition.JSON_PROPERTY_USER_DESCRIPTION,
  TriggerDefinition.JSON_PROPERTY_TRIGGERING_REPOSITORIES,
  TriggerDefinition.JSON_PROPERTY_TRIGGER_CONDITIONS_CONFIGURATION,
  TriggerDefinition.JSON_PROPERTY_CONFIGURATION,
  TriggerDefinition.JSON_PROPERTY_ENABLED,
  TriggerDefinition.JSON_PROPERTY_ID,
  TriggerDefinition.JSON_PROPERTY_NAME,
  TriggerDefinition.JSON_PROPERTY_PLUGIN_KEY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TriggerDefinition implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_USER_DESCRIPTION = "userDescription";
  private String userDescription;

  public static final String JSON_PROPERTY_TRIGGERING_REPOSITORIES = "triggeringRepositories";
  private Set<Long> triggeringRepositories;

  public static final String JSON_PROPERTY_TRIGGER_CONDITIONS_CONFIGURATION = "triggerConditionsConfiguration";
  private Object triggerConditionsConfiguration;

  public static final String JSON_PROPERTY_CONFIGURATION = "configuration";
  private Object _configuration;

  public static final String JSON_PROPERTY_ENABLED = "enabled";
  private Boolean enabled;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_PLUGIN_KEY = "pluginKey";
  private String pluginKey;

  public TriggerDefinition() { 
  }

  public TriggerDefinition userDescription(String userDescription) {
    this.userDescription = userDescription;
    return this;
  }

   /**
   * Get userDescription
   * @return userDescription
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_USER_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserDescription() {
    return userDescription;
  }


  @JsonProperty(JSON_PROPERTY_USER_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserDescription(String userDescription) {
    this.userDescription = userDescription;
  }


  public TriggerDefinition triggeringRepositories(Set<Long> triggeringRepositories) {
    this.triggeringRepositories = triggeringRepositories;
    return this;
  }

  public TriggerDefinition addTriggeringRepositoriesItem(Long triggeringRepositoriesItem) {
    if (this.triggeringRepositories == null) {
      this.triggeringRepositories = new LinkedHashSet<>();
    }
    this.triggeringRepositories.add(triggeringRepositoriesItem);
    return this;
  }

   /**
   * Get triggeringRepositories
   * @return triggeringRepositories
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TRIGGERING_REPOSITORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<Long> getTriggeringRepositories() {
    return triggeringRepositories;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_TRIGGERING_REPOSITORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTriggeringRepositories(Set<Long> triggeringRepositories) {
    this.triggeringRepositories = triggeringRepositories;
  }


  public TriggerDefinition triggerConditionsConfiguration(Object triggerConditionsConfiguration) {
    this.triggerConditionsConfiguration = triggerConditionsConfiguration;
    return this;
  }

   /**
   * Get triggerConditionsConfiguration
   * @return triggerConditionsConfiguration
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TRIGGER_CONDITIONS_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getTriggerConditionsConfiguration() {
    return triggerConditionsConfiguration;
  }


  @JsonProperty(JSON_PROPERTY_TRIGGER_CONDITIONS_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTriggerConditionsConfiguration(Object triggerConditionsConfiguration) {
    this.triggerConditionsConfiguration = triggerConditionsConfiguration;
  }


  public TriggerDefinition _configuration(Object _configuration) {
    this._configuration = _configuration;
    return this;
  }

   /**
   * Get _configuration
   * @return _configuration
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getConfiguration() {
    return _configuration;
  }


  @JsonProperty(JSON_PROPERTY_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfiguration(Object _configuration) {
    this._configuration = _configuration;
  }


  public TriggerDefinition enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnabled() {
    return enabled;
  }


  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public TriggerDefinition id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  public TriggerDefinition name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public TriggerDefinition pluginKey(String pluginKey) {
    this.pluginKey = pluginKey;
    return this;
  }

   /**
   * Get pluginKey
   * @return pluginKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLUGIN_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPluginKey() {
    return pluginKey;
  }


  @JsonProperty(JSON_PROPERTY_PLUGIN_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPluginKey(String pluginKey) {
    this.pluginKey = pluginKey;
  }


  /**
   * Return true if this TriggerDefinition object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TriggerDefinition triggerDefinition = (TriggerDefinition) o;
    return Objects.equals(this.userDescription, triggerDefinition.userDescription) &&
        Objects.equals(this.triggeringRepositories, triggerDefinition.triggeringRepositories) &&
        Objects.equals(this.triggerConditionsConfiguration, triggerDefinition.triggerConditionsConfiguration) &&
        Objects.equals(this._configuration, triggerDefinition._configuration) &&
        Objects.equals(this.enabled, triggerDefinition.enabled) &&
        Objects.equals(this.id, triggerDefinition.id) &&
        Objects.equals(this.name, triggerDefinition.name) &&
        Objects.equals(this.pluginKey, triggerDefinition.pluginKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userDescription, triggeringRepositories, triggerConditionsConfiguration, _configuration, enabled, id, name, pluginKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TriggerDefinition {\n");
    sb.append("    userDescription: ").append(toIndentedString(userDescription)).append("\n");
    sb.append("    triggeringRepositories: ").append(toIndentedString(triggeringRepositories)).append("\n");
    sb.append("    triggerConditionsConfiguration: ").append(toIndentedString(triggerConditionsConfiguration)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pluginKey: ").append(toIndentedString(pluginKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

