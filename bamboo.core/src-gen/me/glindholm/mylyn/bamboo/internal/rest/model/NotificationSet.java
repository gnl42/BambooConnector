/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import me.glindholm.mylyn.bamboo.internal.rest.model.NotificationRule;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * NotificationSet
 */
@JsonPropertyOrder({
  NotificationSet.JSON_PROPERTY_NOTIFICATION_RULES,
  NotificationSet.JSON_PROPERTY_SORTED_NOTIFICATION_RULES,
  NotificationSet.JSON_PROPERTY_NOTIFICATION_SET_TYPE,
  NotificationSet.JSON_PROPERTY_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NotificationSet implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_NOTIFICATION_RULES = "notificationRules";
  private Set<NotificationRule> notificationRules;

  public static final String JSON_PROPERTY_SORTED_NOTIFICATION_RULES = "sortedNotificationRules";
  private List<NotificationRule> sortedNotificationRules;

  /**
   * Gets or Sets notificationSetType
   */
  public enum NotificationSetTypeEnum {
    PLAN("PLAN"),
    
    SYSTEM("SYSTEM");

    private String value;

    NotificationSetTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static NotificationSetTypeEnum fromValue(String value) {
      for (NotificationSetTypeEnum b : NotificationSetTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_NOTIFICATION_SET_TYPE = "notificationSetType";
  private NotificationSetTypeEnum notificationSetType;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public NotificationSet() { 
  }

  public NotificationSet notificationRules(Set<NotificationRule> notificationRules) {
    this.notificationRules = notificationRules;
    return this;
  }

  public NotificationSet addNotificationRulesItem(NotificationRule notificationRulesItem) {
    if (this.notificationRules == null) {
      this.notificationRules = new LinkedHashSet<>();
    }
    this.notificationRules.add(notificationRulesItem);
    return this;
  }

   /**
   * Get notificationRules
   * @return notificationRules
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NOTIFICATION_RULES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<NotificationRule> getNotificationRules() {
    return notificationRules;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_NOTIFICATION_RULES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotificationRules(Set<NotificationRule> notificationRules) {
    this.notificationRules = notificationRules;
  }


  public NotificationSet sortedNotificationRules(List<NotificationRule> sortedNotificationRules) {
    this.sortedNotificationRules = sortedNotificationRules;
    return this;
  }

  public NotificationSet addSortedNotificationRulesItem(NotificationRule sortedNotificationRulesItem) {
    if (this.sortedNotificationRules == null) {
      this.sortedNotificationRules = new ArrayList<>();
    }
    this.sortedNotificationRules.add(sortedNotificationRulesItem);
    return this;
  }

   /**
   * Get sortedNotificationRules
   * @return sortedNotificationRules
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SORTED_NOTIFICATION_RULES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<NotificationRule> getSortedNotificationRules() {
    return sortedNotificationRules;
  }


  @JsonProperty(JSON_PROPERTY_SORTED_NOTIFICATION_RULES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSortedNotificationRules(List<NotificationRule> sortedNotificationRules) {
    this.sortedNotificationRules = sortedNotificationRules;
  }


  public NotificationSet notificationSetType(NotificationSetTypeEnum notificationSetType) {
    this.notificationSetType = notificationSetType;
    return this;
  }

   /**
   * Get notificationSetType
   * @return notificationSetType
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NOTIFICATION_SET_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public NotificationSetTypeEnum getNotificationSetType() {
    return notificationSetType;
  }


  @JsonProperty(JSON_PROPERTY_NOTIFICATION_SET_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotificationSetType(NotificationSetTypeEnum notificationSetType) {
    this.notificationSetType = notificationSetType;
  }


  public NotificationSet id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  /**
   * Return true if this NotificationSet object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationSet notificationSet = (NotificationSet) o;
    return Objects.equals(this.notificationRules, notificationSet.notificationRules) &&
        Objects.equals(this.sortedNotificationRules, notificationSet.sortedNotificationRules) &&
        Objects.equals(this.notificationSetType, notificationSet.notificationSetType) &&
        Objects.equals(this.id, notificationSet.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(notificationRules, sortedNotificationRules, notificationSetType, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationSet {\n");
    sb.append("    notificationRules: ").append(toIndentedString(notificationRules)).append("\n");
    sb.append("    sortedNotificationRules: ").append(toIndentedString(sortedNotificationRules)).append("\n");
    sb.append("    notificationSetType: ").append(toIndentedString(notificationSetType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

