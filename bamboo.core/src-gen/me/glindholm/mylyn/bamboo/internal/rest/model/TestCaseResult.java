/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import me.glindholm.mylyn.bamboo.internal.rest.model.TestCase;
import me.glindholm.mylyn.bamboo.internal.rest.model.TestCaseResultError;
import me.glindholm.mylyn.bamboo.internal.rest.model.TestClassResult;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * TestCaseResult
 */
@JsonPropertyOrder({
  TestCaseResult.JSON_PROPERTY_TEST_CASE,
  TestCaseResult.JSON_PROPERTY_FAILING_SINCE,
  TestCaseResult.JSON_PROPERTY_PRETTY_DURATION,
  TestCaseResult.JSON_PROPERTY_TEST_CLASS_RESULT,
  TestCaseResult.JSON_PROPERTY_QUARANTINED,
  TestCaseResult.JSON_PROPERTY_ERRORS,
  TestCaseResult.JSON_PROPERTY_DURATION,
  TestCaseResult.JSON_PROPERTY_DELTA_STATE,
  TestCaseResult.JSON_PROPERTY_NAME,
  TestCaseResult.JSON_PROPERTY_STATE,
  TestCaseResult.JSON_PROPERTY_METHOD_NAME,
  TestCaseResult.JSON_PROPERTY_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TestCaseResult implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_TEST_CASE = "testCase";
  private TestCase testCase;

  public static final String JSON_PROPERTY_FAILING_SINCE = "failingSince";
  private Integer failingSince;

  public static final String JSON_PROPERTY_PRETTY_DURATION = "prettyDuration";
  private String prettyDuration;

  public static final String JSON_PROPERTY_TEST_CLASS_RESULT = "testClassResult";
  private TestClassResult testClassResult;

  public static final String JSON_PROPERTY_QUARANTINED = "quarantined";
  private Boolean quarantined;

  public static final String JSON_PROPERTY_ERRORS = "errors";
  private List<TestCaseResultError> errors;

  public static final String JSON_PROPERTY_DURATION = "duration";
  private Long duration;

  /**
   * Gets or Sets deltaState
   */
  public enum DeltaStateEnum {
    NONE("NONE"),
    
    PASSING("PASSING"),
    
    FAILING("FAILING"),
    
    BROKEN("BROKEN"),
    
    FIXED("FIXED"),
    
    SKIPPED("SKIPPED");

    private String value;

    DeltaStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DeltaStateEnum fromValue(String value) {
      for (DeltaStateEnum b : DeltaStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DELTA_STATE = "deltaState";
  private DeltaStateEnum deltaState;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  /**
   * Gets or Sets state
   */
  public enum StateEnum {
    SUCCESS("SUCCESS"),
    
    SKIPPED("SKIPPED"),
    
    FAILED("FAILED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATE = "state";
  private StateEnum state;

  public static final String JSON_PROPERTY_METHOD_NAME = "methodName";
  private String methodName;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public TestCaseResult() { 
  }

  public TestCaseResult testCase(TestCase testCase) {
    this.testCase = testCase;
    return this;
  }

   /**
   * Get testCase
   * @return testCase
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TEST_CASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TestCase getTestCase() {
    return testCase;
  }


  @JsonProperty(JSON_PROPERTY_TEST_CASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTestCase(TestCase testCase) {
    this.testCase = testCase;
  }


  public TestCaseResult failingSince(Integer failingSince) {
    this.failingSince = failingSince;
    return this;
  }

   /**
   * Get failingSince
   * @return failingSince
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_FAILING_SINCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFailingSince() {
    return failingSince;
  }


  @JsonProperty(JSON_PROPERTY_FAILING_SINCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFailingSince(Integer failingSince) {
    this.failingSince = failingSince;
  }


  public TestCaseResult prettyDuration(String prettyDuration) {
    this.prettyDuration = prettyDuration;
    return this;
  }

   /**
   * Get prettyDuration
   * @return prettyDuration
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PRETTY_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPrettyDuration() {
    return prettyDuration;
  }


  @JsonProperty(JSON_PROPERTY_PRETTY_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrettyDuration(String prettyDuration) {
    this.prettyDuration = prettyDuration;
  }


  public TestCaseResult testClassResult(TestClassResult testClassResult) {
    this.testClassResult = testClassResult;
    return this;
  }

   /**
   * Get testClassResult
   * @return testClassResult
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TEST_CLASS_RESULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TestClassResult getTestClassResult() {
    return testClassResult;
  }


  @JsonProperty(JSON_PROPERTY_TEST_CLASS_RESULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTestClassResult(TestClassResult testClassResult) {
    this.testClassResult = testClassResult;
  }


  public TestCaseResult quarantined(Boolean quarantined) {
    this.quarantined = quarantined;
    return this;
  }

   /**
   * Get quarantined
   * @return quarantined
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_QUARANTINED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getQuarantined() {
    return quarantined;
  }


  @JsonProperty(JSON_PROPERTY_QUARANTINED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuarantined(Boolean quarantined) {
    this.quarantined = quarantined;
  }


  public TestCaseResult errors(List<TestCaseResultError> errors) {
    this.errors = errors;
    return this;
  }

  public TestCaseResult addErrorsItem(TestCaseResultError errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * Get errors
   * @return errors
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ERRORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<TestCaseResultError> getErrors() {
    return errors;
  }


  @JsonProperty(JSON_PROPERTY_ERRORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setErrors(List<TestCaseResultError> errors) {
    this.errors = errors;
  }


  public TestCaseResult duration(Long duration) {
    this.duration = duration;
    return this;
  }

   /**
   * Get duration
   * @return duration
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getDuration() {
    return duration;
  }


  @JsonProperty(JSON_PROPERTY_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDuration(Long duration) {
    this.duration = duration;
  }


  public TestCaseResult deltaState(DeltaStateEnum deltaState) {
    this.deltaState = deltaState;
    return this;
  }

   /**
   * Get deltaState
   * @return deltaState
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DELTA_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DeltaStateEnum getDeltaState() {
    return deltaState;
  }


  @JsonProperty(JSON_PROPERTY_DELTA_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeltaState(DeltaStateEnum deltaState) {
    this.deltaState = deltaState;
  }


  public TestCaseResult name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public TestCaseResult state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StateEnum getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setState(StateEnum state) {
    this.state = state;
  }


  public TestCaseResult methodName(String methodName) {
    this.methodName = methodName;
    return this;
  }

   /**
   * Get methodName
   * @return methodName
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_METHOD_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMethodName() {
    return methodName;
  }


  @JsonProperty(JSON_PROPERTY_METHOD_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMethodName(String methodName) {
    this.methodName = methodName;
  }


  public TestCaseResult id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  /**
   * Return true if this TestCaseResult object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestCaseResult testCaseResult = (TestCaseResult) o;
    return Objects.equals(this.testCase, testCaseResult.testCase) &&
        Objects.equals(this.failingSince, testCaseResult.failingSince) &&
        Objects.equals(this.prettyDuration, testCaseResult.prettyDuration) &&
        Objects.equals(this.testClassResult, testCaseResult.testClassResult) &&
        Objects.equals(this.quarantined, testCaseResult.quarantined) &&
        Objects.equals(this.errors, testCaseResult.errors) &&
        Objects.equals(this.duration, testCaseResult.duration) &&
        Objects.equals(this.deltaState, testCaseResult.deltaState) &&
        Objects.equals(this.name, testCaseResult.name) &&
        Objects.equals(this.state, testCaseResult.state) &&
        Objects.equals(this.methodName, testCaseResult.methodName) &&
        Objects.equals(this.id, testCaseResult.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(testCase, failingSince, prettyDuration, testClassResult, quarantined, errors, duration, deltaState, name, state, methodName, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestCaseResult {\n");
    sb.append("    testCase: ").append(toIndentedString(testCase)).append("\n");
    sb.append("    failingSince: ").append(toIndentedString(failingSince)).append("\n");
    sb.append("    prettyDuration: ").append(toIndentedString(prettyDuration)).append("\n");
    sb.append("    testClassResult: ").append(toIndentedString(testClassResult)).append("\n");
    sb.append("    quarantined: ").append(toIndentedString(quarantined)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    deltaState: ").append(toIndentedString(deltaState)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    methodName: ").append(toIndentedString(methodName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

