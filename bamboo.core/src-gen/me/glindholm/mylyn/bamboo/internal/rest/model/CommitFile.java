/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * CommitFile
 */
@JsonPropertyOrder({
  CommitFile.JSON_PROPERTY_REVISION,
  CommitFile.JSON_PROPERTY_CHANGESET_ID,
  CommitFile.JSON_PROPERTY_CLEAN_NAME,
  CommitFile.JSON_PROPERTY_REVISION_KNOWN,
  CommitFile.JSON_PROPERTY_NAME
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CommitFile implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_REVISION = "revision";
  private String revision;

  public static final String JSON_PROPERTY_CHANGESET_ID = "changesetId";
  private String changesetId;

  public static final String JSON_PROPERTY_CLEAN_NAME = "cleanName";
  private String cleanName;

  public static final String JSON_PROPERTY_REVISION_KNOWN = "revisionKnown";
  private Boolean revisionKnown;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public CommitFile() { 
  }

  public CommitFile revision(String revision) {
    this.revision = revision;
    return this;
  }

   /**
   * Get revision
   * @return revision
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_REVISION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRevision() {
    return revision;
  }


  @JsonProperty(JSON_PROPERTY_REVISION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRevision(String revision) {
    this.revision = revision;
  }


  public CommitFile changesetId(String changesetId) {
    this.changesetId = changesetId;
    return this;
  }

   /**
   * Get changesetId
   * @return changesetId
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CHANGESET_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getChangesetId() {
    return changesetId;
  }


  @JsonProperty(JSON_PROPERTY_CHANGESET_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChangesetId(String changesetId) {
    this.changesetId = changesetId;
  }


  public CommitFile cleanName(String cleanName) {
    this.cleanName = cleanName;
    return this;
  }

   /**
   * Get cleanName
   * @return cleanName
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CLEAN_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCleanName() {
    return cleanName;
  }


  @JsonProperty(JSON_PROPERTY_CLEAN_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCleanName(String cleanName) {
    this.cleanName = cleanName;
  }


  public CommitFile revisionKnown(Boolean revisionKnown) {
    this.revisionKnown = revisionKnown;
    return this;
  }

   /**
   * Get revisionKnown
   * @return revisionKnown
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_REVISION_KNOWN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRevisionKnown() {
    return revisionKnown;
  }


  @JsonProperty(JSON_PROPERTY_REVISION_KNOWN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRevisionKnown(Boolean revisionKnown) {
    this.revisionKnown = revisionKnown;
  }


  public CommitFile name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  /**
   * Return true if this CommitFile object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommitFile commitFile = (CommitFile) o;
    return Objects.equals(this.revision, commitFile.revision) &&
        Objects.equals(this.changesetId, commitFile.changesetId) &&
        Objects.equals(this.cleanName, commitFile.cleanName) &&
        Objects.equals(this.revisionKnown, commitFile.revisionKnown) &&
        Objects.equals(this.name, commitFile.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(revision, changesetId, cleanName, revisionKnown, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommitFile {\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    changesetId: ").append(toIndentedString(changesetId)).append("\n");
    sb.append("    cleanName: ").append(toIndentedString(cleanName)).append("\n");
    sb.append("    revisionKnown: ").append(toIndentedString(revisionKnown)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

