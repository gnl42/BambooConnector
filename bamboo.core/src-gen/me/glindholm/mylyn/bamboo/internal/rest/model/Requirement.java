/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import me.glindholm.mylyn.bamboo.internal.rest.model.RequirementSet;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Requirement
 */
@JsonPropertyOrder({
  Requirement.JSON_PROPERTY_REQUIREMENT_SET,
  Requirement.JSON_PROPERTY_REGEX_MATCH,
  Requirement.JSON_PROPERTY_SYSTEM_REQUIREMENT,
  Requirement.JSON_PROPERTY_READONLY,
  Requirement.JSON_PROPERTY_PLUGIN_MODULE_KEY,
  Requirement.JSON_PROPERTY_OWNER_ID,
  Requirement.JSON_PROPERTY_MATCH_TYPE,
  Requirement.JSON_PROPERTY_KEY,
  Requirement.JSON_PROPERTY_ID,
  Requirement.JSON_PROPERTY_TYPE_OF_MATCH,
  Requirement.JSON_PROPERTY_MATCH_VALUE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Requirement implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_REQUIREMENT_SET = "requirementSet";
  private RequirementSet requirementSet;

  public static final String JSON_PROPERTY_REGEX_MATCH = "regexMatch";
  private Boolean regexMatch;

  public static final String JSON_PROPERTY_SYSTEM_REQUIREMENT = "systemRequirement";
  private Boolean systemRequirement;

  public static final String JSON_PROPERTY_READONLY = "readonly";
  private Boolean readonly;

  public static final String JSON_PROPERTY_PLUGIN_MODULE_KEY = "pluginModuleKey";
  private String pluginModuleKey;

  public static final String JSON_PROPERTY_OWNER_ID = "ownerId";
  private Long ownerId;

  public static final String JSON_PROPERTY_MATCH_TYPE = "matchType";
  private String matchType;

  public static final String JSON_PROPERTY_KEY = "key";
  private String key;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  /**
   * Gets or Sets typeOfMatch
   */
  public enum TypeOfMatchEnum {
    EXISTS("EXISTS"),
    
    EQUALS("EQUALS"),
    
    MATCHES("MATCHES");

    private String value;

    TypeOfMatchEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeOfMatchEnum fromValue(String value) {
      for (TypeOfMatchEnum b : TypeOfMatchEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE_OF_MATCH = "typeOfMatch";
  private TypeOfMatchEnum typeOfMatch;

  public static final String JSON_PROPERTY_MATCH_VALUE = "matchValue";
  private String matchValue;

  public Requirement() { 
  }

  public Requirement requirementSet(RequirementSet requirementSet) {
    this.requirementSet = requirementSet;
    return this;
  }

   /**
   * Get requirementSet
   * @return requirementSet
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_REQUIREMENT_SET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RequirementSet getRequirementSet() {
    return requirementSet;
  }


  @JsonProperty(JSON_PROPERTY_REQUIREMENT_SET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequirementSet(RequirementSet requirementSet) {
    this.requirementSet = requirementSet;
  }


  public Requirement regexMatch(Boolean regexMatch) {
    this.regexMatch = regexMatch;
    return this;
  }

   /**
   * Get regexMatch
   * @return regexMatch
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_REGEX_MATCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRegexMatch() {
    return regexMatch;
  }


  @JsonProperty(JSON_PROPERTY_REGEX_MATCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRegexMatch(Boolean regexMatch) {
    this.regexMatch = regexMatch;
  }


  public Requirement systemRequirement(Boolean systemRequirement) {
    this.systemRequirement = systemRequirement;
    return this;
  }

   /**
   * Get systemRequirement
   * @return systemRequirement
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SYSTEM_REQUIREMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSystemRequirement() {
    return systemRequirement;
  }


  @JsonProperty(JSON_PROPERTY_SYSTEM_REQUIREMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSystemRequirement(Boolean systemRequirement) {
    this.systemRequirement = systemRequirement;
  }


  public Requirement readonly(Boolean readonly) {
    this.readonly = readonly;
    return this;
  }

   /**
   * Get readonly
   * @return readonly
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_READONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getReadonly() {
    return readonly;
  }


  @JsonProperty(JSON_PROPERTY_READONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReadonly(Boolean readonly) {
    this.readonly = readonly;
  }


  public Requirement pluginModuleKey(String pluginModuleKey) {
    this.pluginModuleKey = pluginModuleKey;
    return this;
  }

   /**
   * Get pluginModuleKey
   * @return pluginModuleKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLUGIN_MODULE_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPluginModuleKey() {
    return pluginModuleKey;
  }


  @JsonProperty(JSON_PROPERTY_PLUGIN_MODULE_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPluginModuleKey(String pluginModuleKey) {
    this.pluginModuleKey = pluginModuleKey;
  }


  public Requirement ownerId(Long ownerId) {
    this.ownerId = ownerId;
    return this;
  }

   /**
   * Get ownerId
   * @return ownerId
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_OWNER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getOwnerId() {
    return ownerId;
  }


  @JsonProperty(JSON_PROPERTY_OWNER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOwnerId(Long ownerId) {
    this.ownerId = ownerId;
  }


  public Requirement matchType(String matchType) {
    this.matchType = matchType;
    return this;
  }

   /**
   * Get matchType
   * @return matchType
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MATCH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMatchType() {
    return matchType;
  }


  @JsonProperty(JSON_PROPERTY_MATCH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMatchType(String matchType) {
    this.matchType = matchType;
  }


  public Requirement key(String key) {
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKey(String key) {
    this.key = key;
  }


  public Requirement id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  public Requirement typeOfMatch(TypeOfMatchEnum typeOfMatch) {
    this.typeOfMatch = typeOfMatch;
    return this;
  }

   /**
   * Get typeOfMatch
   * @return typeOfMatch
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TYPE_OF_MATCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeOfMatchEnum getTypeOfMatch() {
    return typeOfMatch;
  }


  @JsonProperty(JSON_PROPERTY_TYPE_OF_MATCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeOfMatch(TypeOfMatchEnum typeOfMatch) {
    this.typeOfMatch = typeOfMatch;
  }


  public Requirement matchValue(String matchValue) {
    this.matchValue = matchValue;
    return this;
  }

   /**
   * Get matchValue
   * @return matchValue
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MATCH_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMatchValue() {
    return matchValue;
  }


  @JsonProperty(JSON_PROPERTY_MATCH_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMatchValue(String matchValue) {
    this.matchValue = matchValue;
  }


  /**
   * Return true if this Requirement object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Requirement requirement = (Requirement) o;
    return Objects.equals(this.requirementSet, requirement.requirementSet) &&
        Objects.equals(this.regexMatch, requirement.regexMatch) &&
        Objects.equals(this.systemRequirement, requirement.systemRequirement) &&
        Objects.equals(this.readonly, requirement.readonly) &&
        Objects.equals(this.pluginModuleKey, requirement.pluginModuleKey) &&
        Objects.equals(this.ownerId, requirement.ownerId) &&
        Objects.equals(this.matchType, requirement.matchType) &&
        Objects.equals(this.key, requirement.key) &&
        Objects.equals(this.id, requirement.id) &&
        Objects.equals(this.typeOfMatch, requirement.typeOfMatch) &&
        Objects.equals(this.matchValue, requirement.matchValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requirementSet, regexMatch, systemRequirement, readonly, pluginModuleKey, ownerId, matchType, key, id, typeOfMatch, matchValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Requirement {\n");
    sb.append("    requirementSet: ").append(toIndentedString(requirementSet)).append("\n");
    sb.append("    regexMatch: ").append(toIndentedString(regexMatch)).append("\n");
    sb.append("    systemRequirement: ").append(toIndentedString(systemRequirement)).append("\n");
    sb.append("    readonly: ").append(toIndentedString(readonly)).append("\n");
    sb.append("    pluginModuleKey: ").append(toIndentedString(pluginModuleKey)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    matchType: ").append(toIndentedString(matchType)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    typeOfMatch: ").append(toIndentedString(typeOfMatch)).append("\n");
    sb.append("    matchValue: ").append(toIndentedString(matchValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

