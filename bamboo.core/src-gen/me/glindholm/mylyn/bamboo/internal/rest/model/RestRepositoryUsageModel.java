/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestEnvironment;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestPlanIdentifier;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * RestRepositoryUsageModel
 */
@JsonPropertyOrder({
  RestRepositoryUsageModel.JSON_PROPERTY_PLANS,
  RestRepositoryUsageModel.JSON_PROPERTY_INACCESSIBLE_PLANS_COUNT,
  RestRepositoryUsageModel.JSON_PROPERTY_TOTAL_PLANS,
  RestRepositoryUsageModel.JSON_PROPERTY_ENVIRONMENTS,
  RestRepositoryUsageModel.JSON_PROPERTY_INACCESSIBLE_ENVIRONMENTS_COUNT,
  RestRepositoryUsageModel.JSON_PROPERTY_TOTAL_ENVIRONMENTS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RestRepositoryUsageModel implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_PLANS = "plans";
  private List<RestPlanIdentifier> plans;

  public static final String JSON_PROPERTY_INACCESSIBLE_PLANS_COUNT = "inaccessiblePlansCount";
  private Integer inaccessiblePlansCount;

  public static final String JSON_PROPERTY_TOTAL_PLANS = "totalPlans";
  private Long totalPlans;

  public static final String JSON_PROPERTY_ENVIRONMENTS = "environments";
  private List<RestEnvironment> environments;

  public static final String JSON_PROPERTY_INACCESSIBLE_ENVIRONMENTS_COUNT = "inaccessibleEnvironmentsCount";
  private Integer inaccessibleEnvironmentsCount;

  public static final String JSON_PROPERTY_TOTAL_ENVIRONMENTS = "totalEnvironments";
  private Long totalEnvironments;

  public RestRepositoryUsageModel() { 
  }

  public RestRepositoryUsageModel plans(List<RestPlanIdentifier> plans) {
    this.plans = plans;
    return this;
  }

  public RestRepositoryUsageModel addPlansItem(RestPlanIdentifier plansItem) {
    if (this.plans == null) {
      this.plans = new ArrayList<>();
    }
    this.plans.add(plansItem);
    return this;
  }

   /**
   * Get plans
   * @return plans
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLANS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<RestPlanIdentifier> getPlans() {
    return plans;
  }


  @JsonProperty(JSON_PROPERTY_PLANS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlans(List<RestPlanIdentifier> plans) {
    this.plans = plans;
  }


  public RestRepositoryUsageModel inaccessiblePlansCount(Integer inaccessiblePlansCount) {
    this.inaccessiblePlansCount = inaccessiblePlansCount;
    return this;
  }

   /**
   * Get inaccessiblePlansCount
   * @return inaccessiblePlansCount
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_INACCESSIBLE_PLANS_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInaccessiblePlansCount() {
    return inaccessiblePlansCount;
  }


  @JsonProperty(JSON_PROPERTY_INACCESSIBLE_PLANS_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInaccessiblePlansCount(Integer inaccessiblePlansCount) {
    this.inaccessiblePlansCount = inaccessiblePlansCount;
  }


  public RestRepositoryUsageModel totalPlans(Long totalPlans) {
    this.totalPlans = totalPlans;
    return this;
  }

   /**
   * Get totalPlans
   * @return totalPlans
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TOTAL_PLANS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getTotalPlans() {
    return totalPlans;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_PLANS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalPlans(Long totalPlans) {
    this.totalPlans = totalPlans;
  }


  public RestRepositoryUsageModel environments(List<RestEnvironment> environments) {
    this.environments = environments;
    return this;
  }

  public RestRepositoryUsageModel addEnvironmentsItem(RestEnvironment environmentsItem) {
    if (this.environments == null) {
      this.environments = new ArrayList<>();
    }
    this.environments.add(environmentsItem);
    return this;
  }

   /**
   * Get environments
   * @return environments
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ENVIRONMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<RestEnvironment> getEnvironments() {
    return environments;
  }


  @JsonProperty(JSON_PROPERTY_ENVIRONMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnvironments(List<RestEnvironment> environments) {
    this.environments = environments;
  }


  public RestRepositoryUsageModel inaccessibleEnvironmentsCount(Integer inaccessibleEnvironmentsCount) {
    this.inaccessibleEnvironmentsCount = inaccessibleEnvironmentsCount;
    return this;
  }

   /**
   * Get inaccessibleEnvironmentsCount
   * @return inaccessibleEnvironmentsCount
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_INACCESSIBLE_ENVIRONMENTS_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInaccessibleEnvironmentsCount() {
    return inaccessibleEnvironmentsCount;
  }


  @JsonProperty(JSON_PROPERTY_INACCESSIBLE_ENVIRONMENTS_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInaccessibleEnvironmentsCount(Integer inaccessibleEnvironmentsCount) {
    this.inaccessibleEnvironmentsCount = inaccessibleEnvironmentsCount;
  }


  public RestRepositoryUsageModel totalEnvironments(Long totalEnvironments) {
    this.totalEnvironments = totalEnvironments;
    return this;
  }

   /**
   * Get totalEnvironments
   * @return totalEnvironments
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TOTAL_ENVIRONMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getTotalEnvironments() {
    return totalEnvironments;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_ENVIRONMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalEnvironments(Long totalEnvironments) {
    this.totalEnvironments = totalEnvironments;
  }


  /**
   * Return true if this RestRepositoryUsageModel object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestRepositoryUsageModel restRepositoryUsageModel = (RestRepositoryUsageModel) o;
    return Objects.equals(this.plans, restRepositoryUsageModel.plans) &&
        Objects.equals(this.inaccessiblePlansCount, restRepositoryUsageModel.inaccessiblePlansCount) &&
        Objects.equals(this.totalPlans, restRepositoryUsageModel.totalPlans) &&
        Objects.equals(this.environments, restRepositoryUsageModel.environments) &&
        Objects.equals(this.inaccessibleEnvironmentsCount, restRepositoryUsageModel.inaccessibleEnvironmentsCount) &&
        Objects.equals(this.totalEnvironments, restRepositoryUsageModel.totalEnvironments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(plans, inaccessiblePlansCount, totalPlans, environments, inaccessibleEnvironmentsCount, totalEnvironments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestRepositoryUsageModel {\n");
    sb.append("    plans: ").append(toIndentedString(plans)).append("\n");
    sb.append("    inaccessiblePlansCount: ").append(toIndentedString(inaccessiblePlansCount)).append("\n");
    sb.append("    totalPlans: ").append(toIndentedString(totalPlans)).append("\n");
    sb.append("    environments: ").append(toIndentedString(environments)).append("\n");
    sb.append("    inaccessibleEnvironmentsCount: ").append(toIndentedString(inaccessibleEnvironmentsCount)).append("\n");
    sb.append("    totalEnvironments: ").append(toIndentedString(totalEnvironments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

