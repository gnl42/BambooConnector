/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import me.glindholm.mylyn.bamboo.internal.rest.model.BambooEntityOid;
import me.glindholm.mylyn.bamboo.internal.rest.model.TaskConditionConfig;
import me.glindholm.mylyn.bamboo.internal.rest.model.TaskRootDirectorySelector;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * TaskDefinition
 */
@JsonPropertyOrder({
  TaskDefinition.JSON_PROPERTY_FINALISING,
  TaskDefinition.JSON_PROPERTY_USER_DESCRIPTION,
  TaskDefinition.JSON_PROPERTY_ROOT_DIRECTORY_SELECTOR,
  TaskDefinition.JSON_PROPERTY_CONDITIONS,
  TaskDefinition.JSON_PROPERTY_ENTITY_TYPE,
  TaskDefinition.JSON_PROPERTY_CONFIGURATION,
  TaskDefinition.JSON_PROPERTY_ENABLED,
  TaskDefinition.JSON_PROPERTY_PLUGIN_KEY,
  TaskDefinition.JSON_PROPERTY_ID,
  TaskDefinition.JSON_PROPERTY_OID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TaskDefinition implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_FINALISING = "finalising";
  private Boolean finalising;

  public static final String JSON_PROPERTY_USER_DESCRIPTION = "userDescription";
  private String userDescription;

  public static final String JSON_PROPERTY_ROOT_DIRECTORY_SELECTOR = "rootDirectorySelector";
  private TaskRootDirectorySelector rootDirectorySelector;

  public static final String JSON_PROPERTY_CONDITIONS = "conditions";
  private List<TaskConditionConfig> conditions;

  /**
   * Gets or Sets entityType
   */
  public enum EntityTypeEnum {
    CHAIN("CHAIN"),
    
    STAGE("STAGE"),
    
    JOB("JOB"),
    
    REPOSITORY("REPOSITORY"),
    
    CHAIN_BRANCH("CHAIN_BRANCH"),
    
    JOB_BRANCH("JOB_BRANCH"),
    
    TASK("TASK"),
    
    PROJECT("PROJECT"),
    
    ARTIFACT_DEFINITION("ARTIFACT_DEFINITION"),
    
    DEPLOYMENT_PROJECT("DEPLOYMENT_PROJECT"),
    
    SHARED_CREDENTIAL("SHARED_CREDENTIAL");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ENTITY_TYPE = "entityType";
  private EntityTypeEnum entityType;

  public static final String JSON_PROPERTY_CONFIGURATION = "configuration";
  private Object _configuration;

  public static final String JSON_PROPERTY_ENABLED = "enabled";
  private Boolean enabled;

  public static final String JSON_PROPERTY_PLUGIN_KEY = "pluginKey";
  private String pluginKey;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_OID = "oid";
  private BambooEntityOid oid;

  public TaskDefinition() { 
  }

  public TaskDefinition finalising(Boolean finalising) {
    this.finalising = finalising;
    return this;
  }

   /**
   * Get finalising
   * @return finalising
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_FINALISING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getFinalising() {
    return finalising;
  }


  @JsonProperty(JSON_PROPERTY_FINALISING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFinalising(Boolean finalising) {
    this.finalising = finalising;
  }


  public TaskDefinition userDescription(String userDescription) {
    this.userDescription = userDescription;
    return this;
  }

   /**
   * Get userDescription
   * @return userDescription
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_USER_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserDescription() {
    return userDescription;
  }


  @JsonProperty(JSON_PROPERTY_USER_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserDescription(String userDescription) {
    this.userDescription = userDescription;
  }


  public TaskDefinition rootDirectorySelector(TaskRootDirectorySelector rootDirectorySelector) {
    this.rootDirectorySelector = rootDirectorySelector;
    return this;
  }

   /**
   * Get rootDirectorySelector
   * @return rootDirectorySelector
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ROOT_DIRECTORY_SELECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TaskRootDirectorySelector getRootDirectorySelector() {
    return rootDirectorySelector;
  }


  @JsonProperty(JSON_PROPERTY_ROOT_DIRECTORY_SELECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRootDirectorySelector(TaskRootDirectorySelector rootDirectorySelector) {
    this.rootDirectorySelector = rootDirectorySelector;
  }


  public TaskDefinition conditions(List<TaskConditionConfig> conditions) {
    this.conditions = conditions;
    return this;
  }

  public TaskDefinition addConditionsItem(TaskConditionConfig conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * Get conditions
   * @return conditions
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<TaskConditionConfig> getConditions() {
    return conditions;
  }


  @JsonProperty(JSON_PROPERTY_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConditions(List<TaskConditionConfig> conditions) {
    this.conditions = conditions;
  }


  public TaskDefinition entityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * Get entityType
   * @return entityType
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EntityTypeEnum getEntityType() {
    return entityType;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
  }


  public TaskDefinition _configuration(Object _configuration) {
    this._configuration = _configuration;
    return this;
  }

   /**
   * Get _configuration
   * @return _configuration
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getConfiguration() {
    return _configuration;
  }


  @JsonProperty(JSON_PROPERTY_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfiguration(Object _configuration) {
    this._configuration = _configuration;
  }


  public TaskDefinition enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnabled() {
    return enabled;
  }


  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public TaskDefinition pluginKey(String pluginKey) {
    this.pluginKey = pluginKey;
    return this;
  }

   /**
   * Get pluginKey
   * @return pluginKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLUGIN_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPluginKey() {
    return pluginKey;
  }


  @JsonProperty(JSON_PROPERTY_PLUGIN_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPluginKey(String pluginKey) {
    this.pluginKey = pluginKey;
  }


  public TaskDefinition id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  public TaskDefinition oid(BambooEntityOid oid) {
    this.oid = oid;
    return this;
  }

   /**
   * Get oid
   * @return oid
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_OID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BambooEntityOid getOid() {
    return oid;
  }


  @JsonProperty(JSON_PROPERTY_OID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOid(BambooEntityOid oid) {
    this.oid = oid;
  }


  /**
   * Return true if this TaskDefinition object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskDefinition taskDefinition = (TaskDefinition) o;
    return Objects.equals(this.finalising, taskDefinition.finalising) &&
        Objects.equals(this.userDescription, taskDefinition.userDescription) &&
        Objects.equals(this.rootDirectorySelector, taskDefinition.rootDirectorySelector) &&
        Objects.equals(this.conditions, taskDefinition.conditions) &&
        Objects.equals(this.entityType, taskDefinition.entityType) &&
        Objects.equals(this._configuration, taskDefinition._configuration) &&
        Objects.equals(this.enabled, taskDefinition.enabled) &&
        Objects.equals(this.pluginKey, taskDefinition.pluginKey) &&
        Objects.equals(this.id, taskDefinition.id) &&
        Objects.equals(this.oid, taskDefinition.oid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(finalising, userDescription, rootDirectorySelector, conditions, entityType, _configuration, enabled, pluginKey, id, oid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskDefinition {\n");
    sb.append("    finalising: ").append(toIndentedString(finalising)).append("\n");
    sb.append("    userDescription: ").append(toIndentedString(userDescription)).append("\n");
    sb.append("    rootDirectorySelector: ").append(toIndentedString(rootDirectorySelector)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    pluginKey: ").append(toIndentedString(pluginKey)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    oid: ").append(toIndentedString(oid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

