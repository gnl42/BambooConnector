/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package me.glindholm.mylyn.bamboo.internal.rest.api;

import me.glindholm.mylyn.bamboo.internal.rest.invoker.ApiClient;
import me.glindholm.mylyn.bamboo.internal.rest.invoker.ApiException;
import me.glindholm.mylyn.bamboo.internal.rest.invoker.ApiResponse;
import me.glindholm.mylyn.bamboo.internal.rest.invoker.Pair;

import me.glindholm.mylyn.bamboo.internal.rest.model.DirectoryInformationResponse;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestArtifactDefinitions;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestBranches;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestBuildLabels;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestDockerPipelineConfiguration;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestErrorCollection;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestJiraIssue;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestPlan;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestPlanBranch;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestPlanLabel;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestPlanSpec;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestPlans;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestQuarantineExpiry;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestVariable;
import me.glindholm.mylyn.bamboo.internal.rest.model.RestVcsBranches;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BuildApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public BuildApi() {
    this(new ApiClient());
  }

  public BuildApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * Add new label to plan.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @param restPlanLabel label content to add to build result (required)
   * @throws ApiException if fails to make API call
   */
  public void addPlanLabel(String projectKey, String buildKey, RestPlanLabel restPlanLabel) throws ApiException {
    addPlanLabelWithHttpInfo(projectKey, buildKey, restPlanLabel);
  }

  /**
   * 
   * Add new label to plan.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @param restPlanLabel label content to add to build result (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addPlanLabelWithHttpInfo(String projectKey, String buildKey, RestPlanLabel restPlanLabel) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addPlanLabelRequestBuilder(projectKey, buildKey, restPlanLabel);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addPlanLabel", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addPlanLabelRequestBuilder(String projectKey, String buildKey, RestPlanLabel restPlanLabel) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling addPlanLabel");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling addPlanLabel");
    }
    // verify the required parameter 'restPlanLabel' is set
    if (restPlanLabel == null) {
      throw new ApiException(400, "Missing the required parameter 'restPlanLabel' when calling addPlanLabel");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan/{projectKey}-{buildKey}/label"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restPlanLabel);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Add a new plan variable.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @param restVariable Plan variable (required)
   * @return RestVariable
   * @throws ApiException if fails to make API call
   */
  public RestVariable addPlanVariable(String projectKey, String buildKey, RestVariable restVariable) throws ApiException {
    ApiResponse<RestVariable> localVarResponse = addPlanVariableWithHttpInfo(projectKey, buildKey, restVariable);
    return localVarResponse.getData();
  }

  /**
   * 
   * Add a new plan variable.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @param restVariable Plan variable (required)
   * @return ApiResponse&lt;RestVariable&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestVariable> addPlanVariableWithHttpInfo(String projectKey, String buildKey, RestVariable restVariable) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addPlanVariableRequestBuilder(projectKey, buildKey, restVariable);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addPlanVariable", localVarResponse);
        }
        return new ApiResponse<RestVariable>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestVariable>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addPlanVariableRequestBuilder(String projectKey, String buildKey, RestVariable restVariable) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling addPlanVariable");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling addPlanVariable");
    }
    // verify the required parameter 'restVariable' is set
    if (restVariable == null) {
      throw new ApiException(400, "Missing the required parameter 'restVariable' when calling addPlanVariable");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan/{projectKey}-{buildKey}/variables"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restVariable);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Create branch for a plan. You can use **vcsBranch** query param to define which vcsBranch should newly created branch use. If not specified it will not override vcsBranch from the plan.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @param branchName New branch name (required)
   * @param cleanupEnabled If plan branch expiry settings should be enabled (optional)
   * @param vcsBranch Name of the VCS branch (optional)
   * @param enabled If plan branch should be enabled (optional)
   * @return RestPlanBranch
   * @throws ApiException if fails to make API call
   */
  public RestPlanBranch createNewBranch(String projectKey, String buildKey, String branchName, String cleanupEnabled, String vcsBranch, String enabled) throws ApiException {
    ApiResponse<RestPlanBranch> localVarResponse = createNewBranchWithHttpInfo(projectKey, buildKey, branchName, cleanupEnabled, vcsBranch, enabled);
    return localVarResponse.getData();
  }

  /**
   * 
   * Create branch for a plan. You can use **vcsBranch** query param to define which vcsBranch should newly created branch use. If not specified it will not override vcsBranch from the plan.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @param branchName New branch name (required)
   * @param cleanupEnabled If plan branch expiry settings should be enabled (optional)
   * @param vcsBranch Name of the VCS branch (optional)
   * @param enabled If plan branch should be enabled (optional)
   * @return ApiResponse&lt;RestPlanBranch&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestPlanBranch> createNewBranchWithHttpInfo(String projectKey, String buildKey, String branchName, String cleanupEnabled, String vcsBranch, String enabled) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createNewBranchRequestBuilder(projectKey, buildKey, branchName, cleanupEnabled, vcsBranch, enabled);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createNewBranch", localVarResponse);
        }
        return new ApiResponse<RestPlanBranch>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestPlanBranch>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createNewBranchRequestBuilder(String projectKey, String buildKey, String branchName, String cleanupEnabled, String vcsBranch, String enabled) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling createNewBranch");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling createNewBranch");
    }
    // verify the required parameter 'branchName' is set
    if (branchName == null) {
      throw new ApiException(400, "Missing the required parameter 'branchName' when calling createNewBranch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan/{projectKey}-{buildKey}/branch/{branchName}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()))
        .replace("{branchName}", ApiClient.urlEncode(branchName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "cleanupEnabled";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cleanupEnabled", cleanupEnabled));
    localVarQueryParameterBaseName = "vcsBranch";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vcsBranch", vcsBranch));
    localVarQueryParameterBaseName = "enabled";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enabled", enabled));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Marks plan for deletion. Plan will be deleted by a batch job.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @throws ApiException if fails to make API call
   */
  public void deletePlan(String projectKey, String buildKey) throws ApiException {
    deletePlanWithHttpInfo(projectKey, buildKey);
  }

  /**
   * 
   * Marks plan for deletion. Plan will be deleted by a batch job.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deletePlanWithHttpInfo(String projectKey, String buildKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deletePlanRequestBuilder(projectKey, buildKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deletePlan", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deletePlanRequestBuilder(String projectKey, String buildKey) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling deletePlan");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling deletePlan");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan/{projectKey}-{buildKey}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Delete the plan variable.
   * @param projectKey Project key (required)
   * @param variableName Name of the variable to be deleted (required)
   * @param buildKey Plan key (required)
   * @throws ApiException if fails to make API call
   */
  public void deletePlanVariable(String projectKey, String variableName, String buildKey) throws ApiException {
    deletePlanVariableWithHttpInfo(projectKey, variableName, buildKey);
  }

  /**
   * 
   * Delete the plan variable.
   * @param projectKey Project key (required)
   * @param variableName Name of the variable to be deleted (required)
   * @param buildKey Plan key (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deletePlanVariableWithHttpInfo(String projectKey, String variableName, String buildKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deletePlanVariableRequestBuilder(projectKey, variableName, buildKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deletePlanVariable", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deletePlanVariableRequestBuilder(String projectKey, String variableName, String buildKey) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling deletePlanVariable");
    }
    // verify the required parameter 'variableName' is set
    if (variableName == null) {
      throw new ApiException(400, "Missing the required parameter 'variableName' when calling deletePlanVariable");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling deletePlanVariable");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan/{projectKey}-{buildKey}/variables/{variableName}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{variableName}", ApiClient.urlEncode(variableName.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Disable plan.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @throws ApiException if fails to make API call
   */
  public void disablePlan(String projectKey, String buildKey) throws ApiException {
    disablePlanWithHttpInfo(projectKey, buildKey);
  }

  /**
   * 
   * Disable plan.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> disablePlanWithHttpInfo(String projectKey, String buildKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = disablePlanRequestBuilder(projectKey, buildKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("disablePlan", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder disablePlanRequestBuilder(String projectKey, String buildKey) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling disablePlan");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling disablePlan");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan/{projectKey}-{buildKey}/enable"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update the plan variable.
   * @param projectKey Project key (required)
   * @param variableName Variable name (required)
   * @param buildKey Plan key (required)
   * @param restVariable Variable to be updated (required)
   * @return RestVariable
   * @throws ApiException if fails to make API call
   */
  public RestVariable editPlanVariable(String projectKey, String variableName, String buildKey, RestVariable restVariable) throws ApiException {
    ApiResponse<RestVariable> localVarResponse = editPlanVariableWithHttpInfo(projectKey, variableName, buildKey, restVariable);
    return localVarResponse.getData();
  }

  /**
   * 
   * Update the plan variable.
   * @param projectKey Project key (required)
   * @param variableName Variable name (required)
   * @param buildKey Plan key (required)
   * @param restVariable Variable to be updated (required)
   * @return ApiResponse&lt;RestVariable&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestVariable> editPlanVariableWithHttpInfo(String projectKey, String variableName, String buildKey, RestVariable restVariable) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = editPlanVariableRequestBuilder(projectKey, variableName, buildKey, restVariable);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("editPlanVariable", localVarResponse);
        }
        return new ApiResponse<RestVariable>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestVariable>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder editPlanVariableRequestBuilder(String projectKey, String variableName, String buildKey, RestVariable restVariable) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling editPlanVariable");
    }
    // verify the required parameter 'variableName' is set
    if (variableName == null) {
      throw new ApiException(400, "Missing the required parameter 'variableName' when calling editPlanVariable");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling editPlanVariable");
    }
    // verify the required parameter 'restVariable' is set
    if (restVariable == null) {
      throw new ApiException(400, "Missing the required parameter 'restVariable' when calling editPlanVariable");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan/{projectKey}-{buildKey}/variables/{variableName}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{variableName}", ApiClient.urlEncode(variableName.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restVariable);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Enable plan.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @throws ApiException if fails to make API call
   */
  public void enablePlan(String projectKey, String buildKey) throws ApiException {
    enablePlanWithHttpInfo(projectKey, buildKey);
  }

  /**
   * 
   * Enable plan.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> enablePlanWithHttpInfo(String projectKey, String buildKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = enablePlanRequestBuilder(projectKey, buildKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("enablePlan", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder enablePlanRequestBuilder(String projectKey, String buildKey) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling enablePlan");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling enablePlan");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan/{projectKey}-{buildKey}/enable"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Enable specs scanning for all branches.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @throws ApiException if fails to make API call
   */
  public void enableSpecsForBranches(String projectKey, String buildKey) throws ApiException {
    enableSpecsForBranchesWithHttpInfo(projectKey, buildKey);
  }

  /**
   * 
   * Enable specs scanning for all branches.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> enableSpecsForBranchesWithHttpInfo(String projectKey, String buildKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = enableSpecsForBranchesRequestBuilder(projectKey, buildKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("enableSpecsForBranches", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder enableSpecsForBranchesRequestBuilder(String projectKey, String buildKey) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling enableSpecsForBranches");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling enableSpecsForBranches");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan/{projectKey}-{buildKey}/branch/enableSpecsForBranches"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Export plan as Bamboo Specs code.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @param _package A package name for the exported spec (optional)
   * @param format a format of code. It&#39;s &#39;java&#39; by default. (optional)
   * @return RestPlanSpec
   * @throws ApiException if fails to make API call
   */
  public RestPlanSpec exportPlanSpec(String projectKey, String buildKey, String _package, String format) throws ApiException {
    ApiResponse<RestPlanSpec> localVarResponse = exportPlanSpecWithHttpInfo(projectKey, buildKey, _package, format);
    return localVarResponse.getData();
  }

  /**
   * 
   * Export plan as Bamboo Specs code.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @param _package A package name for the exported spec (optional)
   * @param format a format of code. It&#39;s &#39;java&#39; by default. (optional)
   * @return ApiResponse&lt;RestPlanSpec&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestPlanSpec> exportPlanSpecWithHttpInfo(String projectKey, String buildKey, String _package, String format) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportPlanSpecRequestBuilder(projectKey, buildKey, _package, format);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportPlanSpec", localVarResponse);
        }
        return new ApiResponse<RestPlanSpec>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestPlanSpec>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportPlanSpecRequestBuilder(String projectKey, String buildKey, String _package, String format) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling exportPlanSpec");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling exportPlanSpec");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan/{projectKey}-{buildKey}/specs"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "package";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("package", _package));
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * List all plans that user has READ permission for and allowed to see.  Possible expand parameters:  - &lt;tt&gt;plans&lt;/tt&gt; - list of plans  - &lt;tt&gt;plans.plan&lt;/tt&gt; - list of plans with plan details  - &lt;tt&gt;plans.plan.actions&lt;/tt&gt; - list of plans with actions details  - &lt;tt&gt;plans.plan.s&lt;/tt&gt; - list of plans with stages details  - &lt;tt&gt;plans.plan.branches&lt;/tt&gt; - list of plans with brnach details
   * @param expand Possible expand parameters: plans,plans.plan,plans.plan.actions,plans.plan.stages,plans.plan.branches (optional)
   * @return RestPlans
   * @throws ApiException if fails to make API call
   */
  public RestPlans getAllPlanList(String expand) throws ApiException {
    ApiResponse<RestPlans> localVarResponse = getAllPlanListWithHttpInfo(expand);
    return localVarResponse.getData();
  }

  /**
   * 
   * List all plans that user has READ permission for and allowed to see.  Possible expand parameters:  - &lt;tt&gt;plans&lt;/tt&gt; - list of plans  - &lt;tt&gt;plans.plan&lt;/tt&gt; - list of plans with plan details  - &lt;tt&gt;plans.plan.actions&lt;/tt&gt; - list of plans with actions details  - &lt;tt&gt;plans.plan.s&lt;/tt&gt; - list of plans with stages details  - &lt;tt&gt;plans.plan.branches&lt;/tt&gt; - list of plans with brnach details
   * @param expand Possible expand parameters: plans,plans.plan,plans.plan.actions,plans.plan.stages,plans.plan.branches (optional)
   * @return ApiResponse&lt;RestPlans&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestPlans> getAllPlanListWithHttpInfo(String expand) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAllPlanListRequestBuilder(expand);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAllPlanList", localVarResponse);
        }
        return new ApiResponse<RestPlans>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestPlans>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAllPlanListRequestBuilder(String expand) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "expand";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("expand", expand));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieves Docker configuration for given job.
   * @param jobKey Key of the job (required)
   * @return RestDockerPipelineConfiguration
   * @throws ApiException if fails to make API call
   */
  public RestDockerPipelineConfiguration getDockerPipelineConfiguration(String jobKey) throws ApiException {
    ApiResponse<RestDockerPipelineConfiguration> localVarResponse = getDockerPipelineConfigurationWithHttpInfo(jobKey);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieves Docker configuration for given job.
   * @param jobKey Key of the job (required)
   * @return ApiResponse&lt;RestDockerPipelineConfiguration&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestDockerPipelineConfiguration> getDockerPipelineConfigurationWithHttpInfo(String jobKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDockerPipelineConfigurationRequestBuilder(jobKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDockerPipelineConfiguration", localVarResponse);
        }
        return new ApiResponse<RestDockerPipelineConfiguration>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestDockerPipelineConfiguration>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDockerPipelineConfigurationRequestBuilder(String jobKey) throws ApiException {
    // verify the required parameter 'jobKey' is set
    if (jobKey == null) {
      throw new ApiException(400, "Missing the required parameter 'jobKey' when calling getDockerPipelineConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/job/{jobKey}/docker"
        .replace("{jobKey}", ApiClient.urlEncode(jobKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Fetch linked Jira issue details.
   * @param projectKey Project key (required)
   * @param issueKey Jira issue key (required)
   * @param buildKey Plan key (required)
   * @return RestJiraIssue
   * @throws ApiException if fails to make API call
   */
  public RestJiraIssue getIssueDetails(String projectKey, String issueKey, String buildKey) throws ApiException {
    ApiResponse<RestJiraIssue> localVarResponse = getIssueDetailsWithHttpInfo(projectKey, issueKey, buildKey);
    return localVarResponse.getData();
  }

  /**
   * 
   * Fetch linked Jira issue details.
   * @param projectKey Project key (required)
   * @param issueKey Jira issue key (required)
   * @param buildKey Plan key (required)
   * @return ApiResponse&lt;RestJiraIssue&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestJiraIssue> getIssueDetailsWithHttpInfo(String projectKey, String issueKey, String buildKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getIssueDetailsRequestBuilder(projectKey, issueKey, buildKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getIssueDetails", localVarResponse);
        }
        return new ApiResponse<RestJiraIssue>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestJiraIssue>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getIssueDetailsRequestBuilder(String projectKey, String issueKey, String buildKey) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling getIssueDetails");
    }
    // verify the required parameter 'issueKey' is set
    if (issueKey == null) {
      throw new ApiException(400, "Missing the required parameter 'issueKey' when calling getIssueDetails");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling getIssueDetails");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan/{projectKey}-{buildKey}/issue/{issueKey}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{issueKey}", ApiClient.urlEncode(issueKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Fetch plan details.
   * @param projectKey Project key (required)
   * @param buildKey Build key (might be planKey or composite planKey-jobKey) (required)
   * @param expand Possible expand parameters: actions, stages, branches, variableContext. (optional)
   * @return RestPlan
   * @throws ApiException if fails to make API call
   */
  public RestPlan getPlan(String projectKey, String buildKey, String expand) throws ApiException {
    ApiResponse<RestPlan> localVarResponse = getPlanWithHttpInfo(projectKey, buildKey, expand);
    return localVarResponse.getData();
  }

  /**
   * 
   * Fetch plan details.
   * @param projectKey Project key (required)
   * @param buildKey Build key (might be planKey or composite planKey-jobKey) (required)
   * @param expand Possible expand parameters: actions, stages, branches, variableContext. (optional)
   * @return ApiResponse&lt;RestPlan&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestPlan> getPlanWithHttpInfo(String projectKey, String buildKey, String expand) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPlanRequestBuilder(projectKey, buildKey, expand);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPlan", localVarResponse);
        }
        return new ApiResponse<RestPlan>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestPlan>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPlanRequestBuilder(String projectKey, String buildKey, String expand) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling getPlan");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling getPlan");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan/{projectKey}-{buildKey}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "expand";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("expand", expand));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Fetch plan details.
   * @param projectKey Project key (required)
   * @param buildKey Build key (might be planKey or composite planKey-jobKey) (required)
   * @param expand Possible expand parameters: actions, stages, branches, variableContext. (optional)
   * @return RestPlan
   * @throws ApiException if fails to make API call
   */
  public RestPlan getPlanAlias(String projectKey, String buildKey, String expand) throws ApiException {
    ApiResponse<RestPlan> localVarResponse = getPlanAliasWithHttpInfo(projectKey, buildKey, expand);
    return localVarResponse.getData();
  }

  /**
   * 
   * Fetch plan details.
   * @param projectKey Project key (required)
   * @param buildKey Build key (might be planKey or composite planKey-jobKey) (required)
   * @param expand Possible expand parameters: actions, stages, branches, variableContext. (optional)
   * @return ApiResponse&lt;RestPlan&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestPlan> getPlanAliasWithHttpInfo(String projectKey, String buildKey, String expand) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPlanAliasRequestBuilder(projectKey, buildKey, expand);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPlanAlias", localVarResponse);
        }
        return new ApiResponse<RestPlan>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestPlan>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPlanAliasRequestBuilder(String projectKey, String buildKey, String expand) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling getPlanAlias");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling getPlanAlias");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan/{projectKey}/{buildKey}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "expand";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("expand", expand));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Fetch plan&#39;s shared artifact definitions.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @param maxResult Maximum count of artifacts (optional)
   * @param startIndex Start index of artifacts (optional)
   * @return RestArtifactDefinitions
   * @throws ApiException if fails to make API call
   */
  public RestArtifactDefinitions getPlanArtifactDefinition(String projectKey, String buildKey, Integer maxResult, Integer startIndex) throws ApiException {
    ApiResponse<RestArtifactDefinitions> localVarResponse = getPlanArtifactDefinitionWithHttpInfo(projectKey, buildKey, maxResult, startIndex);
    return localVarResponse.getData();
  }

  /**
   * 
   * Fetch plan&#39;s shared artifact definitions.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @param maxResult Maximum count of artifacts (optional)
   * @param startIndex Start index of artifacts (optional)
   * @return ApiResponse&lt;RestArtifactDefinitions&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestArtifactDefinitions> getPlanArtifactDefinitionWithHttpInfo(String projectKey, String buildKey, Integer maxResult, Integer startIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPlanArtifactDefinitionRequestBuilder(projectKey, buildKey, maxResult, startIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPlanArtifactDefinition", localVarResponse);
        }
        return new ApiResponse<RestArtifactDefinitions>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestArtifactDefinitions>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPlanArtifactDefinitionRequestBuilder(String projectKey, String buildKey, Integer maxResult, Integer startIndex) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling getPlanArtifactDefinition");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling getPlanArtifactDefinition");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan/{projectKey}-{buildKey}/artifact"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "max-result";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-result", maxResult));
    localVarQueryParameterBaseName = "start-index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start-index", startIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Provide details for specified branch of a specified plan.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @param branchName Branch display name (required)
   * @param expand Possible expand parameters: latestResult,master. (optional)
   * @return RestPlanBranch
   * @throws ApiException if fails to make API call
   */
  public RestPlanBranch getPlanBranch(String projectKey, String buildKey, String branchName, String expand) throws ApiException {
    ApiResponse<RestPlanBranch> localVarResponse = getPlanBranchWithHttpInfo(projectKey, buildKey, branchName, expand);
    return localVarResponse.getData();
  }

  /**
   * 
   * Provide details for specified branch of a specified plan.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @param branchName Branch display name (required)
   * @param expand Possible expand parameters: latestResult,master. (optional)
   * @return ApiResponse&lt;RestPlanBranch&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestPlanBranch> getPlanBranchWithHttpInfo(String projectKey, String buildKey, String branchName, String expand) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPlanBranchRequestBuilder(projectKey, buildKey, branchName, expand);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPlanBranch", localVarResponse);
        }
        return new ApiResponse<RestPlanBranch>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestPlanBranch>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPlanBranchRequestBuilder(String projectKey, String buildKey, String branchName, String expand) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling getPlanBranch");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling getPlanBranch");
    }
    // verify the required parameter 'branchName' is set
    if (branchName == null) {
      throw new ApiException(400, "Missing the required parameter 'branchName' when calling getPlanBranch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan/{projectKey}-{buildKey}/branch/{branchName}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()))
        .replace("{branchName}", ApiClient.urlEncode(branchName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "expand";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("expand", expand));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Fetch list of branches for specified plan.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @param enabledOnly Show enabled branches only (optional)
   * @param cloverEnabled Show branches with Clover integration enabled (optional)
   * @param my Show branches where current user is creator (optional)
   * @param favourite Show favourite branches only (optional)
   * @return RestBranches
   * @throws ApiException if fails to make API call
   */
  public RestBranches getPlanBranches(String projectKey, String buildKey, String enabledOnly, String cloverEnabled, String my, String favourite) throws ApiException {
    ApiResponse<RestBranches> localVarResponse = getPlanBranchesWithHttpInfo(projectKey, buildKey, enabledOnly, cloverEnabled, my, favourite);
    return localVarResponse.getData();
  }

  /**
   * 
   * Fetch list of branches for specified plan.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @param enabledOnly Show enabled branches only (optional)
   * @param cloverEnabled Show branches with Clover integration enabled (optional)
   * @param my Show branches where current user is creator (optional)
   * @param favourite Show favourite branches only (optional)
   * @return ApiResponse&lt;RestBranches&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestBranches> getPlanBranchesWithHttpInfo(String projectKey, String buildKey, String enabledOnly, String cloverEnabled, String my, String favourite) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPlanBranchesRequestBuilder(projectKey, buildKey, enabledOnly, cloverEnabled, my, favourite);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPlanBranches", localVarResponse);
        }
        return new ApiResponse<RestBranches>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestBranches>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPlanBranchesRequestBuilder(String projectKey, String buildKey, String enabledOnly, String cloverEnabled, String my, String favourite) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling getPlanBranches");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling getPlanBranches");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan/{projectKey}-{buildKey}/branch"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "enabledOnly";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("enabledOnly", enabledOnly));
    localVarQueryParameterBaseName = "cloverEnabled";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cloverEnabled", cloverEnabled));
    localVarQueryParameterBaseName = "my";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("my", my));
    localVarQueryParameterBaseName = "favourite";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("favourite", favourite));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Provides the directories where artifacts and build logs can be found for a given plan key. Disabled by default.  See https://confluence.atlassian.com/display/BAMBOO/Plan+directory+information+REST+API for more information.
   * @param planKey the plan key to retrieve directory information for.  Can be a top-level key (i.e. &#39;PROJ-PLAN&#39;) or a branch key (i.e. &#39;PROJ-PLAN15&#39;) (required)
   * @return DirectoryInformationResponse
   * @throws ApiException if fails to make API call
   */
  public DirectoryInformationResponse getPlanDirectory(String planKey) throws ApiException {
    ApiResponse<DirectoryInformationResponse> localVarResponse = getPlanDirectoryWithHttpInfo(planKey);
    return localVarResponse.getData();
  }

  /**
   * 
   * Provides the directories where artifacts and build logs can be found for a given plan key. Disabled by default.  See https://confluence.atlassian.com/display/BAMBOO/Plan+directory+information+REST+API for more information.
   * @param planKey the plan key to retrieve directory information for.  Can be a top-level key (i.e. &#39;PROJ-PLAN&#39;) or a branch key (i.e. &#39;PROJ-PLAN15&#39;) (required)
   * @return ApiResponse&lt;DirectoryInformationResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DirectoryInformationResponse> getPlanDirectoryWithHttpInfo(String planKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPlanDirectoryRequestBuilder(planKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPlanDirectory", localVarResponse);
        }
        return new ApiResponse<DirectoryInformationResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DirectoryInformationResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPlanDirectoryRequestBuilder(String planKey) throws ApiException {
    // verify the required parameter 'planKey' is set
    if (planKey == null) {
      throw new ApiException(400, "Missing the required parameter 'planKey' when calling getPlanDirectory");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/planDirectoryInfo/{planKey}"
        .replace("{planKey}", ApiClient.urlEncode(planKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * List of labels for plan.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @return RestBuildLabels
   * @throws ApiException if fails to make API call
   */
  public RestBuildLabels getPlanLabels(String projectKey, String buildKey) throws ApiException {
    ApiResponse<RestBuildLabels> localVarResponse = getPlanLabelsWithHttpInfo(projectKey, buildKey);
    return localVarResponse.getData();
  }

  /**
   * 
   * List of labels for plan.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @return ApiResponse&lt;RestBuildLabels&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestBuildLabels> getPlanLabelsWithHttpInfo(String projectKey, String buildKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPlanLabelsRequestBuilder(projectKey, buildKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPlanLabels", localVarResponse);
        }
        return new ApiResponse<RestBuildLabels>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestBuildLabels>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPlanLabelsRequestBuilder(String projectKey, String buildKey) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling getPlanLabels");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling getPlanLabels");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan/{projectKey}-{buildKey}/label"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve the plan variable by given name.
   * @param projectKey Project key (required)
   * @param variableName  (required)
   * @param buildKey Plan key (required)
   * @return RestVariable
   * @throws ApiException if fails to make API call
   */
  public RestVariable getPlanVariable(String projectKey, String variableName, String buildKey) throws ApiException {
    ApiResponse<RestVariable> localVarResponse = getPlanVariableWithHttpInfo(projectKey, variableName, buildKey);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve the plan variable by given name.
   * @param projectKey Project key (required)
   * @param variableName  (required)
   * @param buildKey Plan key (required)
   * @return ApiResponse&lt;RestVariable&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestVariable> getPlanVariableWithHttpInfo(String projectKey, String variableName, String buildKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPlanVariableRequestBuilder(projectKey, variableName, buildKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPlanVariable", localVarResponse);
        }
        return new ApiResponse<RestVariable>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestVariable>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPlanVariableRequestBuilder(String projectKey, String variableName, String buildKey) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling getPlanVariable");
    }
    // verify the required parameter 'variableName' is set
    if (variableName == null) {
      throw new ApiException(400, "Missing the required parameter 'variableName' when calling getPlanVariable");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling getPlanVariable");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan/{projectKey}-{buildKey}/variables/{variableName}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{variableName}", ApiClient.urlEncode(variableName.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve the list of all variables for a plan.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @return List&lt;RestVariable&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RestVariable> getPlanVariables(String projectKey, String buildKey) throws ApiException {
    ApiResponse<List<RestVariable>> localVarResponse = getPlanVariablesWithHttpInfo(projectKey, buildKey);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve the list of all variables for a plan.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @return ApiResponse&lt;List&lt;RestVariable&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RestVariable>> getPlanVariablesWithHttpInfo(String projectKey, String buildKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPlanVariablesRequestBuilder(projectKey, buildKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPlanVariables", localVarResponse);
        }
        return new ApiResponse<List<RestVariable>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RestVariable>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPlanVariablesRequestBuilder(String projectKey, String buildKey) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling getPlanVariables");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling getPlanVariables");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan/{projectKey}-{buildKey}/variables"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * List of vcs branch names for branches that exist on the default repository of this plan.
   * @param projectKey Project key (required)
   * @param buildKey Plan key - only top level plans are supported (required)
   * @param maxResult Maximum count of branches (optional)
   * @param searchTerm Search term based on which the branch names will be filtered out (optional)
   * @param startIndex Start index of branches (optional)
   * @return RestVcsBranches
   * @throws ApiException if fails to make API call
   */
  public RestVcsBranches getVcsBranches(String projectKey, String buildKey, Integer maxResult, String searchTerm, Integer startIndex) throws ApiException {
    ApiResponse<RestVcsBranches> localVarResponse = getVcsBranchesWithHttpInfo(projectKey, buildKey, maxResult, searchTerm, startIndex);
    return localVarResponse.getData();
  }

  /**
   * 
   * List of vcs branch names for branches that exist on the default repository of this plan.
   * @param projectKey Project key (required)
   * @param buildKey Plan key - only top level plans are supported (required)
   * @param maxResult Maximum count of branches (optional)
   * @param searchTerm Search term based on which the branch names will be filtered out (optional)
   * @param startIndex Start index of branches (optional)
   * @return ApiResponse&lt;RestVcsBranches&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestVcsBranches> getVcsBranchesWithHttpInfo(String projectKey, String buildKey, Integer maxResult, String searchTerm, Integer startIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getVcsBranchesRequestBuilder(projectKey, buildKey, maxResult, searchTerm, startIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getVcsBranches", localVarResponse);
        }
        return new ApiResponse<RestVcsBranches>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestVcsBranches>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getVcsBranchesRequestBuilder(String projectKey, String buildKey, Integer maxResult, String searchTerm, Integer startIndex) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling getVcsBranches");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling getVcsBranches");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan/{projectKey}-{buildKey}/vcsBranches"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "max-result";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-result", maxResult));
    localVarQueryParameterBaseName = "searchTerm";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchTerm", searchTerm));
    localVarQueryParameterBaseName = "start-index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start-index", startIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Add plan to favourite.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @throws ApiException if fails to make API call
   */
  public void markPlanFavourite(String projectKey, String buildKey) throws ApiException {
    markPlanFavouriteWithHttpInfo(projectKey, buildKey);
  }

  /**
   * 
   * Add plan to favourite.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> markPlanFavouriteWithHttpInfo(String projectKey, String buildKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = markPlanFavouriteRequestBuilder(projectKey, buildKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("markPlanFavourite", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder markPlanFavouriteRequestBuilder(String projectKey, String buildKey) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling markPlanFavourite");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling markPlanFavourite");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan/{projectKey}-{buildKey}/favourite"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Quarantine plan&#39;s test.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @param testId Test id (required)
   * @param restQuarantineExpiry Quarantine settings (optional)
   * @throws ApiException if fails to make API call
   */
  public void quarantineTest(String projectKey, String buildKey, String testId, RestQuarantineExpiry restQuarantineExpiry) throws ApiException {
    quarantineTestWithHttpInfo(projectKey, buildKey, testId, restQuarantineExpiry);
  }

  /**
   * 
   * Quarantine plan&#39;s test.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @param testId Test id (required)
   * @param restQuarantineExpiry Quarantine settings (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> quarantineTestWithHttpInfo(String projectKey, String buildKey, String testId, RestQuarantineExpiry restQuarantineExpiry) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = quarantineTestRequestBuilder(projectKey, buildKey, testId, restQuarantineExpiry);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("quarantineTest", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder quarantineTestRequestBuilder(String projectKey, String buildKey, String testId, RestQuarantineExpiry restQuarantineExpiry) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling quarantineTest");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling quarantineTest");
    }
    // verify the required parameter 'testId' is set
    if (testId == null) {
      throw new ApiException(400, "Missing the required parameter 'testId' when calling quarantineTest");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan/{projectKey}-{buildKey}/test/{testId}/quarantine"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()))
        .replace("{testId}", ApiClient.urlEncode(testId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restQuarantineExpiry);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Remove label from plan.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @param labelName Label name to remove from plan (required)
   * @throws ApiException if fails to make API call
   */
  public void removePlanLabel(String projectKey, String buildKey, String labelName) throws ApiException {
    removePlanLabelWithHttpInfo(projectKey, buildKey, labelName);
  }

  /**
   * 
   * Remove label from plan.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @param labelName Label name to remove from plan (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removePlanLabelWithHttpInfo(String projectKey, String buildKey, String labelName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removePlanLabelRequestBuilder(projectKey, buildKey, labelName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removePlanLabel", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removePlanLabelRequestBuilder(String projectKey, String buildKey, String labelName) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling removePlanLabel");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling removePlanLabel");
    }
    // verify the required parameter 'labelName' is set
    if (labelName == null) {
      throw new ApiException(400, "Missing the required parameter 'labelName' when calling removePlanLabel");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan/{projectKey}-{buildKey}/label/{labelName}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()))
        .replace("{labelName}", ApiClient.urlEncode(labelName.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Updates Docker configuration for given job.
   * @param jobKey Key of the job (required)
   * @param restDockerPipelineConfiguration The request containing the details of the docker pipeline configuration (required)
   * @throws ApiException if fails to make API call
   */
  public void setDockerPipelineConfiguration(String jobKey, RestDockerPipelineConfiguration restDockerPipelineConfiguration) throws ApiException {
    setDockerPipelineConfigurationWithHttpInfo(jobKey, restDockerPipelineConfiguration);
  }

  /**
   * 
   * Updates Docker configuration for given job.
   * @param jobKey Key of the job (required)
   * @param restDockerPipelineConfiguration The request containing the details of the docker pipeline configuration (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> setDockerPipelineConfigurationWithHttpInfo(String jobKey, RestDockerPipelineConfiguration restDockerPipelineConfiguration) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = setDockerPipelineConfigurationRequestBuilder(jobKey, restDockerPipelineConfiguration);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("setDockerPipelineConfiguration", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder setDockerPipelineConfigurationRequestBuilder(String jobKey, RestDockerPipelineConfiguration restDockerPipelineConfiguration) throws ApiException {
    // verify the required parameter 'jobKey' is set
    if (jobKey == null) {
      throw new ApiException(400, "Missing the required parameter 'jobKey' when calling setDockerPipelineConfiguration");
    }
    // verify the required parameter 'restDockerPipelineConfiguration' is set
    if (restDockerPipelineConfiguration == null) {
      throw new ApiException(400, "Missing the required parameter 'restDockerPipelineConfiguration' when calling setDockerPipelineConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/job/{jobKey}/docker"
        .replace("{jobKey}", ApiClient.urlEncode(jobKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restDockerPipelineConfiguration);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Unleash plan&#39;s test from quarantine.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @param testId Test id (required)
   * @throws ApiException if fails to make API call
   */
  public void unleashTest(String projectKey, String buildKey, String testId) throws ApiException {
    unleashTestWithHttpInfo(projectKey, buildKey, testId);
  }

  /**
   * 
   * Unleash plan&#39;s test from quarantine.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @param testId Test id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> unleashTestWithHttpInfo(String projectKey, String buildKey, String testId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = unleashTestRequestBuilder(projectKey, buildKey, testId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("unleashTest", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder unleashTestRequestBuilder(String projectKey, String buildKey, String testId) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling unleashTest");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling unleashTest");
    }
    // verify the required parameter 'testId' is set
    if (testId == null) {
      throw new ApiException(400, "Missing the required parameter 'testId' when calling unleashTest");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan/{projectKey}-{buildKey}/test/{testId}/unleash"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()))
        .replace("{testId}", ApiClient.urlEncode(testId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Remove plan from favorites.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @throws ApiException if fails to make API call
   */
  public void unmarkPlanFavourite(String projectKey, String buildKey) throws ApiException {
    unmarkPlanFavouriteWithHttpInfo(projectKey, buildKey);
  }

  /**
   * 
   * Remove plan from favorites.
   * @param projectKey Project key (required)
   * @param buildKey Plan key (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> unmarkPlanFavouriteWithHttpInfo(String projectKey, String buildKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = unmarkPlanFavouriteRequestBuilder(projectKey, buildKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("unmarkPlanFavourite", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder unmarkPlanFavouriteRequestBuilder(String projectKey, String buildKey) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
      throw new ApiException(400, "Missing the required parameter 'projectKey' when calling unmarkPlanFavourite");
    }
    // verify the required parameter 'buildKey' is set
    if (buildKey == null) {
      throw new ApiException(400, "Missing the required parameter 'buildKey' when calling unmarkPlanFavourite");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/plan/{projectKey}-{buildKey}/favourite"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{buildKey}", ApiClient.urlEncode(buildKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
