/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import me.glindholm.mylyn.bamboo.internal.rest.model.Plan;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * BuildDefinitionForBuild
 */
@JsonPropertyOrder({
  BuildDefinitionForBuild.JSON_PROPERTY_PLAN,
  BuildDefinitionForBuild.JSON_PROPERTY_MERGED,
  BuildDefinitionForBuild.JSON_PROPERTY_XML_DATA,
  BuildDefinitionForBuild.JSON_PROPERTY_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BuildDefinitionForBuild implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_PLAN = "plan";
  private Plan plan;

  public static final String JSON_PROPERTY_MERGED = "merged";
  private Boolean merged;

  public static final String JSON_PROPERTY_XML_DATA = "xmlData";
  private String xmlData;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public BuildDefinitionForBuild() { 
  }

  public BuildDefinitionForBuild plan(Plan plan) {
    this.plan = plan;
    return this;
  }

   /**
   * Get plan
   * @return plan
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Plan getPlan() {
    return plan;
  }


  @JsonProperty(JSON_PROPERTY_PLAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlan(Plan plan) {
    this.plan = plan;
  }


  public BuildDefinitionForBuild merged(Boolean merged) {
    this.merged = merged;
    return this;
  }

   /**
   * Get merged
   * @return merged
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MERGED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getMerged() {
    return merged;
  }


  @JsonProperty(JSON_PROPERTY_MERGED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMerged(Boolean merged) {
    this.merged = merged;
  }


  public BuildDefinitionForBuild xmlData(String xmlData) {
    this.xmlData = xmlData;
    return this;
  }

   /**
   * Get xmlData
   * @return xmlData
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_XML_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getXmlData() {
    return xmlData;
  }


  @JsonProperty(JSON_PROPERTY_XML_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setXmlData(String xmlData) {
    this.xmlData = xmlData;
  }


  public BuildDefinitionForBuild id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  /**
   * Return true if this BuildDefinitionForBuild object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildDefinitionForBuild buildDefinitionForBuild = (BuildDefinitionForBuild) o;
    return Objects.equals(this.plan, buildDefinitionForBuild.plan) &&
        Objects.equals(this.merged, buildDefinitionForBuild.merged) &&
        Objects.equals(this.xmlData, buildDefinitionForBuild.xmlData) &&
        Objects.equals(this.id, buildDefinitionForBuild.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(plan, merged, xmlData, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildDefinitionForBuild {\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    merged: ").append(toIndentedString(merged)).append("\n");
    sb.append("    xmlData: ").append(toIndentedString(xmlData)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

