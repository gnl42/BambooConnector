/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import me.glindholm.mylyn.bamboo.internal.rest.model.NotificationRecipient;
import me.glindholm.mylyn.bamboo.internal.rest.model.NotificationType;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * NotificationManager
 */
@JsonPropertyOrder({
  NotificationManager.JSON_PROPERTY_ALL_NOTIFICATION_TYPES,
  NotificationManager.JSON_PROPERTY_SYSTEM_NOTIFICATION_TYPES,
  NotificationManager.JSON_PROPERTY_DEPLOYMENT_NOTIFICATION_TYPES,
  NotificationManager.JSON_PROPERTY_PLAN_NOTIFICATION_TYPES,
  NotificationManager.JSON_PROPERTY_CHAIN_NOTIFICATION_TYPES,
  NotificationManager.JSON_PROPERTY_ALL_NOTIFICATION_RECIPIENTS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NotificationManager implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ALL_NOTIFICATION_TYPES = "allNotificationTypes";
  private List<NotificationType> allNotificationTypes;

  public static final String JSON_PROPERTY_SYSTEM_NOTIFICATION_TYPES = "systemNotificationTypes";
  private List<NotificationType> systemNotificationTypes;

  public static final String JSON_PROPERTY_DEPLOYMENT_NOTIFICATION_TYPES = "deploymentNotificationTypes";
  private List<NotificationType> deploymentNotificationTypes;

  public static final String JSON_PROPERTY_PLAN_NOTIFICATION_TYPES = "planNotificationTypes";
  private List<NotificationType> planNotificationTypes;

  public static final String JSON_PROPERTY_CHAIN_NOTIFICATION_TYPES = "chainNotificationTypes";
  private List<NotificationType> chainNotificationTypes;

  public static final String JSON_PROPERTY_ALL_NOTIFICATION_RECIPIENTS = "allNotificationRecipients";
  private List<NotificationRecipient> allNotificationRecipients;

  public NotificationManager() { 
  }

  public NotificationManager allNotificationTypes(List<NotificationType> allNotificationTypes) {
    this.allNotificationTypes = allNotificationTypes;
    return this;
  }

  public NotificationManager addAllNotificationTypesItem(NotificationType allNotificationTypesItem) {
    if (this.allNotificationTypes == null) {
      this.allNotificationTypes = new ArrayList<>();
    }
    this.allNotificationTypes.add(allNotificationTypesItem);
    return this;
  }

   /**
   * Get allNotificationTypes
   * @return allNotificationTypes
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ALL_NOTIFICATION_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<NotificationType> getAllNotificationTypes() {
    return allNotificationTypes;
  }


  @JsonProperty(JSON_PROPERTY_ALL_NOTIFICATION_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllNotificationTypes(List<NotificationType> allNotificationTypes) {
    this.allNotificationTypes = allNotificationTypes;
  }


  public NotificationManager systemNotificationTypes(List<NotificationType> systemNotificationTypes) {
    this.systemNotificationTypes = systemNotificationTypes;
    return this;
  }

  public NotificationManager addSystemNotificationTypesItem(NotificationType systemNotificationTypesItem) {
    if (this.systemNotificationTypes == null) {
      this.systemNotificationTypes = new ArrayList<>();
    }
    this.systemNotificationTypes.add(systemNotificationTypesItem);
    return this;
  }

   /**
   * Get systemNotificationTypes
   * @return systemNotificationTypes
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SYSTEM_NOTIFICATION_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<NotificationType> getSystemNotificationTypes() {
    return systemNotificationTypes;
  }


  @JsonProperty(JSON_PROPERTY_SYSTEM_NOTIFICATION_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSystemNotificationTypes(List<NotificationType> systemNotificationTypes) {
    this.systemNotificationTypes = systemNotificationTypes;
  }


  public NotificationManager deploymentNotificationTypes(List<NotificationType> deploymentNotificationTypes) {
    this.deploymentNotificationTypes = deploymentNotificationTypes;
    return this;
  }

  public NotificationManager addDeploymentNotificationTypesItem(NotificationType deploymentNotificationTypesItem) {
    if (this.deploymentNotificationTypes == null) {
      this.deploymentNotificationTypes = new ArrayList<>();
    }
    this.deploymentNotificationTypes.add(deploymentNotificationTypesItem);
    return this;
  }

   /**
   * Get deploymentNotificationTypes
   * @return deploymentNotificationTypes
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DEPLOYMENT_NOTIFICATION_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<NotificationType> getDeploymentNotificationTypes() {
    return deploymentNotificationTypes;
  }


  @JsonProperty(JSON_PROPERTY_DEPLOYMENT_NOTIFICATION_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeploymentNotificationTypes(List<NotificationType> deploymentNotificationTypes) {
    this.deploymentNotificationTypes = deploymentNotificationTypes;
  }


  public NotificationManager planNotificationTypes(List<NotificationType> planNotificationTypes) {
    this.planNotificationTypes = planNotificationTypes;
    return this;
  }

  public NotificationManager addPlanNotificationTypesItem(NotificationType planNotificationTypesItem) {
    if (this.planNotificationTypes == null) {
      this.planNotificationTypes = new ArrayList<>();
    }
    this.planNotificationTypes.add(planNotificationTypesItem);
    return this;
  }

   /**
   * Get planNotificationTypes
   * @return planNotificationTypes
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLAN_NOTIFICATION_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<NotificationType> getPlanNotificationTypes() {
    return planNotificationTypes;
  }


  @JsonProperty(JSON_PROPERTY_PLAN_NOTIFICATION_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlanNotificationTypes(List<NotificationType> planNotificationTypes) {
    this.planNotificationTypes = planNotificationTypes;
  }


  public NotificationManager chainNotificationTypes(List<NotificationType> chainNotificationTypes) {
    this.chainNotificationTypes = chainNotificationTypes;
    return this;
  }

  public NotificationManager addChainNotificationTypesItem(NotificationType chainNotificationTypesItem) {
    if (this.chainNotificationTypes == null) {
      this.chainNotificationTypes = new ArrayList<>();
    }
    this.chainNotificationTypes.add(chainNotificationTypesItem);
    return this;
  }

   /**
   * Get chainNotificationTypes
   * @return chainNotificationTypes
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CHAIN_NOTIFICATION_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<NotificationType> getChainNotificationTypes() {
    return chainNotificationTypes;
  }


  @JsonProperty(JSON_PROPERTY_CHAIN_NOTIFICATION_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChainNotificationTypes(List<NotificationType> chainNotificationTypes) {
    this.chainNotificationTypes = chainNotificationTypes;
  }


  public NotificationManager allNotificationRecipients(List<NotificationRecipient> allNotificationRecipients) {
    this.allNotificationRecipients = allNotificationRecipients;
    return this;
  }

  public NotificationManager addAllNotificationRecipientsItem(NotificationRecipient allNotificationRecipientsItem) {
    if (this.allNotificationRecipients == null) {
      this.allNotificationRecipients = new ArrayList<>();
    }
    this.allNotificationRecipients.add(allNotificationRecipientsItem);
    return this;
  }

   /**
   * Get allNotificationRecipients
   * @return allNotificationRecipients
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ALL_NOTIFICATION_RECIPIENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<NotificationRecipient> getAllNotificationRecipients() {
    return allNotificationRecipients;
  }


  @JsonProperty(JSON_PROPERTY_ALL_NOTIFICATION_RECIPIENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllNotificationRecipients(List<NotificationRecipient> allNotificationRecipients) {
    this.allNotificationRecipients = allNotificationRecipients;
  }


  /**
   * Return true if this NotificationManager object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationManager notificationManager = (NotificationManager) o;
    return Objects.equals(this.allNotificationTypes, notificationManager.allNotificationTypes) &&
        Objects.equals(this.systemNotificationTypes, notificationManager.systemNotificationTypes) &&
        Objects.equals(this.deploymentNotificationTypes, notificationManager.deploymentNotificationTypes) &&
        Objects.equals(this.planNotificationTypes, notificationManager.planNotificationTypes) &&
        Objects.equals(this.chainNotificationTypes, notificationManager.chainNotificationTypes) &&
        Objects.equals(this.allNotificationRecipients, notificationManager.allNotificationRecipients);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allNotificationTypes, systemNotificationTypes, deploymentNotificationTypes, planNotificationTypes, chainNotificationTypes, allNotificationRecipients);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationManager {\n");
    sb.append("    allNotificationTypes: ").append(toIndentedString(allNotificationTypes)).append("\n");
    sb.append("    systemNotificationTypes: ").append(toIndentedString(systemNotificationTypes)).append("\n");
    sb.append("    deploymentNotificationTypes: ").append(toIndentedString(deploymentNotificationTypes)).append("\n");
    sb.append("    planNotificationTypes: ").append(toIndentedString(planNotificationTypes)).append("\n");
    sb.append("    chainNotificationTypes: ").append(toIndentedString(chainNotificationTypes)).append("\n");
    sb.append("    allNotificationRecipients: ").append(toIndentedString(allNotificationRecipients)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

