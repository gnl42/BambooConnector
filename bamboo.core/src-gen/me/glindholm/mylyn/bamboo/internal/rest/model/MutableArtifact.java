/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import me.glindholm.mylyn.bamboo.internal.rest.model.PlanResultKey;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * MutableArtifact
 */
@JsonPropertyOrder({
  MutableArtifact.JSON_PROPERTY_GLOBALLY_STORED,
  MutableArtifact.JSON_PROPERTY_ARCHIVER_TYPE,
  MutableArtifact.JSON_PROPERTY_LINK_TYPE,
  MutableArtifact.JSON_PROPERTY_LABEL,
  MutableArtifact.JSON_PROPERTY_SHARED_ARTIFACT,
  MutableArtifact.JSON_PROPERTY_PLAN_RESULT_KEY,
  MutableArtifact.JSON_PROPERTY_SIZE,
  MutableArtifact.JSON_PROPERTY_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MutableArtifact implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_GLOBALLY_STORED = "globallyStored";
  private Boolean globallyStored;

  /**
   * Gets or Sets archiverType
   */
  public enum ArchiverTypeEnum {
    NONE("NONE"),
    
    ZIP("ZIP");

    private String value;

    ArchiverTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ArchiverTypeEnum fromValue(String value) {
      for (ArchiverTypeEnum b : ArchiverTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ARCHIVER_TYPE = "archiverType";
  private ArchiverTypeEnum archiverType;

  public static final String JSON_PROPERTY_LINK_TYPE = "linkType";
  private String linkType;

  public static final String JSON_PROPERTY_LABEL = "label";
  private String label;

  public static final String JSON_PROPERTY_SHARED_ARTIFACT = "sharedArtifact";
  private Boolean sharedArtifact;

  public static final String JSON_PROPERTY_PLAN_RESULT_KEY = "planResultKey";
  private PlanResultKey planResultKey;

  public static final String JSON_PROPERTY_SIZE = "size";
  private Long size;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public MutableArtifact() { 
  }

  public MutableArtifact globallyStored(Boolean globallyStored) {
    this.globallyStored = globallyStored;
    return this;
  }

   /**
   * Get globallyStored
   * @return globallyStored
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_GLOBALLY_STORED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getGloballyStored() {
    return globallyStored;
  }


  @JsonProperty(JSON_PROPERTY_GLOBALLY_STORED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGloballyStored(Boolean globallyStored) {
    this.globallyStored = globallyStored;
  }


  public MutableArtifact archiverType(ArchiverTypeEnum archiverType) {
    this.archiverType = archiverType;
    return this;
  }

   /**
   * Get archiverType
   * @return archiverType
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ARCHIVER_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ArchiverTypeEnum getArchiverType() {
    return archiverType;
  }


  @JsonProperty(JSON_PROPERTY_ARCHIVER_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArchiverType(ArchiverTypeEnum archiverType) {
    this.archiverType = archiverType;
  }


  public MutableArtifact linkType(String linkType) {
    this.linkType = linkType;
    return this;
  }

   /**
   * Get linkType
   * @return linkType
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_LINK_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLinkType() {
    return linkType;
  }


  @JsonProperty(JSON_PROPERTY_LINK_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLinkType(String linkType) {
    this.linkType = linkType;
  }


  public MutableArtifact label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLabel() {
    return label;
  }


  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabel(String label) {
    this.label = label;
  }


  public MutableArtifact sharedArtifact(Boolean sharedArtifact) {
    this.sharedArtifact = sharedArtifact;
    return this;
  }

   /**
   * Get sharedArtifact
   * @return sharedArtifact
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SHARED_ARTIFACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSharedArtifact() {
    return sharedArtifact;
  }


  @JsonProperty(JSON_PROPERTY_SHARED_ARTIFACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSharedArtifact(Boolean sharedArtifact) {
    this.sharedArtifact = sharedArtifact;
  }


  public MutableArtifact planResultKey(PlanResultKey planResultKey) {
    this.planResultKey = planResultKey;
    return this;
  }

   /**
   * Get planResultKey
   * @return planResultKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLAN_RESULT_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PlanResultKey getPlanResultKey() {
    return planResultKey;
  }


  @JsonProperty(JSON_PROPERTY_PLAN_RESULT_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlanResultKey(PlanResultKey planResultKey) {
    this.planResultKey = planResultKey;
  }


  public MutableArtifact size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getSize() {
    return size;
  }


  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSize(Long size) {
    this.size = size;
  }


  public MutableArtifact id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  /**
   * Return true if this MutableArtifact object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MutableArtifact mutableArtifact = (MutableArtifact) o;
    return Objects.equals(this.globallyStored, mutableArtifact.globallyStored) &&
        Objects.equals(this.archiverType, mutableArtifact.archiverType) &&
        Objects.equals(this.linkType, mutableArtifact.linkType) &&
        Objects.equals(this.label, mutableArtifact.label) &&
        Objects.equals(this.sharedArtifact, mutableArtifact.sharedArtifact) &&
        Objects.equals(this.planResultKey, mutableArtifact.planResultKey) &&
        Objects.equals(this.size, mutableArtifact.size) &&
        Objects.equals(this.id, mutableArtifact.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(globallyStored, archiverType, linkType, label, sharedArtifact, planResultKey, size, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MutableArtifact {\n");
    sb.append("    globallyStored: ").append(toIndentedString(globallyStored)).append("\n");
    sb.append("    archiverType: ").append(toIndentedString(archiverType)).append("\n");
    sb.append("    linkType: ").append(toIndentedString(linkType)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    sharedArtifact: ").append(toIndentedString(sharedArtifact)).append("\n");
    sb.append("    planResultKey: ").append(toIndentedString(planResultKey)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

