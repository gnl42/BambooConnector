/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.rest.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import me.glindholm.mylyn.bamboo.internal.rest.model.TestCaseResult;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * FilteredTestResultsTestClassResultDescriptor
 */
@JsonPropertyOrder({
  FilteredTestResultsTestClassResultDescriptor.JSON_PROPERTY_EXISTING_FAILED_TESTS,
  FilteredTestResultsTestClassResultDescriptor.JSON_PROPERTY_FIXED_TESTS,
  FilteredTestResultsTestClassResultDescriptor.JSON_PROPERTY_ALL_FAILED_TESTS,
  FilteredTestResultsTestClassResultDescriptor.JSON_PROPERTY_QUARANTINED_TESTS,
  FilteredTestResultsTestClassResultDescriptor.JSON_PROPERTY_SKIPPED_TESTS,
  FilteredTestResultsTestClassResultDescriptor.JSON_PROPERTY_ALL_FAILED_TEST_LIST,
  FilteredTestResultsTestClassResultDescriptor.JSON_PROPERTY_SKIPPED_TEST_LIST,
  FilteredTestResultsTestClassResultDescriptor.JSON_PROPERTY_NEW_FAILED_TESTS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FilteredTestResultsTestClassResultDescriptor implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_EXISTING_FAILED_TESTS = "existingFailedTests";
  private JsonNullable<Object> existingFailedTests = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_FIXED_TESTS = "fixedTests";
  private JsonNullable<Object> fixedTests = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_ALL_FAILED_TESTS = "allFailedTests";
  private JsonNullable<Object> allFailedTests = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_QUARANTINED_TESTS = "quarantinedTests";
  private JsonNullable<Object> quarantinedTests = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_SKIPPED_TESTS = "skippedTests";
  private JsonNullable<Object> skippedTests = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_ALL_FAILED_TEST_LIST = "allFailedTestList";
  private List<TestCaseResult> allFailedTestList;

  public static final String JSON_PROPERTY_SKIPPED_TEST_LIST = "skippedTestList";
  private List<TestCaseResult> skippedTestList;

  public static final String JSON_PROPERTY_NEW_FAILED_TESTS = "newFailedTests";
  private JsonNullable<Object> newFailedTests = JsonNullable.<Object>of(null);

  public FilteredTestResultsTestClassResultDescriptor() { 
  }

  public FilteredTestResultsTestClassResultDescriptor existingFailedTests(Object existingFailedTests) {
    this.existingFailedTests = JsonNullable.<Object>of(existingFailedTests);
    return this;
  }

   /**
   * Get existingFailedTests
   * @return existingFailedTests
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonIgnore

  public Object getExistingFailedTests() {
        return existingFailedTests.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXISTING_FAILED_TESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getExistingFailedTests_JsonNullable() {
    return existingFailedTests;
  }
  
  @JsonProperty(JSON_PROPERTY_EXISTING_FAILED_TESTS)
  public void setExistingFailedTests_JsonNullable(JsonNullable<Object> existingFailedTests) {
    this.existingFailedTests = existingFailedTests;
  }

  public void setExistingFailedTests(Object existingFailedTests) {
    this.existingFailedTests = JsonNullable.<Object>of(existingFailedTests);
  }


  public FilteredTestResultsTestClassResultDescriptor fixedTests(Object fixedTests) {
    this.fixedTests = JsonNullable.<Object>of(fixedTests);
    return this;
  }

   /**
   * Get fixedTests
   * @return fixedTests
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonIgnore

  public Object getFixedTests() {
        return fixedTests.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FIXED_TESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getFixedTests_JsonNullable() {
    return fixedTests;
  }
  
  @JsonProperty(JSON_PROPERTY_FIXED_TESTS)
  public void setFixedTests_JsonNullable(JsonNullable<Object> fixedTests) {
    this.fixedTests = fixedTests;
  }

  public void setFixedTests(Object fixedTests) {
    this.fixedTests = JsonNullable.<Object>of(fixedTests);
  }


  public FilteredTestResultsTestClassResultDescriptor allFailedTests(Object allFailedTests) {
    this.allFailedTests = JsonNullable.<Object>of(allFailedTests);
    return this;
  }

   /**
   * Get allFailedTests
   * @return allFailedTests
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonIgnore

  public Object getAllFailedTests() {
        return allFailedTests.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ALL_FAILED_TESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getAllFailedTests_JsonNullable() {
    return allFailedTests;
  }
  
  @JsonProperty(JSON_PROPERTY_ALL_FAILED_TESTS)
  public void setAllFailedTests_JsonNullable(JsonNullable<Object> allFailedTests) {
    this.allFailedTests = allFailedTests;
  }

  public void setAllFailedTests(Object allFailedTests) {
    this.allFailedTests = JsonNullable.<Object>of(allFailedTests);
  }


  public FilteredTestResultsTestClassResultDescriptor quarantinedTests(Object quarantinedTests) {
    this.quarantinedTests = JsonNullable.<Object>of(quarantinedTests);
    return this;
  }

   /**
   * Get quarantinedTests
   * @return quarantinedTests
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonIgnore

  public Object getQuarantinedTests() {
        return quarantinedTests.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_QUARANTINED_TESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getQuarantinedTests_JsonNullable() {
    return quarantinedTests;
  }
  
  @JsonProperty(JSON_PROPERTY_QUARANTINED_TESTS)
  public void setQuarantinedTests_JsonNullable(JsonNullable<Object> quarantinedTests) {
    this.quarantinedTests = quarantinedTests;
  }

  public void setQuarantinedTests(Object quarantinedTests) {
    this.quarantinedTests = JsonNullable.<Object>of(quarantinedTests);
  }


  public FilteredTestResultsTestClassResultDescriptor skippedTests(Object skippedTests) {
    this.skippedTests = JsonNullable.<Object>of(skippedTests);
    return this;
  }

   /**
   * Get skippedTests
   * @return skippedTests
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonIgnore

  public Object getSkippedTests() {
        return skippedTests.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SKIPPED_TESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getSkippedTests_JsonNullable() {
    return skippedTests;
  }
  
  @JsonProperty(JSON_PROPERTY_SKIPPED_TESTS)
  public void setSkippedTests_JsonNullable(JsonNullable<Object> skippedTests) {
    this.skippedTests = skippedTests;
  }

  public void setSkippedTests(Object skippedTests) {
    this.skippedTests = JsonNullable.<Object>of(skippedTests);
  }


  public FilteredTestResultsTestClassResultDescriptor allFailedTestList(List<TestCaseResult> allFailedTestList) {
    this.allFailedTestList = allFailedTestList;
    return this;
  }

  public FilteredTestResultsTestClassResultDescriptor addAllFailedTestListItem(TestCaseResult allFailedTestListItem) {
    if (this.allFailedTestList == null) {
      this.allFailedTestList = new ArrayList<>();
    }
    this.allFailedTestList.add(allFailedTestListItem);
    return this;
  }

   /**
   * Get allFailedTestList
   * @return allFailedTestList
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ALL_FAILED_TEST_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<TestCaseResult> getAllFailedTestList() {
    return allFailedTestList;
  }


  @JsonProperty(JSON_PROPERTY_ALL_FAILED_TEST_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllFailedTestList(List<TestCaseResult> allFailedTestList) {
    this.allFailedTestList = allFailedTestList;
  }


  public FilteredTestResultsTestClassResultDescriptor skippedTestList(List<TestCaseResult> skippedTestList) {
    this.skippedTestList = skippedTestList;
    return this;
  }

  public FilteredTestResultsTestClassResultDescriptor addSkippedTestListItem(TestCaseResult skippedTestListItem) {
    if (this.skippedTestList == null) {
      this.skippedTestList = new ArrayList<>();
    }
    this.skippedTestList.add(skippedTestListItem);
    return this;
  }

   /**
   * Get skippedTestList
   * @return skippedTestList
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SKIPPED_TEST_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<TestCaseResult> getSkippedTestList() {
    return skippedTestList;
  }


  @JsonProperty(JSON_PROPERTY_SKIPPED_TEST_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSkippedTestList(List<TestCaseResult> skippedTestList) {
    this.skippedTestList = skippedTestList;
  }


  public FilteredTestResultsTestClassResultDescriptor newFailedTests(Object newFailedTests) {
    this.newFailedTests = JsonNullable.<Object>of(newFailedTests);
    return this;
  }

   /**
   * Get newFailedTests
   * @return newFailedTests
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonIgnore

  public Object getNewFailedTests() {
        return newFailedTests.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NEW_FAILED_TESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getNewFailedTests_JsonNullable() {
    return newFailedTests;
  }
  
  @JsonProperty(JSON_PROPERTY_NEW_FAILED_TESTS)
  public void setNewFailedTests_JsonNullable(JsonNullable<Object> newFailedTests) {
    this.newFailedTests = newFailedTests;
  }

  public void setNewFailedTests(Object newFailedTests) {
    this.newFailedTests = JsonNullable.<Object>of(newFailedTests);
  }


  /**
   * Return true if this FilteredTestResultsTestClassResultDescriptor object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilteredTestResultsTestClassResultDescriptor filteredTestResultsTestClassResultDescriptor = (FilteredTestResultsTestClassResultDescriptor) o;
    return equalsNullable(this.existingFailedTests, filteredTestResultsTestClassResultDescriptor.existingFailedTests) &&
        equalsNullable(this.fixedTests, filteredTestResultsTestClassResultDescriptor.fixedTests) &&
        equalsNullable(this.allFailedTests, filteredTestResultsTestClassResultDescriptor.allFailedTests) &&
        equalsNullable(this.quarantinedTests, filteredTestResultsTestClassResultDescriptor.quarantinedTests) &&
        equalsNullable(this.skippedTests, filteredTestResultsTestClassResultDescriptor.skippedTests) &&
        Objects.equals(this.allFailedTestList, filteredTestResultsTestClassResultDescriptor.allFailedTestList) &&
        Objects.equals(this.skippedTestList, filteredTestResultsTestClassResultDescriptor.skippedTestList) &&
        equalsNullable(this.newFailedTests, filteredTestResultsTestClassResultDescriptor.newFailedTests);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(existingFailedTests), hashCodeNullable(fixedTests), hashCodeNullable(allFailedTests), hashCodeNullable(quarantinedTests), hashCodeNullable(skippedTests), allFailedTestList, skippedTestList, hashCodeNullable(newFailedTests));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilteredTestResultsTestClassResultDescriptor {\n");
    sb.append("    existingFailedTests: ").append(toIndentedString(existingFailedTests)).append("\n");
    sb.append("    fixedTests: ").append(toIndentedString(fixedTests)).append("\n");
    sb.append("    allFailedTests: ").append(toIndentedString(allFailedTests)).append("\n");
    sb.append("    quarantinedTests: ").append(toIndentedString(quarantinedTests)).append("\n");
    sb.append("    skippedTests: ").append(toIndentedString(skippedTests)).append("\n");
    sb.append("    allFailedTestList: ").append(toIndentedString(allFailedTestList)).append("\n");
    sb.append("    skippedTestList: ").append(toIndentedString(skippedTestList)).append("\n");
    sb.append("    newFailedTests: ").append(toIndentedString(newFailedTests)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

