/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.bamboo.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.BambooEntityOid;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * RepositoryDataEntity
 */
@JsonPropertyOrder({
  RepositoryDataEntity.JSON_PROPERTY_ENTITY_TYPE,
  RepositoryDataEntity.JSON_PROPERTY_PROJECT_ID,
  RepositoryDataEntity.JSON_PROPERTY_PLUGIN_KEY,
  RepositoryDataEntity.JSON_PROPERTY_GLOBAL,
  RepositoryDataEntity.JSON_PROPERTY_XML_DATA,
  RepositoryDataEntity.JSON_PROPERTY_PARENT,
  RepositoryDataEntity.JSON_PROPERTY_DESCRIPTION,
  RepositoryDataEntity.JSON_PROPERTY_NAME,
  RepositoryDataEntity.JSON_PROPERTY_ID,
  RepositoryDataEntity.JSON_PROPERTY_OID,
  RepositoryDataEntity.JSON_PROPERTY_MARKED_FOR_DELETION
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-08T20:39:31.812169500-07:00[America/Vancouver]")
public class RepositoryDataEntity implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Gets or Sets entityType
   */
  public enum EntityTypeEnum {
    CHAIN("CHAIN"),
    
    STAGE("STAGE"),
    
    JOB("JOB"),
    
    REPOSITORY("REPOSITORY"),
    
    CHAIN_BRANCH("CHAIN_BRANCH"),
    
    JOB_BRANCH("JOB_BRANCH"),
    
    TASK("TASK"),
    
    PROJECT("PROJECT"),
    
    ARTIFACT_DEFINITION("ARTIFACT_DEFINITION"),
    
    DEPLOYMENT_PROJECT("DEPLOYMENT_PROJECT"),
    
    SHARED_CREDENTIAL("SHARED_CREDENTIAL");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ENTITY_TYPE = "entityType";
  private EntityTypeEnum entityType;

  public static final String JSON_PROPERTY_PROJECT_ID = "projectId";
  private Long projectId;

  public static final String JSON_PROPERTY_PLUGIN_KEY = "pluginKey";
  private String pluginKey;

  public static final String JSON_PROPERTY_GLOBAL = "global";
  private Boolean global;

  public static final String JSON_PROPERTY_XML_DATA = "xmlData";
  private String xmlData;

  public static final String JSON_PROPERTY_PARENT = "parent";
  private RepositoryDataEntity parent;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_OID = "oid";
  private BambooEntityOid oid;

  public static final String JSON_PROPERTY_MARKED_FOR_DELETION = "markedForDeletion";
  private Boolean markedForDeletion;

  public RepositoryDataEntity() { 
  }

  public RepositoryDataEntity entityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * Get entityType
   * @return entityType
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EntityTypeEnum getEntityType() {
    return entityType;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
  }


  public RepositoryDataEntity projectId(Long projectId) {
    this.projectId = projectId;
    return this;
  }

   /**
   * Get projectId
   * @return projectId
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PROJECT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getProjectId() {
    return projectId;
  }


  @JsonProperty(JSON_PROPERTY_PROJECT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProjectId(Long projectId) {
    this.projectId = projectId;
  }


  public RepositoryDataEntity pluginKey(String pluginKey) {
    this.pluginKey = pluginKey;
    return this;
  }

   /**
   * Get pluginKey
   * @return pluginKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLUGIN_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPluginKey() {
    return pluginKey;
  }


  @JsonProperty(JSON_PROPERTY_PLUGIN_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPluginKey(String pluginKey) {
    this.pluginKey = pluginKey;
  }


  public RepositoryDataEntity global(Boolean global) {
    this.global = global;
    return this;
  }

   /**
   * Get global
   * @return global
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_GLOBAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getGlobal() {
    return global;
  }


  @JsonProperty(JSON_PROPERTY_GLOBAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGlobal(Boolean global) {
    this.global = global;
  }


  public RepositoryDataEntity xmlData(String xmlData) {
    this.xmlData = xmlData;
    return this;
  }

   /**
   * Get xmlData
   * @return xmlData
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_XML_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getXmlData() {
    return xmlData;
  }


  @JsonProperty(JSON_PROPERTY_XML_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setXmlData(String xmlData) {
    this.xmlData = xmlData;
  }


  public RepositoryDataEntity parent(RepositoryDataEntity parent) {
    this.parent = parent;
    return this;
  }

   /**
   * Get parent
   * @return parent
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PARENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RepositoryDataEntity getParent() {
    return parent;
  }


  @JsonProperty(JSON_PROPERTY_PARENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParent(RepositoryDataEntity parent) {
    this.parent = parent;
  }


  public RepositoryDataEntity description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public RepositoryDataEntity name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public RepositoryDataEntity id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  public RepositoryDataEntity oid(BambooEntityOid oid) {
    this.oid = oid;
    return this;
  }

   /**
   * Get oid
   * @return oid
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_OID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BambooEntityOid getOid() {
    return oid;
  }


  @JsonProperty(JSON_PROPERTY_OID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOid(BambooEntityOid oid) {
    this.oid = oid;
  }


  public RepositoryDataEntity markedForDeletion(Boolean markedForDeletion) {
    this.markedForDeletion = markedForDeletion;
    return this;
  }

   /**
   * Get markedForDeletion
   * @return markedForDeletion
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MARKED_FOR_DELETION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getMarkedForDeletion() {
    return markedForDeletion;
  }


  @JsonProperty(JSON_PROPERTY_MARKED_FOR_DELETION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMarkedForDeletion(Boolean markedForDeletion) {
    this.markedForDeletion = markedForDeletion;
  }


  /**
   * Return true if this RepositoryDataEntity object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepositoryDataEntity repositoryDataEntity = (RepositoryDataEntity) o;
    return Objects.equals(this.entityType, repositoryDataEntity.entityType) &&
        Objects.equals(this.projectId, repositoryDataEntity.projectId) &&
        Objects.equals(this.pluginKey, repositoryDataEntity.pluginKey) &&
        Objects.equals(this.global, repositoryDataEntity.global) &&
        Objects.equals(this.xmlData, repositoryDataEntity.xmlData) &&
        Objects.equals(this.parent, repositoryDataEntity.parent) &&
        Objects.equals(this.description, repositoryDataEntity.description) &&
        Objects.equals(this.name, repositoryDataEntity.name) &&
        Objects.equals(this.id, repositoryDataEntity.id) &&
        Objects.equals(this.oid, repositoryDataEntity.oid) &&
        Objects.equals(this.markedForDeletion, repositoryDataEntity.markedForDeletion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityType, projectId, pluginKey, global, xmlData, parent, description, name, id, oid, markedForDeletion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepositoryDataEntity {\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    pluginKey: ").append(toIndentedString(pluginKey)).append("\n");
    sb.append("    global: ").append(toIndentedString(global)).append("\n");
    sb.append("    xmlData: ").append(toIndentedString(xmlData)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    oid: ").append(toIndentedString(oid)).append("\n");
    sb.append("    markedForDeletion: ").append(toIndentedString(markedForDeletion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

