/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package me.glindholm.mylyn.bamboo.internal.bamboo.api;

import me.glindholm.mylyn.bamboo.internal.bamboo.invoker.ApiClient;
import me.glindholm.mylyn.bamboo.internal.bamboo.invoker.ApiException;
import me.glindholm.mylyn.bamboo.internal.bamboo.invoker.ApiResponse;
import me.glindholm.mylyn.bamboo.internal.bamboo.invoker.Pair;

import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestErrorCollection;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestQueuedDeployment;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestQueuedDeployments;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.VersionPreview;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-08T20:39:31.812169500-07:00[America/Vancouver]")
public class DeploymentApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public DeploymentApi() {
    this(new ApiClient());
  }

  public DeploymentApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * Provide list of deployment results scheduled for execution and waiting in queue.
   * @param expand expands deployment result queue items on request. Possible value: queuedDeployments (optional)
   * @return RestQueuedDeployments
   * @throws ApiException if fails to make API call
   */
  public RestQueuedDeployments getBuildQueueDeployment(String expand) throws ApiException {
    ApiResponse<RestQueuedDeployments> localVarResponse = getBuildQueueDeploymentWithHttpInfo(expand);
    return localVarResponse.getData();
  }

  /**
   * 
   * Provide list of deployment results scheduled for execution and waiting in queue.
   * @param expand expands deployment result queue items on request. Possible value: queuedDeployments (optional)
   * @return ApiResponse&lt;RestQueuedDeployments&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestQueuedDeployments> getBuildQueueDeploymentWithHttpInfo(String expand) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getBuildQueueDeploymentRequestBuilder(expand);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getBuildQueueDeployment", localVarResponse);
        }
        return new ApiResponse<RestQueuedDeployments>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestQueuedDeployments>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getBuildQueueDeploymentRequestBuilder(String expand) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/queue/deployment";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "expand";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("expand", expand));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get possible deployment results.
   * @param planKey Plan key (required)
   * @param deploymentProjectId Deployment project id (optional)
   * @throws ApiException if fails to make API call
   */
  public void getPossibleResults(String planKey, String deploymentProjectId) throws ApiException {
    getPossibleResultsWithHttpInfo(planKey, deploymentProjectId);
  }

  /**
   * 
   * Get possible deployment results.
   * @param planKey Plan key (required)
   * @param deploymentProjectId Deployment project id (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> getPossibleResultsWithHttpInfo(String planKey, String deploymentProjectId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPossibleResultsRequestBuilder(planKey, deploymentProjectId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPossibleResults", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPossibleResultsRequestBuilder(String planKey, String deploymentProjectId) throws ApiException {
    // verify the required parameter 'planKey' is set
    if (planKey == null) {
      throw new ApiException(400, "Missing the required parameter 'planKey' when calling getPossibleResults");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/preview/possibleResults";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "deploymentProjectId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("deploymentProjectId", deploymentProjectId));
    localVarQueryParameterBaseName = "planKey";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("planKey", planKey));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get version name.
   * @param deploymentProjectId Deployment project id (required)
   * @param resultKey Result key (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object getVersionName(Long deploymentProjectId, String resultKey) throws ApiException {
    ApiResponse<Object> localVarResponse = getVersionNameWithHttpInfo(deploymentProjectId, resultKey);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get version name.
   * @param deploymentProjectId Deployment project id (required)
   * @param resultKey Result key (optional)
   * @return ApiResponse&lt;Object&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Object> getVersionNameWithHttpInfo(Long deploymentProjectId, String resultKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getVersionNameRequestBuilder(deploymentProjectId, resultKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getVersionName", localVarResponse);
        }
        return new ApiResponse<Object>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Object>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getVersionNameRequestBuilder(Long deploymentProjectId, String resultKey) throws ApiException {
    // verify the required parameter 'deploymentProjectId' is set
    if (deploymentProjectId == null) {
      throw new ApiException(400, "Missing the required parameter 'deploymentProjectId' when calling getVersionName");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/preview/versionName";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "resultKey";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("resultKey", resultKey));
    localVarQueryParameterBaseName = "deploymentProjectId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("deploymentProjectId", deploymentProjectId));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get a preview of the deployment version.
   * @param previousVersionId Previous version id (optional)
   * @param deploymentProjectId Deployment project id (optional)
   * @param planKey Plan key (optional)
   * @param resultKey Result key (optional)
   * @param buildNumber Build number (optional)
   * @return VersionPreview
   * @throws ApiException if fails to make API call
   */
  public VersionPreview getVersionPreview(String previousVersionId, String deploymentProjectId, String planKey, String resultKey, String buildNumber) throws ApiException {
    ApiResponse<VersionPreview> localVarResponse = getVersionPreviewWithHttpInfo(previousVersionId, deploymentProjectId, planKey, resultKey, buildNumber);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get a preview of the deployment version.
   * @param previousVersionId Previous version id (optional)
   * @param deploymentProjectId Deployment project id (optional)
   * @param planKey Plan key (optional)
   * @param resultKey Result key (optional)
   * @param buildNumber Build number (optional)
   * @return ApiResponse&lt;VersionPreview&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VersionPreview> getVersionPreviewWithHttpInfo(String previousVersionId, String deploymentProjectId, String planKey, String resultKey, String buildNumber) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getVersionPreviewRequestBuilder(previousVersionId, deploymentProjectId, planKey, resultKey, buildNumber);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getVersionPreview", localVarResponse);
        }
        return new ApiResponse<VersionPreview>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VersionPreview>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getVersionPreviewRequestBuilder(String previousVersionId, String deploymentProjectId, String planKey, String resultKey, String buildNumber) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/preview/result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "previousVersionId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("previousVersionId", previousVersionId));
    localVarQueryParameterBaseName = "deploymentProjectId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("deploymentProjectId", deploymentProjectId));
    localVarQueryParameterBaseName = "planKey";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("planKey", planKey));
    localVarQueryParameterBaseName = "resultKey";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("resultKey", resultKey));
    localVarQueryParameterBaseName = "buildNumber";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("buildNumber", buildNumber));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get a preview of the deployment version.
   * @param previousVersionId Previous version id (optional)
   * @param versionId Deployment version id (optional)
   * @param deploymentProjectId Deployment project id (optional)
   * @param versionName Deployment version name (optional)
   * @return VersionPreview
   * @throws ApiException if fails to make API call
   */
  public VersionPreview getVersionPreview1(String previousVersionId, String versionId, String deploymentProjectId, String versionName) throws ApiException {
    ApiResponse<VersionPreview> localVarResponse = getVersionPreview1WithHttpInfo(previousVersionId, versionId, deploymentProjectId, versionName);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get a preview of the deployment version.
   * @param previousVersionId Previous version id (optional)
   * @param versionId Deployment version id (optional)
   * @param deploymentProjectId Deployment project id (optional)
   * @param versionName Deployment version name (optional)
   * @return ApiResponse&lt;VersionPreview&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VersionPreview> getVersionPreview1WithHttpInfo(String previousVersionId, String versionId, String deploymentProjectId, String versionName) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getVersionPreview1RequestBuilder(previousVersionId, versionId, deploymentProjectId, versionName);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getVersionPreview1", localVarResponse);
        }
        return new ApiResponse<VersionPreview>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VersionPreview>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getVersionPreview1RequestBuilder(String previousVersionId, String versionId, String deploymentProjectId, String versionName) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/preview/version";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "previousVersionId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("previousVersionId", previousVersionId));
    localVarQueryParameterBaseName = "versionId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("versionId", versionId));
    localVarQueryParameterBaseName = "deploymentProjectId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("deploymentProjectId", deploymentProjectId));
    localVarQueryParameterBaseName = "versionName";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("versionName", versionName));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Remove deployment result from queue.
   * @param deploymentResultId id of deployment result in queue (required)
   * @throws ApiException if fails to make API call
   */
  public void removeDeploymentFromQueue(Long deploymentResultId) throws ApiException {
    removeDeploymentFromQueueWithHttpInfo(deploymentResultId);
  }

  /**
   * 
   * Remove deployment result from queue.
   * @param deploymentResultId id of deployment result in queue (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removeDeploymentFromQueueWithHttpInfo(Long deploymentResultId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeDeploymentFromQueueRequestBuilder(deploymentResultId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removeDeploymentFromQueue", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeDeploymentFromQueueRequestBuilder(Long deploymentResultId) throws ApiException {
    // verify the required parameter 'deploymentResultId' is set
    if (deploymentResultId == null) {
      throw new ApiException(400, "Missing the required parameter 'deploymentResultId' when calling removeDeploymentFromQueue");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/queue/deployment/{deploymentResultId}"
        .replace("{deploymentResultId}", ApiClient.urlEncode(deploymentResultId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Trigger deployment for deployment environment and version.
   * @param versionId Version (release) id (required)
   * @param environmentId Deployment environment id (required)
   * @param verboseLogging Runs deployments with verbose logs (optional)
   * @return RestQueuedDeployment
   * @throws ApiException if fails to make API call
   */
  public RestQueuedDeployment startDeployment(String versionId, String environmentId, String verboseLogging) throws ApiException {
    ApiResponse<RestQueuedDeployment> localVarResponse = startDeploymentWithHttpInfo(versionId, environmentId, verboseLogging);
    return localVarResponse.getData();
  }

  /**
   * 
   * Trigger deployment for deployment environment and version.
   * @param versionId Version (release) id (required)
   * @param environmentId Deployment environment id (required)
   * @param verboseLogging Runs deployments with verbose logs (optional)
   * @return ApiResponse&lt;RestQueuedDeployment&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestQueuedDeployment> startDeploymentWithHttpInfo(String versionId, String environmentId, String verboseLogging) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = startDeploymentRequestBuilder(versionId, environmentId, verboseLogging);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("startDeployment", localVarResponse);
        }
        return new ApiResponse<RestQueuedDeployment>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestQueuedDeployment>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder startDeploymentRequestBuilder(String versionId, String environmentId, String verboseLogging) throws ApiException {
    // verify the required parameter 'versionId' is set
    if (versionId == null) {
      throw new ApiException(400, "Missing the required parameter 'versionId' when calling startDeployment");
    }
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling startDeployment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/queue/deployment";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "versionId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("versionId", versionId));
    localVarQueryParameterBaseName = "environmentId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("environmentId", environmentId));
    localVarQueryParameterBaseName = "verboseLogging";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("verboseLogging", verboseLogging));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
