/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.bamboo.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * MergeResultSummary
 */
@JsonPropertyOrder({
  MergeResultSummary.JSON_PROPERTY_BRANCH_TARGET_VCS_KEY,
  MergeResultSummary.JSON_PROPERTY_FAILURE_REASON,
  MergeResultSummary.JSON_PROPERTY_INTEGRATION_REPOSITORY_ID,
  MergeResultSummary.JSON_PROPERTY_INTEGRATION_REPOSITORY_BRANCH_NAME,
  MergeResultSummary.JSON_PROPERTY_INTEGRATION_BRANCH_VCS_KEY,
  MergeResultSummary.JSON_PROPERTY_MERGE_RESULT_VCS_KEY,
  MergeResultSummary.JSON_PROPERTY_EMPTY_MERGE,
  MergeResultSummary.JSON_PROPERTY_MERGE_STATE,
  MergeResultSummary.JSON_PROPERTY_PUSH_STATE,
  MergeResultSummary.JSON_PROPERTY_INTEGRATION_STRATEGY,
  MergeResultSummary.JSON_PROPERTY_BRANCH_NAME,
  MergeResultSummary.JSON_PROPERTY_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-08T20:39:31.812169500-07:00[America/Vancouver]")
public class MergeResultSummary implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_BRANCH_TARGET_VCS_KEY = "branchTargetVcsKey";
  private String branchTargetVcsKey;

  public static final String JSON_PROPERTY_FAILURE_REASON = "failureReason";
  private String failureReason;

  public static final String JSON_PROPERTY_INTEGRATION_REPOSITORY_ID = "integrationRepositoryId";
  private Long integrationRepositoryId;

  public static final String JSON_PROPERTY_INTEGRATION_REPOSITORY_BRANCH_NAME = "integrationRepositoryBranchName";
  private String integrationRepositoryBranchName;

  public static final String JSON_PROPERTY_INTEGRATION_BRANCH_VCS_KEY = "integrationBranchVcsKey";
  private String integrationBranchVcsKey;

  public static final String JSON_PROPERTY_MERGE_RESULT_VCS_KEY = "mergeResultVcsKey";
  private String mergeResultVcsKey;

  public static final String JSON_PROPERTY_EMPTY_MERGE = "emptyMerge";
  private Boolean emptyMerge;

  /**
   * Gets or Sets mergeState
   */
  public enum MergeStateEnum {
    NOT_ATTEMPTED("NOT_ATTEMPTED"),
    
    TO_BE_ATTEMPTED("TO_BE_ATTEMPTED"),
    
    IN_PROGRESS("IN_PROGRESS"),
    
    SUCCESS("SUCCESS"),
    
    FAILED("FAILED"),
    
    NOT_REQUIRED("NOT_REQUIRED");

    private String value;

    MergeStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MergeStateEnum fromValue(String value) {
      for (MergeStateEnum b : MergeStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_MERGE_STATE = "mergeState";
  private MergeStateEnum mergeState;

  /**
   * Gets or Sets pushState
   */
  public enum PushStateEnum {
    NOT_ATTEMPTED("NOT_ATTEMPTED"),
    
    TO_BE_ATTEMPTED("TO_BE_ATTEMPTED"),
    
    IN_PROGRESS("IN_PROGRESS"),
    
    SUCCESS("SUCCESS"),
    
    FAILED("FAILED"),
    
    NOT_REQUIRED("NOT_REQUIRED");

    private String value;

    PushStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PushStateEnum fromValue(String value) {
      for (PushStateEnum b : PushStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PUSH_STATE = "pushState";
  private PushStateEnum pushState;

  /**
   * Gets or Sets integrationStrategy
   */
  public enum IntegrationStrategyEnum {
    BRANCH_UPDATER("BRANCH_UPDATER"),
    
    GATE_KEEPER("GATE_KEEPER");

    private String value;

    IntegrationStrategyEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IntegrationStrategyEnum fromValue(String value) {
      for (IntegrationStrategyEnum b : IntegrationStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INTEGRATION_STRATEGY = "integrationStrategy";
  private IntegrationStrategyEnum integrationStrategy;

  public static final String JSON_PROPERTY_BRANCH_NAME = "branchName";
  private String branchName;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public MergeResultSummary() { 
  }

  public MergeResultSummary branchTargetVcsKey(String branchTargetVcsKey) {
    this.branchTargetVcsKey = branchTargetVcsKey;
    return this;
  }

   /**
   * Get branchTargetVcsKey
   * @return branchTargetVcsKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BRANCH_TARGET_VCS_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBranchTargetVcsKey() {
    return branchTargetVcsKey;
  }


  @JsonProperty(JSON_PROPERTY_BRANCH_TARGET_VCS_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBranchTargetVcsKey(String branchTargetVcsKey) {
    this.branchTargetVcsKey = branchTargetVcsKey;
  }


  public MergeResultSummary failureReason(String failureReason) {
    this.failureReason = failureReason;
    return this;
  }

   /**
   * Get failureReason
   * @return failureReason
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_FAILURE_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFailureReason() {
    return failureReason;
  }


  @JsonProperty(JSON_PROPERTY_FAILURE_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFailureReason(String failureReason) {
    this.failureReason = failureReason;
  }


  public MergeResultSummary integrationRepositoryId(Long integrationRepositoryId) {
    this.integrationRepositoryId = integrationRepositoryId;
    return this;
  }

   /**
   * Get integrationRepositoryId
   * @return integrationRepositoryId
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_INTEGRATION_REPOSITORY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getIntegrationRepositoryId() {
    return integrationRepositoryId;
  }


  @JsonProperty(JSON_PROPERTY_INTEGRATION_REPOSITORY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIntegrationRepositoryId(Long integrationRepositoryId) {
    this.integrationRepositoryId = integrationRepositoryId;
  }


  public MergeResultSummary integrationRepositoryBranchName(String integrationRepositoryBranchName) {
    this.integrationRepositoryBranchName = integrationRepositoryBranchName;
    return this;
  }

   /**
   * Get integrationRepositoryBranchName
   * @return integrationRepositoryBranchName
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_INTEGRATION_REPOSITORY_BRANCH_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIntegrationRepositoryBranchName() {
    return integrationRepositoryBranchName;
  }


  @JsonProperty(JSON_PROPERTY_INTEGRATION_REPOSITORY_BRANCH_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIntegrationRepositoryBranchName(String integrationRepositoryBranchName) {
    this.integrationRepositoryBranchName = integrationRepositoryBranchName;
  }


  public MergeResultSummary integrationBranchVcsKey(String integrationBranchVcsKey) {
    this.integrationBranchVcsKey = integrationBranchVcsKey;
    return this;
  }

   /**
   * Get integrationBranchVcsKey
   * @return integrationBranchVcsKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_INTEGRATION_BRANCH_VCS_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIntegrationBranchVcsKey() {
    return integrationBranchVcsKey;
  }


  @JsonProperty(JSON_PROPERTY_INTEGRATION_BRANCH_VCS_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIntegrationBranchVcsKey(String integrationBranchVcsKey) {
    this.integrationBranchVcsKey = integrationBranchVcsKey;
  }


  public MergeResultSummary mergeResultVcsKey(String mergeResultVcsKey) {
    this.mergeResultVcsKey = mergeResultVcsKey;
    return this;
  }

   /**
   * Get mergeResultVcsKey
   * @return mergeResultVcsKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MERGE_RESULT_VCS_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMergeResultVcsKey() {
    return mergeResultVcsKey;
  }


  @JsonProperty(JSON_PROPERTY_MERGE_RESULT_VCS_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMergeResultVcsKey(String mergeResultVcsKey) {
    this.mergeResultVcsKey = mergeResultVcsKey;
  }


  public MergeResultSummary emptyMerge(Boolean emptyMerge) {
    this.emptyMerge = emptyMerge;
    return this;
  }

   /**
   * Get emptyMerge
   * @return emptyMerge
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_EMPTY_MERGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEmptyMerge() {
    return emptyMerge;
  }


  @JsonProperty(JSON_PROPERTY_EMPTY_MERGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmptyMerge(Boolean emptyMerge) {
    this.emptyMerge = emptyMerge;
  }


  public MergeResultSummary mergeState(MergeStateEnum mergeState) {
    this.mergeState = mergeState;
    return this;
  }

   /**
   * Get mergeState
   * @return mergeState
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MERGE_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MergeStateEnum getMergeState() {
    return mergeState;
  }


  @JsonProperty(JSON_PROPERTY_MERGE_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMergeState(MergeStateEnum mergeState) {
    this.mergeState = mergeState;
  }


  public MergeResultSummary pushState(PushStateEnum pushState) {
    this.pushState = pushState;
    return this;
  }

   /**
   * Get pushState
   * @return pushState
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PUSH_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PushStateEnum getPushState() {
    return pushState;
  }


  @JsonProperty(JSON_PROPERTY_PUSH_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPushState(PushStateEnum pushState) {
    this.pushState = pushState;
  }


  public MergeResultSummary integrationStrategy(IntegrationStrategyEnum integrationStrategy) {
    this.integrationStrategy = integrationStrategy;
    return this;
  }

   /**
   * Get integrationStrategy
   * @return integrationStrategy
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_INTEGRATION_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public IntegrationStrategyEnum getIntegrationStrategy() {
    return integrationStrategy;
  }


  @JsonProperty(JSON_PROPERTY_INTEGRATION_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIntegrationStrategy(IntegrationStrategyEnum integrationStrategy) {
    this.integrationStrategy = integrationStrategy;
  }


  public MergeResultSummary branchName(String branchName) {
    this.branchName = branchName;
    return this;
  }

   /**
   * Get branchName
   * @return branchName
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BRANCH_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBranchName() {
    return branchName;
  }


  @JsonProperty(JSON_PROPERTY_BRANCH_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBranchName(String branchName) {
    this.branchName = branchName;
  }


  public MergeResultSummary id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  /**
   * Return true if this MergeResultSummary object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MergeResultSummary mergeResultSummary = (MergeResultSummary) o;
    return Objects.equals(this.branchTargetVcsKey, mergeResultSummary.branchTargetVcsKey) &&
        Objects.equals(this.failureReason, mergeResultSummary.failureReason) &&
        Objects.equals(this.integrationRepositoryId, mergeResultSummary.integrationRepositoryId) &&
        Objects.equals(this.integrationRepositoryBranchName, mergeResultSummary.integrationRepositoryBranchName) &&
        Objects.equals(this.integrationBranchVcsKey, mergeResultSummary.integrationBranchVcsKey) &&
        Objects.equals(this.mergeResultVcsKey, mergeResultSummary.mergeResultVcsKey) &&
        Objects.equals(this.emptyMerge, mergeResultSummary.emptyMerge) &&
        Objects.equals(this.mergeState, mergeResultSummary.mergeState) &&
        Objects.equals(this.pushState, mergeResultSummary.pushState) &&
        Objects.equals(this.integrationStrategy, mergeResultSummary.integrationStrategy) &&
        Objects.equals(this.branchName, mergeResultSummary.branchName) &&
        Objects.equals(this.id, mergeResultSummary.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(branchTargetVcsKey, failureReason, integrationRepositoryId, integrationRepositoryBranchName, integrationBranchVcsKey, mergeResultVcsKey, emptyMerge, mergeState, pushState, integrationStrategy, branchName, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MergeResultSummary {\n");
    sb.append("    branchTargetVcsKey: ").append(toIndentedString(branchTargetVcsKey)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    integrationRepositoryId: ").append(toIndentedString(integrationRepositoryId)).append("\n");
    sb.append("    integrationRepositoryBranchName: ").append(toIndentedString(integrationRepositoryBranchName)).append("\n");
    sb.append("    integrationBranchVcsKey: ").append(toIndentedString(integrationBranchVcsKey)).append("\n");
    sb.append("    mergeResultVcsKey: ").append(toIndentedString(mergeResultVcsKey)).append("\n");
    sb.append("    emptyMerge: ").append(toIndentedString(emptyMerge)).append("\n");
    sb.append("    mergeState: ").append(toIndentedString(mergeState)).append("\n");
    sb.append("    pushState: ").append(toIndentedString(pushState)).append("\n");
    sb.append("    integrationStrategy: ").append(toIndentedString(integrationStrategy)).append("\n");
    sb.append("    branchName: ").append(toIndentedString(branchName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

