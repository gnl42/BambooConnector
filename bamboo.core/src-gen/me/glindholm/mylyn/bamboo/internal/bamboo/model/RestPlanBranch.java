/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.bamboo.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.Link;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestPlan;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.Result;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * RestPlanBranch
 */
@JsonPropertyOrder({
  RestPlanBranch.JSON_PROPERTY_EXPAND,
  RestPlanBranch.JSON_PROPERTY_LINK,
  RestPlanBranch.JSON_PROPERTY_DESCRIPTION,
  RestPlanBranch.JSON_PROPERTY_SHORT_NAME,
  RestPlanBranch.JSON_PROPERTY_SHORT_KEY,
  RestPlanBranch.JSON_PROPERTY_ENABLED,
  RestPlanBranch.JSON_PROPERTY_IS_FAVOURITE,
  RestPlanBranch.JSON_PROPERTY_LATEST_RESULT,
  RestPlanBranch.JSON_PROPERTY_MASTER,
  RestPlanBranch.JSON_PROPERTY_WORKFLOW_TYPE,
  RestPlanBranch.JSON_PROPERTY_DIVERGENT,
  RestPlanBranch.JSON_PROPERTY_AWAITING_SPECS_EXECUTION,
  RestPlanBranch.JSON_PROPERTY_KEY,
  RestPlanBranch.JSON_PROPERTY_NAME
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-08T20:39:31.812169500-07:00[America/Vancouver]")
public class RestPlanBranch implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_EXPAND = "expand";
  private String expand;

  public static final String JSON_PROPERTY_LINK = "link";
  private Link link;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_SHORT_NAME = "shortName";
  private String shortName;

  public static final String JSON_PROPERTY_SHORT_KEY = "shortKey";
  private String shortKey;

  public static final String JSON_PROPERTY_ENABLED = "enabled";
  private Boolean enabled;

  public static final String JSON_PROPERTY_IS_FAVOURITE = "isFavourite";
  private Boolean isFavourite;

  public static final String JSON_PROPERTY_LATEST_RESULT = "latestResult";
  private Result latestResult;

  public static final String JSON_PROPERTY_MASTER = "master";
  private RestPlan master;

  public static final String JSON_PROPERTY_WORKFLOW_TYPE = "workflowType";
  private String workflowType;

  public static final String JSON_PROPERTY_DIVERGENT = "divergent";
  private Boolean divergent;

  public static final String JSON_PROPERTY_AWAITING_SPECS_EXECUTION = "awaitingSpecsExecution";
  private Boolean awaitingSpecsExecution;

  public static final String JSON_PROPERTY_KEY = "key";
  private String key;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public RestPlanBranch() { 
  }

  public RestPlanBranch expand(String expand) {
    this.expand = expand;
    return this;
  }

   /**
   * Get expand
   * @return expand
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_EXPAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExpand() {
    return expand;
  }


  @JsonProperty(JSON_PROPERTY_EXPAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpand(String expand) {
    this.expand = expand;
  }


  public RestPlanBranch link(Link link) {
    this.link = link;
    return this;
  }

   /**
   * Get link
   * @return link
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_LINK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Link getLink() {
    return link;
  }


  @JsonProperty(JSON_PROPERTY_LINK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLink(Link link) {
    this.link = link;
  }


  public RestPlanBranch description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public RestPlanBranch shortName(String shortName) {
    this.shortName = shortName;
    return this;
  }

   /**
   * Get shortName
   * @return shortName
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SHORT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getShortName() {
    return shortName;
  }


  @JsonProperty(JSON_PROPERTY_SHORT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShortName(String shortName) {
    this.shortName = shortName;
  }


  public RestPlanBranch shortKey(String shortKey) {
    this.shortKey = shortKey;
    return this;
  }

   /**
   * Get shortKey
   * @return shortKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SHORT_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getShortKey() {
    return shortKey;
  }


  @JsonProperty(JSON_PROPERTY_SHORT_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShortKey(String shortKey) {
    this.shortKey = shortKey;
  }


  public RestPlanBranch enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnabled() {
    return enabled;
  }


  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public RestPlanBranch isFavourite(Boolean isFavourite) {
    this.isFavourite = isFavourite;
    return this;
  }

   /**
   * Get isFavourite
   * @return isFavourite
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_IS_FAVOURITE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsFavourite() {
    return isFavourite;
  }


  @JsonProperty(JSON_PROPERTY_IS_FAVOURITE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsFavourite(Boolean isFavourite) {
    this.isFavourite = isFavourite;
  }


  public RestPlanBranch latestResult(Result latestResult) {
    this.latestResult = latestResult;
    return this;
  }

   /**
   * Get latestResult
   * @return latestResult
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_LATEST_RESULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Result getLatestResult() {
    return latestResult;
  }


  @JsonProperty(JSON_PROPERTY_LATEST_RESULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLatestResult(Result latestResult) {
    this.latestResult = latestResult;
  }


  public RestPlanBranch master(RestPlan master) {
    this.master = master;
    return this;
  }

   /**
   * Get master
   * @return master
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MASTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestPlan getMaster() {
    return master;
  }


  @JsonProperty(JSON_PROPERTY_MASTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaster(RestPlan master) {
    this.master = master;
  }


  public RestPlanBranch workflowType(String workflowType) {
    this.workflowType = workflowType;
    return this;
  }

   /**
   * Get workflowType
   * @return workflowType
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_WORKFLOW_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getWorkflowType() {
    return workflowType;
  }


  @JsonProperty(JSON_PROPERTY_WORKFLOW_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWorkflowType(String workflowType) {
    this.workflowType = workflowType;
  }


  public RestPlanBranch divergent(Boolean divergent) {
    this.divergent = divergent;
    return this;
  }

   /**
   * Get divergent
   * @return divergent
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DIVERGENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDivergent() {
    return divergent;
  }


  @JsonProperty(JSON_PROPERTY_DIVERGENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDivergent(Boolean divergent) {
    this.divergent = divergent;
  }


  public RestPlanBranch awaitingSpecsExecution(Boolean awaitingSpecsExecution) {
    this.awaitingSpecsExecution = awaitingSpecsExecution;
    return this;
  }

   /**
   * Get awaitingSpecsExecution
   * @return awaitingSpecsExecution
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_AWAITING_SPECS_EXECUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAwaitingSpecsExecution() {
    return awaitingSpecsExecution;
  }


  @JsonProperty(JSON_PROPERTY_AWAITING_SPECS_EXECUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAwaitingSpecsExecution(Boolean awaitingSpecsExecution) {
    this.awaitingSpecsExecution = awaitingSpecsExecution;
  }


  public RestPlanBranch key(String key) {
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKey(String key) {
    this.key = key;
  }


  public RestPlanBranch name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  /**
   * Return true if this RestPlanBranch object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestPlanBranch restPlanBranch = (RestPlanBranch) o;
    return Objects.equals(this.expand, restPlanBranch.expand) &&
        Objects.equals(this.link, restPlanBranch.link) &&
        Objects.equals(this.description, restPlanBranch.description) &&
        Objects.equals(this.shortName, restPlanBranch.shortName) &&
        Objects.equals(this.shortKey, restPlanBranch.shortKey) &&
        Objects.equals(this.enabled, restPlanBranch.enabled) &&
        Objects.equals(this.isFavourite, restPlanBranch.isFavourite) &&
        Objects.equals(this.latestResult, restPlanBranch.latestResult) &&
        Objects.equals(this.master, restPlanBranch.master) &&
        Objects.equals(this.workflowType, restPlanBranch.workflowType) &&
        Objects.equals(this.divergent, restPlanBranch.divergent) &&
        Objects.equals(this.awaitingSpecsExecution, restPlanBranch.awaitingSpecsExecution) &&
        Objects.equals(this.key, restPlanBranch.key) &&
        Objects.equals(this.name, restPlanBranch.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expand, link, description, shortName, shortKey, enabled, isFavourite, latestResult, master, workflowType, divergent, awaitingSpecsExecution, key, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestPlanBranch {\n");
    sb.append("    expand: ").append(toIndentedString(expand)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    shortName: ").append(toIndentedString(shortName)).append("\n");
    sb.append("    shortKey: ").append(toIndentedString(shortKey)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    isFavourite: ").append(toIndentedString(isFavourite)).append("\n");
    sb.append("    latestResult: ").append(toIndentedString(latestResult)).append("\n");
    sb.append("    master: ").append(toIndentedString(master)).append("\n");
    sb.append("    workflowType: ").append(toIndentedString(workflowType)).append("\n");
    sb.append("    divergent: ").append(toIndentedString(divergent)).append("\n");
    sb.append("    awaitingSpecsExecution: ").append(toIndentedString(awaitingSpecsExecution)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

