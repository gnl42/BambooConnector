/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.bamboo.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.NotificationManager;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.NotificationSet;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * NotificationRule
 */
@JsonPropertyOrder({
  NotificationRule.JSON_PROPERTY_CONDITION_KEY,
  NotificationRule.JSON_PROPERTY_NOTIFICATION_SET,
  NotificationRule.JSON_PROPERTY_CONDITION_DATA,
  NotificationRule.JSON_PROPERTY_NOTIFICATION_TYPE_FOR_VIEW,
  NotificationRule.JSON_PROPERTY_NOTIFICATION_MANAGER,
  NotificationRule.JSON_PROPERTY_RECIPIENT,
  NotificationRule.JSON_PROPERTY_RECIPIENT_TYPE,
  NotificationRule.JSON_PROPERTY_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-08T20:39:31.812169500-07:00[America/Vancouver]")
public class NotificationRule implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_CONDITION_KEY = "conditionKey";
  private String conditionKey;

  public static final String JSON_PROPERTY_NOTIFICATION_SET = "notificationSet";
  private NotificationSet notificationSet;

  public static final String JSON_PROPERTY_CONDITION_DATA = "conditionData";
  private String conditionData;

  public static final String JSON_PROPERTY_NOTIFICATION_TYPE_FOR_VIEW = "notificationTypeForView";
  private Object notificationTypeForView;

  public static final String JSON_PROPERTY_NOTIFICATION_MANAGER = "notificationManager";
  private NotificationManager notificationManager;

  public static final String JSON_PROPERTY_RECIPIENT = "recipient";
  private String recipient;

  public static final String JSON_PROPERTY_RECIPIENT_TYPE = "recipientType";
  private String recipientType;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public NotificationRule() { 
  }

  public NotificationRule conditionKey(String conditionKey) {
    this.conditionKey = conditionKey;
    return this;
  }

   /**
   * Get conditionKey
   * @return conditionKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CONDITION_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getConditionKey() {
    return conditionKey;
  }


  @JsonProperty(JSON_PROPERTY_CONDITION_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConditionKey(String conditionKey) {
    this.conditionKey = conditionKey;
  }


  public NotificationRule notificationSet(NotificationSet notificationSet) {
    this.notificationSet = notificationSet;
    return this;
  }

   /**
   * Get notificationSet
   * @return notificationSet
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NOTIFICATION_SET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public NotificationSet getNotificationSet() {
    return notificationSet;
  }


  @JsonProperty(JSON_PROPERTY_NOTIFICATION_SET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotificationSet(NotificationSet notificationSet) {
    this.notificationSet = notificationSet;
  }


  public NotificationRule conditionData(String conditionData) {
    this.conditionData = conditionData;
    return this;
  }

   /**
   * Get conditionData
   * @return conditionData
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CONDITION_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getConditionData() {
    return conditionData;
  }


  @JsonProperty(JSON_PROPERTY_CONDITION_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConditionData(String conditionData) {
    this.conditionData = conditionData;
  }


  public NotificationRule notificationTypeForView(Object notificationTypeForView) {
    this.notificationTypeForView = notificationTypeForView;
    return this;
  }

   /**
   * Get notificationTypeForView
   * @return notificationTypeForView
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NOTIFICATION_TYPE_FOR_VIEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getNotificationTypeForView() {
    return notificationTypeForView;
  }


  @JsonProperty(JSON_PROPERTY_NOTIFICATION_TYPE_FOR_VIEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotificationTypeForView(Object notificationTypeForView) {
    this.notificationTypeForView = notificationTypeForView;
  }


  public NotificationRule notificationManager(NotificationManager notificationManager) {
    this.notificationManager = notificationManager;
    return this;
  }

   /**
   * Get notificationManager
   * @return notificationManager
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NOTIFICATION_MANAGER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public NotificationManager getNotificationManager() {
    return notificationManager;
  }


  @JsonProperty(JSON_PROPERTY_NOTIFICATION_MANAGER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotificationManager(NotificationManager notificationManager) {
    this.notificationManager = notificationManager;
  }


  public NotificationRule recipient(String recipient) {
    this.recipient = recipient;
    return this;
  }

   /**
   * Get recipient
   * @return recipient
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_RECIPIENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRecipient() {
    return recipient;
  }


  @JsonProperty(JSON_PROPERTY_RECIPIENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRecipient(String recipient) {
    this.recipient = recipient;
  }


  public NotificationRule recipientType(String recipientType) {
    this.recipientType = recipientType;
    return this;
  }

   /**
   * Get recipientType
   * @return recipientType
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_RECIPIENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRecipientType() {
    return recipientType;
  }


  @JsonProperty(JSON_PROPERTY_RECIPIENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRecipientType(String recipientType) {
    this.recipientType = recipientType;
  }


  public NotificationRule id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  /**
   * Return true if this NotificationRule object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationRule notificationRule = (NotificationRule) o;
    return Objects.equals(this.conditionKey, notificationRule.conditionKey) &&
        Objects.equals(this.notificationSet, notificationRule.notificationSet) &&
        Objects.equals(this.conditionData, notificationRule.conditionData) &&
        Objects.equals(this.notificationTypeForView, notificationRule.notificationTypeForView) &&
        Objects.equals(this.notificationManager, notificationRule.notificationManager) &&
        Objects.equals(this.recipient, notificationRule.recipient) &&
        Objects.equals(this.recipientType, notificationRule.recipientType) &&
        Objects.equals(this.id, notificationRule.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conditionKey, notificationSet, conditionData, notificationTypeForView, notificationManager, recipient, recipientType, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationRule {\n");
    sb.append("    conditionKey: ").append(toIndentedString(conditionKey)).append("\n");
    sb.append("    notificationSet: ").append(toIndentedString(notificationSet)).append("\n");
    sb.append("    conditionData: ").append(toIndentedString(conditionData)).append("\n");
    sb.append("    notificationTypeForView: ").append(toIndentedString(notificationTypeForView)).append("\n");
    sb.append("    notificationManager: ").append(toIndentedString(notificationManager)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    recipientType: ").append(toIndentedString(recipientType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

