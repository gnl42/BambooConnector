/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package me.glindholm.mylyn.bamboo.internal.bamboo.api;

import me.glindholm.mylyn.bamboo.internal.bamboo.invoker.ApiClient;
import me.glindholm.mylyn.bamboo.internal.bamboo.invoker.ApiException;
import me.glindholm.mylyn.bamboo.internal.bamboo.invoker.ApiResponse;
import me.glindholm.mylyn.bamboo.internal.bamboo.invoker.Pair;

import me.glindholm.mylyn.bamboo.internal.bamboo.model.CreateAccessTokenRequest;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.GetUserAccessTokens200Response;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestAccessToken;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestDedicatedAgent;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestErrorCollection;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.SearchResultsList;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-08T20:39:31.812169500-07:00[America/Vancouver]")
public class ResourceApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ResourceApi() {
    this(new ApiClient());
  }

  public ResourceApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * Dedicate agent, elastic image or ephemeral template.
   * @param executorType Executor type (optional)
   * @param executorId id of the agent or elastic image (optional)
   * @param entityId identifier of project, plan, job, deployment project or environment (optional)
   * @param assignmentType should be PROJECT, PLAN, JOB, ENVIRONMENT, DEPLOYMENT_PROJECT (optional)
   * @return RestDedicatedAgent
   * @throws ApiException if fails to make API call
   */
  public RestDedicatedAgent addAgentAssignment(String executorType, Long executorId, Long entityId, String assignmentType) throws ApiException {
    ApiResponse<RestDedicatedAgent> localVarResponse = addAgentAssignmentWithHttpInfo(executorType, executorId, entityId, assignmentType);
    return localVarResponse.getData();
  }

  /**
   * 
   * Dedicate agent, elastic image or ephemeral template.
   * @param executorType Executor type (optional)
   * @param executorId id of the agent or elastic image (optional)
   * @param entityId identifier of project, plan, job, deployment project or environment (optional)
   * @param assignmentType should be PROJECT, PLAN, JOB, ENVIRONMENT, DEPLOYMENT_PROJECT (optional)
   * @return ApiResponse&lt;RestDedicatedAgent&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestDedicatedAgent> addAgentAssignmentWithHttpInfo(String executorType, Long executorId, Long entityId, String assignmentType) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addAgentAssignmentRequestBuilder(executorType, executorId, entityId, assignmentType);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addAgentAssignment", localVarResponse);
        }
        return new ApiResponse<RestDedicatedAgent>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestDedicatedAgent>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addAgentAssignmentRequestBuilder(String executorType, Long executorId, Long entityId, String assignmentType) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/agent/assignment";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "executorType";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("executorType", executorType));
    localVarQueryParameterBaseName = "executorId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("executorId", executorId));
    localVarQueryParameterBaseName = "entityId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("entityId", entityId));
    localVarQueryParameterBaseName = "assignmentType";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("assignmentType", assignmentType));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Create a new access token for the current user.
   * @param createAccessTokenRequest request for a token - name is a required field (required)
   * @return RestAccessToken
   * @throws ApiException if fails to make API call
   */
  public RestAccessToken createAccessToken(CreateAccessTokenRequest createAccessTokenRequest) throws ApiException {
    ApiResponse<RestAccessToken> localVarResponse = createAccessTokenWithHttpInfo(createAccessTokenRequest);
    return localVarResponse.getData();
  }

  /**
   * 
   * Create a new access token for the current user.
   * @param createAccessTokenRequest request for a token - name is a required field (required)
   * @return ApiResponse&lt;RestAccessToken&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestAccessToken> createAccessTokenWithHttpInfo(CreateAccessTokenRequest createAccessTokenRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createAccessTokenRequestBuilder(createAccessTokenRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createAccessToken", localVarResponse);
        }
        return new ApiResponse<RestAccessToken>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestAccessToken>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createAccessTokenRequestBuilder(CreateAccessTokenRequest createAccessTokenRequest) throws ApiException {
    // verify the required parameter 'createAccessTokenRequest' is set
    if (createAccessTokenRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createAccessTokenRequest' when calling createAccessToken");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/access-token";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createAccessTokenRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get agent&#39;s assignment.
   * @param executorType Executor type (required)
   * @param executorId id of the agent or elastic image (optional)
   * @return List&lt;RestDedicatedAgent&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RestDedicatedAgent> getAgentAssignments(String executorType, Long executorId) throws ApiException {
    ApiResponse<List<RestDedicatedAgent>> localVarResponse = getAgentAssignmentsWithHttpInfo(executorType, executorId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get agent&#39;s assignment.
   * @param executorType Executor type (required)
   * @param executorId id of the agent or elastic image (optional)
   * @return ApiResponse&lt;List&lt;RestDedicatedAgent&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RestDedicatedAgent>> getAgentAssignmentsWithHttpInfo(String executorType, Long executorId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAgentAssignmentsRequestBuilder(executorType, executorId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAgentAssignments", localVarResponse);
        }
        return new ApiResponse<List<RestDedicatedAgent>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RestDedicatedAgent>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAgentAssignmentsRequestBuilder(String executorType, Long executorId) throws ApiException {
    // verify the required parameter 'executorType' is set
    if (executorType == null) {
      throw new ApiException(400, "Missing the required parameter 'executorType' when calling getAgentAssignments");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/agent/assignment";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "executorType";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("executorType", executorType));
    localVarQueryParameterBaseName = "executorId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("executorId", executorId));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a page of user&#39;s access tokens.
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return GetUserAccessTokens200Response
   * @throws ApiException if fails to make API call
   */
  public GetUserAccessTokens200Response getUserTokens(Integer limit, Integer start) throws ApiException {
    ApiResponse<GetUserAccessTokens200Response> localVarResponse = getUserTokensWithHttpInfo(limit, start);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a page of user&#39;s access tokens.
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return ApiResponse&lt;GetUserAccessTokens200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetUserAccessTokens200Response> getUserTokensWithHttpInfo(Integer limit, Integer start) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getUserTokensRequestBuilder(limit, start);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getUserTokens", localVarResponse);
        }
        return new ApiResponse<GetUserAccessTokens200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetUserAccessTokens200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getUserTokensRequestBuilder(Integer limit, Integer start) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/access-token";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Remove agent&#39;s assignment.
   * @param executorType Executor type (optional)
   * @param executorId id of the agent or elastic image (optional)
   * @param entityId identifier of project, plan, job, deployment project or environment (optional)
   * @param assignmentType should be PROJECT, PLAN, JOB, ENVIRONMENT, DEPLOYMENT_PROJECT (optional)
   * @throws ApiException if fails to make API call
   */
  public void removeAssignment(String executorType, Long executorId, Long entityId, String assignmentType) throws ApiException {
    removeAssignmentWithHttpInfo(executorType, executorId, entityId, assignmentType);
  }

  /**
   * 
   * Remove agent&#39;s assignment.
   * @param executorType Executor type (optional)
   * @param executorId id of the agent or elastic image (optional)
   * @param entityId identifier of project, plan, job, deployment project or environment (optional)
   * @param assignmentType should be PROJECT, PLAN, JOB, ENVIRONMENT, DEPLOYMENT_PROJECT (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removeAssignmentWithHttpInfo(String executorType, Long executorId, Long entityId, String assignmentType) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeAssignmentRequestBuilder(executorType, executorId, entityId, assignmentType);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removeAssignment", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeAssignmentRequestBuilder(String executorType, Long executorId, Long entityId, String assignmentType) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/agent/assignment";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "executorType";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("executorType", executorType));
    localVarQueryParameterBaseName = "executorId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("executorId", executorId));
    localVarQueryParameterBaseName = "entityId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("entityId", entityId));
    localVarQueryParameterBaseName = "assignmentType";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("assignmentType", assignmentType));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Revoke current user&#39;s access token.
   * @param tokenId id of the token (required)
   * @throws ApiException if fails to make API call
   */
  public void revokeToken(String tokenId) throws ApiException {
    revokeTokenWithHttpInfo(tokenId);
  }

  /**
   * 
   * Revoke current user&#39;s access token.
   * @param tokenId id of the token (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> revokeTokenWithHttpInfo(String tokenId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = revokeTokenRequestBuilder(tokenId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("revokeToken", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder revokeTokenRequestBuilder(String tokenId) throws ApiException {
    // verify the required parameter 'tokenId' is set
    if (tokenId == null) {
      throw new ApiException(400, "Missing the required parameter 'tokenId' when calling revokeToken");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/access-token/{tokenId}"
        .replace("{tokenId}", ApiClient.urlEncode(tokenId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Search for assignments in specified entity&#39;s agents
   * @param maxResult Maximum count of records (optional)
   * @param executorType Executor type (optional)
   * @param searchTerm term to search for (optional)
   * @param executorId id of the agent or elastic image (optional)
   * @param entityType  (optional)
   * @param startIndex Start index of records (optional)
   * @param assignmentType should be PROJECT, PLAN, JOB, ENVIRONMENT, DEPLOYMENT_PROJECT (optional)
   * @return SearchResultsList
   * @throws ApiException if fails to make API call
   */
  public SearchResultsList searchEntityForAgent(Integer maxResult, String executorType, String searchTerm, Long executorId, String entityType, Integer startIndex, String assignmentType) throws ApiException {
    ApiResponse<SearchResultsList> localVarResponse = searchEntityForAgentWithHttpInfo(maxResult, executorType, searchTerm, executorId, entityType, startIndex, assignmentType);
    return localVarResponse.getData();
  }

  /**
   * 
   * Search for assignments in specified entity&#39;s agents
   * @param maxResult Maximum count of records (optional)
   * @param executorType Executor type (optional)
   * @param searchTerm term to search for (optional)
   * @param executorId id of the agent or elastic image (optional)
   * @param entityType  (optional)
   * @param startIndex Start index of records (optional)
   * @param assignmentType should be PROJECT, PLAN, JOB, ENVIRONMENT, DEPLOYMENT_PROJECT (optional)
   * @return ApiResponse&lt;SearchResultsList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SearchResultsList> searchEntityForAgentWithHttpInfo(Integer maxResult, String executorType, String searchTerm, Long executorId, String entityType, Integer startIndex, String assignmentType) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = searchEntityForAgentRequestBuilder(maxResult, executorType, searchTerm, executorId, entityType, startIndex, assignmentType);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("searchEntityForAgent", localVarResponse);
        }
        return new ApiResponse<SearchResultsList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SearchResultsList>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder searchEntityForAgentRequestBuilder(Integer maxResult, String executorType, String searchTerm, Long executorId, String entityType, Integer startIndex, String assignmentType) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/agent/assignment/search";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "max-result";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-result", maxResult));
    localVarQueryParameterBaseName = "executorType";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("executorType", executorType));
    localVarQueryParameterBaseName = "searchTerm";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchTerm", searchTerm));
    localVarQueryParameterBaseName = "executorId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("executorId", executorId));
    localVarQueryParameterBaseName = "entityType";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("entityType", entityType));
    localVarQueryParameterBaseName = "start-index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start-index", startIndex));
    localVarQueryParameterBaseName = "assignmentType";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("assignmentType", assignmentType));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
