/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.bamboo.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.Link;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.PlanKey;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestKey;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestPlanActionList;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestPlanBranchList;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestProject;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestStageList;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestVariableDefinitionContextList;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.User;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * RestPlan
 */
@JsonPropertyOrder({
  RestPlan.JSON_PROPERTY_EXPAND,
  RestPlan.JSON_PROPERTY_PROJECT_KEY,
  RestPlan.JSON_PROPERTY_PROJECT_NAME,
  RestPlan.JSON_PROPERTY_PROJECT,
  RestPlan.JSON_PROPERTY_DESCRIPTION,
  RestPlan.JSON_PROPERTY_PARENT_NAME,
  RestPlan.JSON_PROPERTY_PARENT_KEY,
  RestPlan.JSON_PROPERTY_PARENT_LINK,
  RestPlan.JSON_PROPERTY_MASTER,
  RestPlan.JSON_PROPERTY_STAGE_NAME,
  RestPlan.JSON_PROPERTY_PLAN_KEY,
  RestPlan.JSON_PROPERTY_PLAN_NAME,
  RestPlan.JSON_PROPERTY_SHORT_NAME,
  RestPlan.JSON_PROPERTY_BUILD_NAME,
  RestPlan.JSON_PROPERTY_SHORT_KEY,
  RestPlan.JSON_PROPERTY_TYPE,
  RestPlan.JSON_PROPERTY_ENABLED,
  RestPlan.JSON_PROPERTY_REST_PLAN_KEY,
  RestPlan.JSON_PROPERTY_LINK,
  RestPlan.JSON_PROPERTY_AVERAGE_BUILD_TIME_IN_SECONDS,
  RestPlan.JSON_PROPERTY_ACTIONS,
  RestPlan.JSON_PROPERTY_STAGES,
  RestPlan.JSON_PROPERTY_BRANCHES,
  RestPlan.JSON_PROPERTY_VARIABLE_CONTEXT,
  RestPlan.JSON_PROPERTY_IS_FAVOURITE,
  RestPlan.JSON_PROPERTY_CURRENT_REST_USER,
  RestPlan.JSON_PROPERTY_IS_BUILDING,
  RestPlan.JSON_PROPERTY_IS_ACTIVE,
  RestPlan.JSON_PROPERTY_KEY,
  RestPlan.JSON_PROPERTY_NAME
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-08T20:39:31.812169500-07:00[America/Vancouver]")
public class RestPlan implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_EXPAND = "expand";
  private String expand;

  public static final String JSON_PROPERTY_PROJECT_KEY = "projectKey";
  private String projectKey;

  public static final String JSON_PROPERTY_PROJECT_NAME = "projectName";
  private String projectName;

  public static final String JSON_PROPERTY_PROJECT = "project";
  private RestProject project;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_PARENT_NAME = "parentName";
  private String parentName;

  public static final String JSON_PROPERTY_PARENT_KEY = "parentKey";
  private String parentKey;

  public static final String JSON_PROPERTY_PARENT_LINK = "parentLink";
  private Link parentLink;

  public static final String JSON_PROPERTY_MASTER = "master";
  private RestPlan master;

  public static final String JSON_PROPERTY_STAGE_NAME = "stageName";
  private String stageName;

  public static final String JSON_PROPERTY_PLAN_KEY = "planKey";
  private PlanKey planKey;

  public static final String JSON_PROPERTY_PLAN_NAME = "planName";
  private String planName;

  public static final String JSON_PROPERTY_SHORT_NAME = "shortName";
  private String shortName;

  public static final String JSON_PROPERTY_BUILD_NAME = "buildName";
  private String buildName;

  public static final String JSON_PROPERTY_SHORT_KEY = "shortKey";
  private String shortKey;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_ENABLED = "enabled";
  private Boolean enabled;

  public static final String JSON_PROPERTY_REST_PLAN_KEY = "restPlanKey";
  private RestKey restPlanKey;

  public static final String JSON_PROPERTY_LINK = "link";
  private Link link;

  public static final String JSON_PROPERTY_AVERAGE_BUILD_TIME_IN_SECONDS = "averageBuildTimeInSeconds";
  private Integer averageBuildTimeInSeconds;

  public static final String JSON_PROPERTY_ACTIONS = "actions";
  private RestPlanActionList actions;

  public static final String JSON_PROPERTY_STAGES = "stages";
  private RestStageList stages;

  public static final String JSON_PROPERTY_BRANCHES = "branches";
  private RestPlanBranchList branches;

  public static final String JSON_PROPERTY_VARIABLE_CONTEXT = "variableContext";
  private RestVariableDefinitionContextList variableContext;

  public static final String JSON_PROPERTY_IS_FAVOURITE = "isFavourite";
  private Boolean isFavourite;

  public static final String JSON_PROPERTY_CURRENT_REST_USER = "currentRestUser";
  private User currentRestUser;

  public static final String JSON_PROPERTY_IS_BUILDING = "isBuilding";
  private Boolean isBuilding;

  public static final String JSON_PROPERTY_IS_ACTIVE = "isActive";
  private Boolean isActive;

  public static final String JSON_PROPERTY_KEY = "key";
  private String key;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public RestPlan() { 
  }

  public RestPlan expand(String expand) {
    this.expand = expand;
    return this;
  }

   /**
   * Get expand
   * @return expand
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_EXPAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExpand() {
    return expand;
  }


  @JsonProperty(JSON_PROPERTY_EXPAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpand(String expand) {
    this.expand = expand;
  }


  public RestPlan projectKey(String projectKey) {
    this.projectKey = projectKey;
    return this;
  }

   /**
   * Get projectKey
   * @return projectKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PROJECT_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProjectKey() {
    return projectKey;
  }


  @JsonProperty(JSON_PROPERTY_PROJECT_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProjectKey(String projectKey) {
    this.projectKey = projectKey;
  }


  public RestPlan projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

   /**
   * Get projectName
   * @return projectName
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PROJECT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProjectName() {
    return projectName;
  }


  @JsonProperty(JSON_PROPERTY_PROJECT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }


  public RestPlan project(RestProject project) {
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PROJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestProject getProject() {
    return project;
  }


  @JsonProperty(JSON_PROPERTY_PROJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProject(RestProject project) {
    this.project = project;
  }


  public RestPlan description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public RestPlan parentName(String parentName) {
    this.parentName = parentName;
    return this;
  }

   /**
   * Get parentName
   * @return parentName
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PARENT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getParentName() {
    return parentName;
  }


  @JsonProperty(JSON_PROPERTY_PARENT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParentName(String parentName) {
    this.parentName = parentName;
  }


  public RestPlan parentKey(String parentKey) {
    this.parentKey = parentKey;
    return this;
  }

   /**
   * Get parentKey
   * @return parentKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PARENT_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getParentKey() {
    return parentKey;
  }


  @JsonProperty(JSON_PROPERTY_PARENT_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParentKey(String parentKey) {
    this.parentKey = parentKey;
  }


  public RestPlan parentLink(Link parentLink) {
    this.parentLink = parentLink;
    return this;
  }

   /**
   * Get parentLink
   * @return parentLink
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PARENT_LINK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Link getParentLink() {
    return parentLink;
  }


  @JsonProperty(JSON_PROPERTY_PARENT_LINK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParentLink(Link parentLink) {
    this.parentLink = parentLink;
  }


  public RestPlan master(RestPlan master) {
    this.master = master;
    return this;
  }

   /**
   * Get master
   * @return master
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MASTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestPlan getMaster() {
    return master;
  }


  @JsonProperty(JSON_PROPERTY_MASTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaster(RestPlan master) {
    this.master = master;
  }


  public RestPlan stageName(String stageName) {
    this.stageName = stageName;
    return this;
  }

   /**
   * Get stageName
   * @return stageName
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_STAGE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStageName() {
    return stageName;
  }


  @JsonProperty(JSON_PROPERTY_STAGE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStageName(String stageName) {
    this.stageName = stageName;
  }


  public RestPlan planKey(PlanKey planKey) {
    this.planKey = planKey;
    return this;
  }

   /**
   * Get planKey
   * @return planKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLAN_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PlanKey getPlanKey() {
    return planKey;
  }


  @JsonProperty(JSON_PROPERTY_PLAN_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlanKey(PlanKey planKey) {
    this.planKey = planKey;
  }


  public RestPlan planName(String planName) {
    this.planName = planName;
    return this;
  }

   /**
   * Get planName
   * @return planName
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLAN_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPlanName() {
    return planName;
  }


  @JsonProperty(JSON_PROPERTY_PLAN_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlanName(String planName) {
    this.planName = planName;
  }


  public RestPlan shortName(String shortName) {
    this.shortName = shortName;
    return this;
  }

   /**
   * Get shortName
   * @return shortName
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SHORT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getShortName() {
    return shortName;
  }


  @JsonProperty(JSON_PROPERTY_SHORT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShortName(String shortName) {
    this.shortName = shortName;
  }


  public RestPlan buildName(String buildName) {
    this.buildName = buildName;
    return this;
  }

   /**
   * Get buildName
   * @return buildName
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BUILD_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBuildName() {
    return buildName;
  }


  @JsonProperty(JSON_PROPERTY_BUILD_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildName(String buildName) {
    this.buildName = buildName;
  }


  public RestPlan shortKey(String shortKey) {
    this.shortKey = shortKey;
    return this;
  }

   /**
   * Get shortKey
   * @return shortKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SHORT_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getShortKey() {
    return shortKey;
  }


  @JsonProperty(JSON_PROPERTY_SHORT_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShortKey(String shortKey) {
    this.shortKey = shortKey;
  }


  public RestPlan type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }


  public RestPlan enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnabled() {
    return enabled;
  }


  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public RestPlan restPlanKey(RestKey restPlanKey) {
    this.restPlanKey = restPlanKey;
    return this;
  }

   /**
   * Get restPlanKey
   * @return restPlanKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_REST_PLAN_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestKey getRestPlanKey() {
    return restPlanKey;
  }


  @JsonProperty(JSON_PROPERTY_REST_PLAN_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRestPlanKey(RestKey restPlanKey) {
    this.restPlanKey = restPlanKey;
  }


  public RestPlan link(Link link) {
    this.link = link;
    return this;
  }

   /**
   * Get link
   * @return link
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_LINK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Link getLink() {
    return link;
  }


  @JsonProperty(JSON_PROPERTY_LINK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLink(Link link) {
    this.link = link;
  }


  public RestPlan averageBuildTimeInSeconds(Integer averageBuildTimeInSeconds) {
    this.averageBuildTimeInSeconds = averageBuildTimeInSeconds;
    return this;
  }

   /**
   * Get averageBuildTimeInSeconds
   * @return averageBuildTimeInSeconds
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_AVERAGE_BUILD_TIME_IN_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getAverageBuildTimeInSeconds() {
    return averageBuildTimeInSeconds;
  }


  @JsonProperty(JSON_PROPERTY_AVERAGE_BUILD_TIME_IN_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAverageBuildTimeInSeconds(Integer averageBuildTimeInSeconds) {
    this.averageBuildTimeInSeconds = averageBuildTimeInSeconds;
  }


  public RestPlan actions(RestPlanActionList actions) {
    this.actions = actions;
    return this;
  }

   /**
   * Get actions
   * @return actions
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestPlanActionList getActions() {
    return actions;
  }


  @JsonProperty(JSON_PROPERTY_ACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActions(RestPlanActionList actions) {
    this.actions = actions;
  }


  public RestPlan stages(RestStageList stages) {
    this.stages = stages;
    return this;
  }

   /**
   * Get stages
   * @return stages
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_STAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestStageList getStages() {
    return stages;
  }


  @JsonProperty(JSON_PROPERTY_STAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStages(RestStageList stages) {
    this.stages = stages;
  }


  public RestPlan branches(RestPlanBranchList branches) {
    this.branches = branches;
    return this;
  }

   /**
   * Get branches
   * @return branches
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BRANCHES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestPlanBranchList getBranches() {
    return branches;
  }


  @JsonProperty(JSON_PROPERTY_BRANCHES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBranches(RestPlanBranchList branches) {
    this.branches = branches;
  }


  public RestPlan variableContext(RestVariableDefinitionContextList variableContext) {
    this.variableContext = variableContext;
    return this;
  }

   /**
   * Get variableContext
   * @return variableContext
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_VARIABLE_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestVariableDefinitionContextList getVariableContext() {
    return variableContext;
  }


  @JsonProperty(JSON_PROPERTY_VARIABLE_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVariableContext(RestVariableDefinitionContextList variableContext) {
    this.variableContext = variableContext;
  }


  public RestPlan isFavourite(Boolean isFavourite) {
    this.isFavourite = isFavourite;
    return this;
  }

   /**
   * Get isFavourite
   * @return isFavourite
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_IS_FAVOURITE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsFavourite() {
    return isFavourite;
  }


  @JsonProperty(JSON_PROPERTY_IS_FAVOURITE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsFavourite(Boolean isFavourite) {
    this.isFavourite = isFavourite;
  }


  public RestPlan currentRestUser(User currentRestUser) {
    this.currentRestUser = currentRestUser;
    return this;
  }

   /**
   * Get currentRestUser
   * @return currentRestUser
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CURRENT_REST_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public User getCurrentRestUser() {
    return currentRestUser;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT_REST_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrentRestUser(User currentRestUser) {
    this.currentRestUser = currentRestUser;
  }


  public RestPlan isBuilding(Boolean isBuilding) {
    this.isBuilding = isBuilding;
    return this;
  }

   /**
   * Get isBuilding
   * @return isBuilding
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_IS_BUILDING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsBuilding() {
    return isBuilding;
  }


  @JsonProperty(JSON_PROPERTY_IS_BUILDING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsBuilding(Boolean isBuilding) {
    this.isBuilding = isBuilding;
  }


  public RestPlan isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

   /**
   * Get isActive
   * @return isActive
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_IS_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsActive() {
    return isActive;
  }


  @JsonProperty(JSON_PROPERTY_IS_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public RestPlan key(String key) {
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKey(String key) {
    this.key = key;
  }


  public RestPlan name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  /**
   * Return true if this RestPlan object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestPlan restPlan = (RestPlan) o;
    return Objects.equals(this.expand, restPlan.expand) &&
        Objects.equals(this.projectKey, restPlan.projectKey) &&
        Objects.equals(this.projectName, restPlan.projectName) &&
        Objects.equals(this.project, restPlan.project) &&
        Objects.equals(this.description, restPlan.description) &&
        Objects.equals(this.parentName, restPlan.parentName) &&
        Objects.equals(this.parentKey, restPlan.parentKey) &&
        Objects.equals(this.parentLink, restPlan.parentLink) &&
        Objects.equals(this.master, restPlan.master) &&
        Objects.equals(this.stageName, restPlan.stageName) &&
        Objects.equals(this.planKey, restPlan.planKey) &&
        Objects.equals(this.planName, restPlan.planName) &&
        Objects.equals(this.shortName, restPlan.shortName) &&
        Objects.equals(this.buildName, restPlan.buildName) &&
        Objects.equals(this.shortKey, restPlan.shortKey) &&
        Objects.equals(this.type, restPlan.type) &&
        Objects.equals(this.enabled, restPlan.enabled) &&
        Objects.equals(this.restPlanKey, restPlan.restPlanKey) &&
        Objects.equals(this.link, restPlan.link) &&
        Objects.equals(this.averageBuildTimeInSeconds, restPlan.averageBuildTimeInSeconds) &&
        Objects.equals(this.actions, restPlan.actions) &&
        Objects.equals(this.stages, restPlan.stages) &&
        Objects.equals(this.branches, restPlan.branches) &&
        Objects.equals(this.variableContext, restPlan.variableContext) &&
        Objects.equals(this.isFavourite, restPlan.isFavourite) &&
        Objects.equals(this.currentRestUser, restPlan.currentRestUser) &&
        Objects.equals(this.isBuilding, restPlan.isBuilding) &&
        Objects.equals(this.isActive, restPlan.isActive) &&
        Objects.equals(this.key, restPlan.key) &&
        Objects.equals(this.name, restPlan.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expand, projectKey, projectName, project, description, parentName, parentKey, parentLink, master, stageName, planKey, planName, shortName, buildName, shortKey, type, enabled, restPlanKey, link, averageBuildTimeInSeconds, actions, stages, branches, variableContext, isFavourite, currentRestUser, isBuilding, isActive, key, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestPlan {\n");
    sb.append("    expand: ").append(toIndentedString(expand)).append("\n");
    sb.append("    projectKey: ").append(toIndentedString(projectKey)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    parentName: ").append(toIndentedString(parentName)).append("\n");
    sb.append("    parentKey: ").append(toIndentedString(parentKey)).append("\n");
    sb.append("    parentLink: ").append(toIndentedString(parentLink)).append("\n");
    sb.append("    master: ").append(toIndentedString(master)).append("\n");
    sb.append("    stageName: ").append(toIndentedString(stageName)).append("\n");
    sb.append("    planKey: ").append(toIndentedString(planKey)).append("\n");
    sb.append("    planName: ").append(toIndentedString(planName)).append("\n");
    sb.append("    shortName: ").append(toIndentedString(shortName)).append("\n");
    sb.append("    buildName: ").append(toIndentedString(buildName)).append("\n");
    sb.append("    shortKey: ").append(toIndentedString(shortKey)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    restPlanKey: ").append(toIndentedString(restPlanKey)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    averageBuildTimeInSeconds: ").append(toIndentedString(averageBuildTimeInSeconds)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    stages: ").append(toIndentedString(stages)).append("\n");
    sb.append("    branches: ").append(toIndentedString(branches)).append("\n");
    sb.append("    variableContext: ").append(toIndentedString(variableContext)).append("\n");
    sb.append("    isFavourite: ").append(toIndentedString(isFavourite)).append("\n");
    sb.append("    currentRestUser: ").append(toIndentedString(currentRestUser)).append("\n");
    sb.append("    isBuilding: ").append(toIndentedString(isBuilding)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

