/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.bamboo.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RequirementOperations;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RequirementReadonlyData;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * RestRequirement
 */
@JsonPropertyOrder({
  RestRequirement.JSON_PROPERTY_SELF,
  RestRequirement.JSON_PROPERTY_ID,
  RestRequirement.JSON_PROPERTY_KEY,
  RestRequirement.JSON_PROPERTY_MATCH_VALUE,
  RestRequirement.JSON_PROPERTY_READONLY_DATA,
  RestRequirement.JSON_PROPERTY_OPERATIONS,
  RestRequirement.JSON_PROPERTY_TYPE_OF_MATCH
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-08T20:39:31.812169500-07:00[America/Vancouver]")
public class RestRequirement implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_SELF = "self";
  private String self;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_KEY = "key";
  private String key;

  public static final String JSON_PROPERTY_MATCH_VALUE = "matchValue";
  private String matchValue;

  public static final String JSON_PROPERTY_READONLY_DATA = "readonlyData";
  private RequirementReadonlyData readonlyData;

  public static final String JSON_PROPERTY_OPERATIONS = "operations";
  private RequirementOperations operations;

  /**
   * Gets or Sets typeOfMatch
   */
  public enum TypeOfMatchEnum {
    EXISTS("EXISTS"),
    
    EQUALS("EQUALS"),
    
    MATCHES("MATCHES");

    private String value;

    TypeOfMatchEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeOfMatchEnum fromValue(String value) {
      for (TypeOfMatchEnum b : TypeOfMatchEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE_OF_MATCH = "typeOfMatch";
  private TypeOfMatchEnum typeOfMatch;

  public RestRequirement() { 
  }

  @JsonCreator
  public RestRequirement(
    @JsonProperty(JSON_PROPERTY_SELF) String self, 
    @JsonProperty(JSON_PROPERTY_ID) Long id
  ) {
  this();
    this.self = self;
    this.id = id;
  }

   /**
   * Get self
   * @return self
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SELF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSelf() {
    return self;
  }




   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }




  public RestRequirement key(String key) {
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKey(String key) {
    this.key = key;
  }


  public RestRequirement matchValue(String matchValue) {
    this.matchValue = matchValue;
    return this;
  }

   /**
   * Get matchValue
   * @return matchValue
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MATCH_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMatchValue() {
    return matchValue;
  }


  @JsonProperty(JSON_PROPERTY_MATCH_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMatchValue(String matchValue) {
    this.matchValue = matchValue;
  }


  public RestRequirement readonlyData(RequirementReadonlyData readonlyData) {
    this.readonlyData = readonlyData;
    return this;
  }

   /**
   * Get readonlyData
   * @return readonlyData
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_READONLY_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RequirementReadonlyData getReadonlyData() {
    return readonlyData;
  }


  @JsonProperty(JSON_PROPERTY_READONLY_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReadonlyData(RequirementReadonlyData readonlyData) {
    this.readonlyData = readonlyData;
  }


  public RestRequirement operations(RequirementOperations operations) {
    this.operations = operations;
    return this;
  }

   /**
   * Get operations
   * @return operations
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_OPERATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RequirementOperations getOperations() {
    return operations;
  }


  @JsonProperty(JSON_PROPERTY_OPERATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperations(RequirementOperations operations) {
    this.operations = operations;
  }


  public RestRequirement typeOfMatch(TypeOfMatchEnum typeOfMatch) {
    this.typeOfMatch = typeOfMatch;
    return this;
  }

   /**
   * Get typeOfMatch
   * @return typeOfMatch
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TYPE_OF_MATCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeOfMatchEnum getTypeOfMatch() {
    return typeOfMatch;
  }


  @JsonProperty(JSON_PROPERTY_TYPE_OF_MATCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeOfMatch(TypeOfMatchEnum typeOfMatch) {
    this.typeOfMatch = typeOfMatch;
  }


  /**
   * Return true if this RestRequirement object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestRequirement restRequirement = (RestRequirement) o;
    return Objects.equals(this.self, restRequirement.self) &&
        Objects.equals(this.id, restRequirement.id) &&
        Objects.equals(this.key, restRequirement.key) &&
        Objects.equals(this.matchValue, restRequirement.matchValue) &&
        Objects.equals(this.readonlyData, restRequirement.readonlyData) &&
        Objects.equals(this.operations, restRequirement.operations) &&
        Objects.equals(this.typeOfMatch, restRequirement.typeOfMatch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(self, id, key, matchValue, readonlyData, operations, typeOfMatch);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestRequirement {\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    matchValue: ").append(toIndentedString(matchValue)).append("\n");
    sb.append("    readonlyData: ").append(toIndentedString(readonlyData)).append("\n");
    sb.append("    operations: ").append(toIndentedString(operations)).append("\n");
    sb.append("    typeOfMatch: ").append(toIndentedString(typeOfMatch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

