/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.bamboo.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * StrSubstitutor
 */
@JsonPropertyOrder({
  StrSubstitutor.JSON_PROPERTY_ESCAPE_CHAR,
  StrSubstitutor.JSON_PROPERTY_VARIABLE_RESOLVER,
  StrSubstitutor.JSON_PROPERTY_ENABLE_SUBSTITUTION_IN_VARIABLES,
  StrSubstitutor.JSON_PROPERTY_VARIABLE_PREFIX_MATCHER,
  StrSubstitutor.JSON_PROPERTY_VARIABLE_PREFIX,
  StrSubstitutor.JSON_PROPERTY_VARIABLE_SUFFIX_MATCHER,
  StrSubstitutor.JSON_PROPERTY_VARIABLE_SUFFIX
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-08T20:39:31.812169500-07:00[America/Vancouver]")
public class StrSubstitutor implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ESCAPE_CHAR = "escapeChar";
  private String escapeChar;

  public static final String JSON_PROPERTY_VARIABLE_RESOLVER = "variableResolver";
  private JsonNullable<Object> variableResolver = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_ENABLE_SUBSTITUTION_IN_VARIABLES = "enableSubstitutionInVariables";
  private Boolean enableSubstitutionInVariables;

  public static final String JSON_PROPERTY_VARIABLE_PREFIX_MATCHER = "variablePrefixMatcher";
  private JsonNullable<Object> variablePrefixMatcher = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_VARIABLE_PREFIX = "variablePrefix";
  private StrSubstitutor variablePrefix;

  public static final String JSON_PROPERTY_VARIABLE_SUFFIX_MATCHER = "variableSuffixMatcher";
  private JsonNullable<Object> variableSuffixMatcher = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_VARIABLE_SUFFIX = "variableSuffix";
  private StrSubstitutor variableSuffix;

  public StrSubstitutor() { 
  }

  public StrSubstitutor escapeChar(String escapeChar) {
    this.escapeChar = escapeChar;
    return this;
  }

   /**
   * Get escapeChar
   * @return escapeChar
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ESCAPE_CHAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEscapeChar() {
    return escapeChar;
  }


  @JsonProperty(JSON_PROPERTY_ESCAPE_CHAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEscapeChar(String escapeChar) {
    this.escapeChar = escapeChar;
  }


  public StrSubstitutor variableResolver(Object variableResolver) {
    this.variableResolver = JsonNullable.<Object>of(variableResolver);
    return this;
  }

   /**
   * Get variableResolver
   * @return variableResolver
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonIgnore

  public Object getVariableResolver() {
        return variableResolver.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VARIABLE_RESOLVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getVariableResolver_JsonNullable() {
    return variableResolver;
  }
  
  @JsonProperty(JSON_PROPERTY_VARIABLE_RESOLVER)
  public void setVariableResolver_JsonNullable(JsonNullable<Object> variableResolver) {
    this.variableResolver = variableResolver;
  }

  public void setVariableResolver(Object variableResolver) {
    this.variableResolver = JsonNullable.<Object>of(variableResolver);
  }


  public StrSubstitutor enableSubstitutionInVariables(Boolean enableSubstitutionInVariables) {
    this.enableSubstitutionInVariables = enableSubstitutionInVariables;
    return this;
  }

   /**
   * Get enableSubstitutionInVariables
   * @return enableSubstitutionInVariables
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ENABLE_SUBSTITUTION_IN_VARIABLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableSubstitutionInVariables() {
    return enableSubstitutionInVariables;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_SUBSTITUTION_IN_VARIABLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableSubstitutionInVariables(Boolean enableSubstitutionInVariables) {
    this.enableSubstitutionInVariables = enableSubstitutionInVariables;
  }


  public StrSubstitutor variablePrefixMatcher(Object variablePrefixMatcher) {
    this.variablePrefixMatcher = JsonNullable.<Object>of(variablePrefixMatcher);
    return this;
  }

   /**
   * Get variablePrefixMatcher
   * @return variablePrefixMatcher
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonIgnore

  public Object getVariablePrefixMatcher() {
        return variablePrefixMatcher.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VARIABLE_PREFIX_MATCHER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getVariablePrefixMatcher_JsonNullable() {
    return variablePrefixMatcher;
  }
  
  @JsonProperty(JSON_PROPERTY_VARIABLE_PREFIX_MATCHER)
  public void setVariablePrefixMatcher_JsonNullable(JsonNullable<Object> variablePrefixMatcher) {
    this.variablePrefixMatcher = variablePrefixMatcher;
  }

  public void setVariablePrefixMatcher(Object variablePrefixMatcher) {
    this.variablePrefixMatcher = JsonNullable.<Object>of(variablePrefixMatcher);
  }


  public StrSubstitutor variablePrefix(StrSubstitutor variablePrefix) {
    this.variablePrefix = variablePrefix;
    return this;
  }

   /**
   * Get variablePrefix
   * @return variablePrefix
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_VARIABLE_PREFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StrSubstitutor getVariablePrefix() {
    return variablePrefix;
  }


  @JsonProperty(JSON_PROPERTY_VARIABLE_PREFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVariablePrefix(StrSubstitutor variablePrefix) {
    this.variablePrefix = variablePrefix;
  }


  public StrSubstitutor variableSuffixMatcher(Object variableSuffixMatcher) {
    this.variableSuffixMatcher = JsonNullable.<Object>of(variableSuffixMatcher);
    return this;
  }

   /**
   * Get variableSuffixMatcher
   * @return variableSuffixMatcher
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonIgnore

  public Object getVariableSuffixMatcher() {
        return variableSuffixMatcher.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VARIABLE_SUFFIX_MATCHER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getVariableSuffixMatcher_JsonNullable() {
    return variableSuffixMatcher;
  }
  
  @JsonProperty(JSON_PROPERTY_VARIABLE_SUFFIX_MATCHER)
  public void setVariableSuffixMatcher_JsonNullable(JsonNullable<Object> variableSuffixMatcher) {
    this.variableSuffixMatcher = variableSuffixMatcher;
  }

  public void setVariableSuffixMatcher(Object variableSuffixMatcher) {
    this.variableSuffixMatcher = JsonNullable.<Object>of(variableSuffixMatcher);
  }


  public StrSubstitutor variableSuffix(StrSubstitutor variableSuffix) {
    this.variableSuffix = variableSuffix;
    return this;
  }

   /**
   * Get variableSuffix
   * @return variableSuffix
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_VARIABLE_SUFFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StrSubstitutor getVariableSuffix() {
    return variableSuffix;
  }


  @JsonProperty(JSON_PROPERTY_VARIABLE_SUFFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVariableSuffix(StrSubstitutor variableSuffix) {
    this.variableSuffix = variableSuffix;
  }


  /**
   * Return true if this StrSubstitutor object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StrSubstitutor strSubstitutor = (StrSubstitutor) o;
    return Objects.equals(this.escapeChar, strSubstitutor.escapeChar) &&
        equalsNullable(this.variableResolver, strSubstitutor.variableResolver) &&
        Objects.equals(this.enableSubstitutionInVariables, strSubstitutor.enableSubstitutionInVariables) &&
        equalsNullable(this.variablePrefixMatcher, strSubstitutor.variablePrefixMatcher) &&
        Objects.equals(this.variablePrefix, strSubstitutor.variablePrefix) &&
        equalsNullable(this.variableSuffixMatcher, strSubstitutor.variableSuffixMatcher) &&
        Objects.equals(this.variableSuffix, strSubstitutor.variableSuffix);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(escapeChar, hashCodeNullable(variableResolver), enableSubstitutionInVariables, hashCodeNullable(variablePrefixMatcher), variablePrefix, hashCodeNullable(variableSuffixMatcher), variableSuffix);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StrSubstitutor {\n");
    sb.append("    escapeChar: ").append(toIndentedString(escapeChar)).append("\n");
    sb.append("    variableResolver: ").append(toIndentedString(variableResolver)).append("\n");
    sb.append("    enableSubstitutionInVariables: ").append(toIndentedString(enableSubstitutionInVariables)).append("\n");
    sb.append("    variablePrefixMatcher: ").append(toIndentedString(variablePrefixMatcher)).append("\n");
    sb.append("    variablePrefix: ").append(toIndentedString(variablePrefix)).append("\n");
    sb.append("    variableSuffixMatcher: ").append(toIndentedString(variableSuffixMatcher)).append("\n");
    sb.append("    variableSuffix: ").append(toIndentedString(variableSuffix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

