/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.bamboo.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.BambooEntityOid;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.BuildDefinition;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.BuildLogger;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.ImmutableArtifactDefinition;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.ImmutableArtifactSubscription;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.ImmutableChain;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.ImmutableChainStage;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.ImmutableResultsSummary;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.PlanKey;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.Project;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RequirementSet;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.TaskDefinition;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.VariableDefinition;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * ImmutableJob
 */
@JsonPropertyOrder({
  ImmutableJob.JSON_PROPERTY_REQUIREMENT_SET,
  ImmutableJob.JSON_PROPERTY_ENTITY_TYPE,
  ImmutableJob.JSON_PROPERTY_MASTER,
  ImmutableJob.JSON_PROPERTY_STAGE,
  ImmutableJob.JSON_PROPERTY_DIVERGENT,
  ImmutableJob.JSON_PROPERTY_ARTIFACT_DEFINITIONS,
  ImmutableJob.JSON_PROPERTY_ARTIFACT_SUBSCRIPTIONS,
  ImmutableJob.JSON_PROPERTY_EFFECTIVE_REQUIREMENT_SET,
  ImmutableJob.JSON_PROPERTY_PARENT,
  ImmutableJob.JSON_PROPERTY_MARKED_FOR_DELETION,
  ImmutableJob.JSON_PROPERTY_LATEST_RESULTS_SUMMARY,
  ImmutableJob.JSON_PROPERTY_BUILD_DEFINITION,
  ImmutableJob.JSON_PROPERTY_BUSY,
  ImmutableJob.JSON_PROPERTY_EXECUTING,
  ImmutableJob.JSON_PROPERTY_LABEL_NAMES,
  ImmutableJob.JSON_PROPERTY_CURRENT_STATUS,
  ImmutableJob.JSON_PROPERTY_BUILD_LOGGER,
  ImmutableJob.JSON_PROPERTY_FIRST_BUILD_NUMBER,
  ImmutableJob.JSON_PROPERTY_LAST_BUILD_NUMBER,
  ImmutableJob.JSON_PROPERTY_AVERAGE_BUILD_DURATION,
  ImmutableJob.JSON_PROPERTY_EFFECTIVE_VARIABLES,
  ImmutableJob.JSON_PROPERTY_PROJECT,
  ImmutableJob.JSON_PROPERTY_ACTIVE,
  ImmutableJob.JSON_PROPERTY_VARIABLES,
  ImmutableJob.JSON_PROPERTY_KEY,
  ImmutableJob.JSON_PROPERTY_TYPE,
  ImmutableJob.JSON_PROPERTY_BUILD_NAME,
  ImmutableJob.JSON_PROPERTY_BUILD_KEY,
  ImmutableJob.JSON_PROPERTY_PLAN_KEY,
  ImmutableJob.JSON_PROPERTY_PLAN_TYPE,
  ImmutableJob.JSON_PROPERTY_SUSPENDED_FROM_BUILDING,
  ImmutableJob.JSON_PROPERTY_MASTER_ID_IF_EXISTS,
  ImmutableJob.JSON_PROPERTY_MASTER_ID,
  ImmutableJob.JSON_PROPERTY_DATABASE_ID,
  ImmutableJob.JSON_PROPERTY_NAME,
  ImmutableJob.JSON_PROPERTY_ID,
  ImmutableJob.JSON_PROPERTY_DESCRIPTION,
  ImmutableJob.JSON_PROPERTY_OID,
  ImmutableJob.JSON_PROPERTY_TASK_DEFINITIONS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-08T20:39:31.812169500-07:00[America/Vancouver]")
public class ImmutableJob implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_REQUIREMENT_SET = "requirementSet";
  private RequirementSet requirementSet;

  /**
   * Gets or Sets entityType
   */
  public enum EntityTypeEnum {
    CHAIN("CHAIN"),
    
    STAGE("STAGE"),
    
    JOB("JOB"),
    
    REPOSITORY("REPOSITORY"),
    
    CHAIN_BRANCH("CHAIN_BRANCH"),
    
    JOB_BRANCH("JOB_BRANCH"),
    
    TASK("TASK"),
    
    PROJECT("PROJECT"),
    
    ARTIFACT_DEFINITION("ARTIFACT_DEFINITION"),
    
    DEPLOYMENT_PROJECT("DEPLOYMENT_PROJECT"),
    
    SHARED_CREDENTIAL("SHARED_CREDENTIAL");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ENTITY_TYPE = "entityType";
  private EntityTypeEnum entityType;

  public static final String JSON_PROPERTY_MASTER = "master";
  private ImmutableJob master;

  public static final String JSON_PROPERTY_STAGE = "stage";
  private ImmutableChainStage stage;

  public static final String JSON_PROPERTY_DIVERGENT = "divergent";
  private Boolean divergent;

  public static final String JSON_PROPERTY_ARTIFACT_DEFINITIONS = "artifactDefinitions";
  private List<ImmutableArtifactDefinition> artifactDefinitions;

  public static final String JSON_PROPERTY_ARTIFACT_SUBSCRIPTIONS = "artifactSubscriptions";
  private List<ImmutableArtifactSubscription> artifactSubscriptions;

  public static final String JSON_PROPERTY_EFFECTIVE_REQUIREMENT_SET = "effectiveRequirementSet";
  private RequirementSet effectiveRequirementSet;

  public static final String JSON_PROPERTY_PARENT = "parent";
  private ImmutableChain parent;

  public static final String JSON_PROPERTY_MARKED_FOR_DELETION = "markedForDeletion";
  private Boolean markedForDeletion;

  public static final String JSON_PROPERTY_LATEST_RESULTS_SUMMARY = "latestResultsSummary";
  private ImmutableResultsSummary latestResultsSummary;

  public static final String JSON_PROPERTY_BUILD_DEFINITION = "buildDefinition";
  private BuildDefinition buildDefinition;

  public static final String JSON_PROPERTY_BUSY = "busy";
  private Boolean busy;

  public static final String JSON_PROPERTY_EXECUTING = "executing";
  private Boolean executing;

  public static final String JSON_PROPERTY_LABEL_NAMES = "labelNames";
  private List<String> labelNames;

  public static final String JSON_PROPERTY_CURRENT_STATUS = "currentStatus";
  private String currentStatus;

  public static final String JSON_PROPERTY_BUILD_LOGGER = "buildLogger";
  private BuildLogger buildLogger;

  public static final String JSON_PROPERTY_FIRST_BUILD_NUMBER = "firstBuildNumber";
  private Integer firstBuildNumber;

  public static final String JSON_PROPERTY_LAST_BUILD_NUMBER = "lastBuildNumber";
  private Integer lastBuildNumber;

  public static final String JSON_PROPERTY_AVERAGE_BUILD_DURATION = "averageBuildDuration";
  private Long averageBuildDuration;

  public static final String JSON_PROPERTY_EFFECTIVE_VARIABLES = "effectiveVariables";
  private List<VariableDefinition> effectiveVariables;

  public static final String JSON_PROPERTY_PROJECT = "project";
  private Project project;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Boolean active;

  public static final String JSON_PROPERTY_VARIABLES = "variables";
  private List<VariableDefinition> variables;

  public static final String JSON_PROPERTY_KEY = "key";
  private String key;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_BUILD_NAME = "buildName";
  private String buildName;

  public static final String JSON_PROPERTY_BUILD_KEY = "buildKey";
  private String buildKey;

  public static final String JSON_PROPERTY_PLAN_KEY = "planKey";
  private PlanKey planKey;

  /**
   * Gets or Sets planType
   */
  public enum PlanTypeEnum {
    CHAIN("CHAIN"),
    
    JOB("JOB"),
    
    CHAIN_BRANCH("CHAIN_BRANCH");

    private String value;

    PlanTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PlanTypeEnum fromValue(String value) {
      for (PlanTypeEnum b : PlanTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PLAN_TYPE = "planType";
  private PlanTypeEnum planType;

  public static final String JSON_PROPERTY_SUSPENDED_FROM_BUILDING = "suspendedFromBuilding";
  private Boolean suspendedFromBuilding;

  public static final String JSON_PROPERTY_MASTER_ID_IF_EXISTS = "masterIdIfExists";
  private Long masterIdIfExists;

  public static final String JSON_PROPERTY_MASTER_ID = "masterId";
  private Long masterId;

  public static final String JSON_PROPERTY_DATABASE_ID = "databaseId";
  private Long databaseId;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_OID = "oid";
  private BambooEntityOid oid;

  public static final String JSON_PROPERTY_TASK_DEFINITIONS = "taskDefinitions";
  private List<TaskDefinition> taskDefinitions;

  public ImmutableJob() { 
  }

  public ImmutableJob requirementSet(RequirementSet requirementSet) {
    this.requirementSet = requirementSet;
    return this;
  }

   /**
   * Get requirementSet
   * @return requirementSet
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_REQUIREMENT_SET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RequirementSet getRequirementSet() {
    return requirementSet;
  }


  @JsonProperty(JSON_PROPERTY_REQUIREMENT_SET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequirementSet(RequirementSet requirementSet) {
    this.requirementSet = requirementSet;
  }


  public ImmutableJob entityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * Get entityType
   * @return entityType
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EntityTypeEnum getEntityType() {
    return entityType;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
  }


  public ImmutableJob master(ImmutableJob master) {
    this.master = master;
    return this;
  }

   /**
   * Get master
   * @return master
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MASTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ImmutableJob getMaster() {
    return master;
  }


  @JsonProperty(JSON_PROPERTY_MASTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaster(ImmutableJob master) {
    this.master = master;
  }


  public ImmutableJob stage(ImmutableChainStage stage) {
    this.stage = stage;
    return this;
  }

   /**
   * Get stage
   * @return stage
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_STAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ImmutableChainStage getStage() {
    return stage;
  }


  @JsonProperty(JSON_PROPERTY_STAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStage(ImmutableChainStage stage) {
    this.stage = stage;
  }


  public ImmutableJob divergent(Boolean divergent) {
    this.divergent = divergent;
    return this;
  }

   /**
   * Get divergent
   * @return divergent
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DIVERGENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDivergent() {
    return divergent;
  }


  @JsonProperty(JSON_PROPERTY_DIVERGENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDivergent(Boolean divergent) {
    this.divergent = divergent;
  }


  public ImmutableJob artifactDefinitions(List<ImmutableArtifactDefinition> artifactDefinitions) {
    this.artifactDefinitions = artifactDefinitions;
    return this;
  }

  public ImmutableJob addArtifactDefinitionsItem(ImmutableArtifactDefinition artifactDefinitionsItem) {
    if (this.artifactDefinitions == null) {
      this.artifactDefinitions = new ArrayList<>();
    }
    this.artifactDefinitions.add(artifactDefinitionsItem);
    return this;
  }

   /**
   * Get artifactDefinitions
   * @return artifactDefinitions
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ARTIFACT_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ImmutableArtifactDefinition> getArtifactDefinitions() {
    return artifactDefinitions;
  }


  @JsonProperty(JSON_PROPERTY_ARTIFACT_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArtifactDefinitions(List<ImmutableArtifactDefinition> artifactDefinitions) {
    this.artifactDefinitions = artifactDefinitions;
  }


  public ImmutableJob artifactSubscriptions(List<ImmutableArtifactSubscription> artifactSubscriptions) {
    this.artifactSubscriptions = artifactSubscriptions;
    return this;
  }

  public ImmutableJob addArtifactSubscriptionsItem(ImmutableArtifactSubscription artifactSubscriptionsItem) {
    if (this.artifactSubscriptions == null) {
      this.artifactSubscriptions = new ArrayList<>();
    }
    this.artifactSubscriptions.add(artifactSubscriptionsItem);
    return this;
  }

   /**
   * Get artifactSubscriptions
   * @return artifactSubscriptions
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ARTIFACT_SUBSCRIPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ImmutableArtifactSubscription> getArtifactSubscriptions() {
    return artifactSubscriptions;
  }


  @JsonProperty(JSON_PROPERTY_ARTIFACT_SUBSCRIPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArtifactSubscriptions(List<ImmutableArtifactSubscription> artifactSubscriptions) {
    this.artifactSubscriptions = artifactSubscriptions;
  }


  public ImmutableJob effectiveRequirementSet(RequirementSet effectiveRequirementSet) {
    this.effectiveRequirementSet = effectiveRequirementSet;
    return this;
  }

   /**
   * Get effectiveRequirementSet
   * @return effectiveRequirementSet
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_EFFECTIVE_REQUIREMENT_SET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RequirementSet getEffectiveRequirementSet() {
    return effectiveRequirementSet;
  }


  @JsonProperty(JSON_PROPERTY_EFFECTIVE_REQUIREMENT_SET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEffectiveRequirementSet(RequirementSet effectiveRequirementSet) {
    this.effectiveRequirementSet = effectiveRequirementSet;
  }


  public ImmutableJob parent(ImmutableChain parent) {
    this.parent = parent;
    return this;
  }

   /**
   * Get parent
   * @return parent
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PARENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ImmutableChain getParent() {
    return parent;
  }


  @JsonProperty(JSON_PROPERTY_PARENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParent(ImmutableChain parent) {
    this.parent = parent;
  }


  public ImmutableJob markedForDeletion(Boolean markedForDeletion) {
    this.markedForDeletion = markedForDeletion;
    return this;
  }

   /**
   * Get markedForDeletion
   * @return markedForDeletion
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MARKED_FOR_DELETION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getMarkedForDeletion() {
    return markedForDeletion;
  }


  @JsonProperty(JSON_PROPERTY_MARKED_FOR_DELETION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMarkedForDeletion(Boolean markedForDeletion) {
    this.markedForDeletion = markedForDeletion;
  }


  public ImmutableJob latestResultsSummary(ImmutableResultsSummary latestResultsSummary) {
    this.latestResultsSummary = latestResultsSummary;
    return this;
  }

   /**
   * Get latestResultsSummary
   * @return latestResultsSummary
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_LATEST_RESULTS_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ImmutableResultsSummary getLatestResultsSummary() {
    return latestResultsSummary;
  }


  @JsonProperty(JSON_PROPERTY_LATEST_RESULTS_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLatestResultsSummary(ImmutableResultsSummary latestResultsSummary) {
    this.latestResultsSummary = latestResultsSummary;
  }


  public ImmutableJob buildDefinition(BuildDefinition buildDefinition) {
    this.buildDefinition = buildDefinition;
    return this;
  }

   /**
   * Get buildDefinition
   * @return buildDefinition
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BUILD_DEFINITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BuildDefinition getBuildDefinition() {
    return buildDefinition;
  }


  @JsonProperty(JSON_PROPERTY_BUILD_DEFINITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildDefinition(BuildDefinition buildDefinition) {
    this.buildDefinition = buildDefinition;
  }


  public ImmutableJob busy(Boolean busy) {
    this.busy = busy;
    return this;
  }

   /**
   * Get busy
   * @return busy
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BUSY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getBusy() {
    return busy;
  }


  @JsonProperty(JSON_PROPERTY_BUSY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBusy(Boolean busy) {
    this.busy = busy;
  }


  public ImmutableJob executing(Boolean executing) {
    this.executing = executing;
    return this;
  }

   /**
   * Get executing
   * @return executing
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_EXECUTING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getExecuting() {
    return executing;
  }


  @JsonProperty(JSON_PROPERTY_EXECUTING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExecuting(Boolean executing) {
    this.executing = executing;
  }


  public ImmutableJob labelNames(List<String> labelNames) {
    this.labelNames = labelNames;
    return this;
  }

  public ImmutableJob addLabelNamesItem(String labelNamesItem) {
    if (this.labelNames == null) {
      this.labelNames = new ArrayList<>();
    }
    this.labelNames.add(labelNamesItem);
    return this;
  }

   /**
   * Get labelNames
   * @return labelNames
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_LABEL_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getLabelNames() {
    return labelNames;
  }


  @JsonProperty(JSON_PROPERTY_LABEL_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabelNames(List<String> labelNames) {
    this.labelNames = labelNames;
  }


  public ImmutableJob currentStatus(String currentStatus) {
    this.currentStatus = currentStatus;
    return this;
  }

   /**
   * Get currentStatus
   * @return currentStatus
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CURRENT_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrentStatus() {
    return currentStatus;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrentStatus(String currentStatus) {
    this.currentStatus = currentStatus;
  }


  public ImmutableJob buildLogger(BuildLogger buildLogger) {
    this.buildLogger = buildLogger;
    return this;
  }

   /**
   * Get buildLogger
   * @return buildLogger
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BUILD_LOGGER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BuildLogger getBuildLogger() {
    return buildLogger;
  }


  @JsonProperty(JSON_PROPERTY_BUILD_LOGGER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildLogger(BuildLogger buildLogger) {
    this.buildLogger = buildLogger;
  }


  public ImmutableJob firstBuildNumber(Integer firstBuildNumber) {
    this.firstBuildNumber = firstBuildNumber;
    return this;
  }

   /**
   * Get firstBuildNumber
   * @return firstBuildNumber
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_FIRST_BUILD_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFirstBuildNumber() {
    return firstBuildNumber;
  }


  @JsonProperty(JSON_PROPERTY_FIRST_BUILD_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFirstBuildNumber(Integer firstBuildNumber) {
    this.firstBuildNumber = firstBuildNumber;
  }


  public ImmutableJob lastBuildNumber(Integer lastBuildNumber) {
    this.lastBuildNumber = lastBuildNumber;
    return this;
  }

   /**
   * Get lastBuildNumber
   * @return lastBuildNumber
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_LAST_BUILD_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getLastBuildNumber() {
    return lastBuildNumber;
  }


  @JsonProperty(JSON_PROPERTY_LAST_BUILD_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastBuildNumber(Integer lastBuildNumber) {
    this.lastBuildNumber = lastBuildNumber;
  }


  public ImmutableJob averageBuildDuration(Long averageBuildDuration) {
    this.averageBuildDuration = averageBuildDuration;
    return this;
  }

   /**
   * Get averageBuildDuration
   * @return averageBuildDuration
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_AVERAGE_BUILD_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getAverageBuildDuration() {
    return averageBuildDuration;
  }


  @JsonProperty(JSON_PROPERTY_AVERAGE_BUILD_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAverageBuildDuration(Long averageBuildDuration) {
    this.averageBuildDuration = averageBuildDuration;
  }


  public ImmutableJob effectiveVariables(List<VariableDefinition> effectiveVariables) {
    this.effectiveVariables = effectiveVariables;
    return this;
  }

  public ImmutableJob addEffectiveVariablesItem(VariableDefinition effectiveVariablesItem) {
    if (this.effectiveVariables == null) {
      this.effectiveVariables = new ArrayList<>();
    }
    this.effectiveVariables.add(effectiveVariablesItem);
    return this;
  }

   /**
   * Get effectiveVariables
   * @return effectiveVariables
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_EFFECTIVE_VARIABLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<VariableDefinition> getEffectiveVariables() {
    return effectiveVariables;
  }


  @JsonProperty(JSON_PROPERTY_EFFECTIVE_VARIABLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEffectiveVariables(List<VariableDefinition> effectiveVariables) {
    this.effectiveVariables = effectiveVariables;
  }


  public ImmutableJob project(Project project) {
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PROJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Project getProject() {
    return project;
  }


  @JsonProperty(JSON_PROPERTY_PROJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProject(Project project) {
    this.project = project;
  }


  public ImmutableJob active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActive(Boolean active) {
    this.active = active;
  }


  public ImmutableJob variables(List<VariableDefinition> variables) {
    this.variables = variables;
    return this;
  }

  public ImmutableJob addVariablesItem(VariableDefinition variablesItem) {
    if (this.variables == null) {
      this.variables = new ArrayList<>();
    }
    this.variables.add(variablesItem);
    return this;
  }

   /**
   * Get variables
   * @return variables
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_VARIABLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<VariableDefinition> getVariables() {
    return variables;
  }


  @JsonProperty(JSON_PROPERTY_VARIABLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVariables(List<VariableDefinition> variables) {
    this.variables = variables;
  }


  public ImmutableJob key(String key) {
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKey(String key) {
    this.key = key;
  }


  public ImmutableJob type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }


  public ImmutableJob buildName(String buildName) {
    this.buildName = buildName;
    return this;
  }

   /**
   * Get buildName
   * @return buildName
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BUILD_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBuildName() {
    return buildName;
  }


  @JsonProperty(JSON_PROPERTY_BUILD_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildName(String buildName) {
    this.buildName = buildName;
  }


  public ImmutableJob buildKey(String buildKey) {
    this.buildKey = buildKey;
    return this;
  }

   /**
   * Get buildKey
   * @return buildKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BUILD_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBuildKey() {
    return buildKey;
  }


  @JsonProperty(JSON_PROPERTY_BUILD_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildKey(String buildKey) {
    this.buildKey = buildKey;
  }


  public ImmutableJob planKey(PlanKey planKey) {
    this.planKey = planKey;
    return this;
  }

   /**
   * Get planKey
   * @return planKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLAN_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PlanKey getPlanKey() {
    return planKey;
  }


  @JsonProperty(JSON_PROPERTY_PLAN_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlanKey(PlanKey planKey) {
    this.planKey = planKey;
  }


  public ImmutableJob planType(PlanTypeEnum planType) {
    this.planType = planType;
    return this;
  }

   /**
   * Get planType
   * @return planType
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLAN_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PlanTypeEnum getPlanType() {
    return planType;
  }


  @JsonProperty(JSON_PROPERTY_PLAN_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlanType(PlanTypeEnum planType) {
    this.planType = planType;
  }


  public ImmutableJob suspendedFromBuilding(Boolean suspendedFromBuilding) {
    this.suspendedFromBuilding = suspendedFromBuilding;
    return this;
  }

   /**
   * Get suspendedFromBuilding
   * @return suspendedFromBuilding
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SUSPENDED_FROM_BUILDING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSuspendedFromBuilding() {
    return suspendedFromBuilding;
  }


  @JsonProperty(JSON_PROPERTY_SUSPENDED_FROM_BUILDING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSuspendedFromBuilding(Boolean suspendedFromBuilding) {
    this.suspendedFromBuilding = suspendedFromBuilding;
  }


  public ImmutableJob masterIdIfExists(Long masterIdIfExists) {
    this.masterIdIfExists = masterIdIfExists;
    return this;
  }

   /**
   * Get masterIdIfExists
   * @return masterIdIfExists
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MASTER_ID_IF_EXISTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getMasterIdIfExists() {
    return masterIdIfExists;
  }


  @JsonProperty(JSON_PROPERTY_MASTER_ID_IF_EXISTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMasterIdIfExists(Long masterIdIfExists) {
    this.masterIdIfExists = masterIdIfExists;
  }


  public ImmutableJob masterId(Long masterId) {
    this.masterId = masterId;
    return this;
  }

   /**
   * Get masterId
   * @return masterId
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MASTER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getMasterId() {
    return masterId;
  }


  @JsonProperty(JSON_PROPERTY_MASTER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMasterId(Long masterId) {
    this.masterId = masterId;
  }


  public ImmutableJob databaseId(Long databaseId) {
    this.databaseId = databaseId;
    return this;
  }

   /**
   * Get databaseId
   * @return databaseId
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DATABASE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getDatabaseId() {
    return databaseId;
  }


  @JsonProperty(JSON_PROPERTY_DATABASE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDatabaseId(Long databaseId) {
    this.databaseId = databaseId;
  }


  public ImmutableJob name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public ImmutableJob id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  public ImmutableJob description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public ImmutableJob oid(BambooEntityOid oid) {
    this.oid = oid;
    return this;
  }

   /**
   * Get oid
   * @return oid
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_OID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BambooEntityOid getOid() {
    return oid;
  }


  @JsonProperty(JSON_PROPERTY_OID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOid(BambooEntityOid oid) {
    this.oid = oid;
  }


  public ImmutableJob taskDefinitions(List<TaskDefinition> taskDefinitions) {
    this.taskDefinitions = taskDefinitions;
    return this;
  }

  public ImmutableJob addTaskDefinitionsItem(TaskDefinition taskDefinitionsItem) {
    if (this.taskDefinitions == null) {
      this.taskDefinitions = new ArrayList<>();
    }
    this.taskDefinitions.add(taskDefinitionsItem);
    return this;
  }

   /**
   * Get taskDefinitions
   * @return taskDefinitions
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TASK_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<TaskDefinition> getTaskDefinitions() {
    return taskDefinitions;
  }


  @JsonProperty(JSON_PROPERTY_TASK_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaskDefinitions(List<TaskDefinition> taskDefinitions) {
    this.taskDefinitions = taskDefinitions;
  }


  /**
   * Return true if this ImmutableJob object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImmutableJob immutableJob = (ImmutableJob) o;
    return Objects.equals(this.requirementSet, immutableJob.requirementSet) &&
        Objects.equals(this.entityType, immutableJob.entityType) &&
        Objects.equals(this.master, immutableJob.master) &&
        Objects.equals(this.stage, immutableJob.stage) &&
        Objects.equals(this.divergent, immutableJob.divergent) &&
        Objects.equals(this.artifactDefinitions, immutableJob.artifactDefinitions) &&
        Objects.equals(this.artifactSubscriptions, immutableJob.artifactSubscriptions) &&
        Objects.equals(this.effectiveRequirementSet, immutableJob.effectiveRequirementSet) &&
        Objects.equals(this.parent, immutableJob.parent) &&
        Objects.equals(this.markedForDeletion, immutableJob.markedForDeletion) &&
        Objects.equals(this.latestResultsSummary, immutableJob.latestResultsSummary) &&
        Objects.equals(this.buildDefinition, immutableJob.buildDefinition) &&
        Objects.equals(this.busy, immutableJob.busy) &&
        Objects.equals(this.executing, immutableJob.executing) &&
        Objects.equals(this.labelNames, immutableJob.labelNames) &&
        Objects.equals(this.currentStatus, immutableJob.currentStatus) &&
        Objects.equals(this.buildLogger, immutableJob.buildLogger) &&
        Objects.equals(this.firstBuildNumber, immutableJob.firstBuildNumber) &&
        Objects.equals(this.lastBuildNumber, immutableJob.lastBuildNumber) &&
        Objects.equals(this.averageBuildDuration, immutableJob.averageBuildDuration) &&
        Objects.equals(this.effectiveVariables, immutableJob.effectiveVariables) &&
        Objects.equals(this.project, immutableJob.project) &&
        Objects.equals(this.active, immutableJob.active) &&
        Objects.equals(this.variables, immutableJob.variables) &&
        Objects.equals(this.key, immutableJob.key) &&
        Objects.equals(this.type, immutableJob.type) &&
        Objects.equals(this.buildName, immutableJob.buildName) &&
        Objects.equals(this.buildKey, immutableJob.buildKey) &&
        Objects.equals(this.planKey, immutableJob.planKey) &&
        Objects.equals(this.planType, immutableJob.planType) &&
        Objects.equals(this.suspendedFromBuilding, immutableJob.suspendedFromBuilding) &&
        Objects.equals(this.masterIdIfExists, immutableJob.masterIdIfExists) &&
        Objects.equals(this.masterId, immutableJob.masterId) &&
        Objects.equals(this.databaseId, immutableJob.databaseId) &&
        Objects.equals(this.name, immutableJob.name) &&
        Objects.equals(this.id, immutableJob.id) &&
        Objects.equals(this.description, immutableJob.description) &&
        Objects.equals(this.oid, immutableJob.oid) &&
        Objects.equals(this.taskDefinitions, immutableJob.taskDefinitions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requirementSet, entityType, master, stage, divergent, artifactDefinitions, artifactSubscriptions, effectiveRequirementSet, parent, markedForDeletion, latestResultsSummary, buildDefinition, busy, executing, labelNames, currentStatus, buildLogger, firstBuildNumber, lastBuildNumber, averageBuildDuration, effectiveVariables, project, active, variables, key, type, buildName, buildKey, planKey, planType, suspendedFromBuilding, masterIdIfExists, masterId, databaseId, name, id, description, oid, taskDefinitions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImmutableJob {\n");
    sb.append("    requirementSet: ").append(toIndentedString(requirementSet)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    master: ").append(toIndentedString(master)).append("\n");
    sb.append("    stage: ").append(toIndentedString(stage)).append("\n");
    sb.append("    divergent: ").append(toIndentedString(divergent)).append("\n");
    sb.append("    artifactDefinitions: ").append(toIndentedString(artifactDefinitions)).append("\n");
    sb.append("    artifactSubscriptions: ").append(toIndentedString(artifactSubscriptions)).append("\n");
    sb.append("    effectiveRequirementSet: ").append(toIndentedString(effectiveRequirementSet)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    markedForDeletion: ").append(toIndentedString(markedForDeletion)).append("\n");
    sb.append("    latestResultsSummary: ").append(toIndentedString(latestResultsSummary)).append("\n");
    sb.append("    buildDefinition: ").append(toIndentedString(buildDefinition)).append("\n");
    sb.append("    busy: ").append(toIndentedString(busy)).append("\n");
    sb.append("    executing: ").append(toIndentedString(executing)).append("\n");
    sb.append("    labelNames: ").append(toIndentedString(labelNames)).append("\n");
    sb.append("    currentStatus: ").append(toIndentedString(currentStatus)).append("\n");
    sb.append("    buildLogger: ").append(toIndentedString(buildLogger)).append("\n");
    sb.append("    firstBuildNumber: ").append(toIndentedString(firstBuildNumber)).append("\n");
    sb.append("    lastBuildNumber: ").append(toIndentedString(lastBuildNumber)).append("\n");
    sb.append("    averageBuildDuration: ").append(toIndentedString(averageBuildDuration)).append("\n");
    sb.append("    effectiveVariables: ").append(toIndentedString(effectiveVariables)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    buildName: ").append(toIndentedString(buildName)).append("\n");
    sb.append("    buildKey: ").append(toIndentedString(buildKey)).append("\n");
    sb.append("    planKey: ").append(toIndentedString(planKey)).append("\n");
    sb.append("    planType: ").append(toIndentedString(planType)).append("\n");
    sb.append("    suspendedFromBuilding: ").append(toIndentedString(suspendedFromBuilding)).append("\n");
    sb.append("    masterIdIfExists: ").append(toIndentedString(masterIdIfExists)).append("\n");
    sb.append("    masterId: ").append(toIndentedString(masterId)).append("\n");
    sb.append("    databaseId: ").append(toIndentedString(databaseId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    oid: ").append(toIndentedString(oid)).append("\n");
    sb.append("    taskDefinitions: ").append(toIndentedString(taskDefinitions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

