/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.bamboo.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.ArtifactLink;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.Author;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.ChainResultsSummary;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.Commit;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.ExtraBuildResultsData;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.FilteredTestResultsTestClassResult;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.ImmutableChain;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.ImmutablePlan;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.LinkedJiraIssue;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.PlanKey;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.PlanResultKey;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.TestResultsSummary;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.TriggerReason;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.VariableContextSnapshot;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.VariableSubstitution;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * BuildResultsSummary
 */
@JsonPropertyOrder({
  BuildResultsSummary.JSON_PROPERTY_CHAIN_RESULTS_SUMMARY,
  BuildResultsSummary.JSON_PROPERTY_FILTERED_TEST_RESULTS,
  BuildResultsSummary.JSON_PROPERTY_EXTRA_BUILD_RESULTS_DATA,
  BuildResultsSummary.JSON_PROPERTY_RESULT_VARIABLES,
  BuildResultsSummary.JSON_PROPERTY_VCS_UPDATE_TIME,
  BuildResultsSummary.JSON_PROPERTY_QUEUE_DURATION,
  BuildResultsSummary.JSON_PROPERTY_VCS_UPDATE_DURATION,
  BuildResultsSummary.JSON_PROPERTY_PRODUCED_ARTIFACT_LINKS,
  BuildResultsSummary.JSON_PROPERTY_BUILD_KEY,
  BuildResultsSummary.JSON_PROPERTY_BUILD_RESULT_KEY,
  BuildResultsSummary.JSON_PROPERTY_IMMUTABLE_PLAN,
  BuildResultsSummary.JSON_PROPERTY_DURATION,
  BuildResultsSummary.JSON_PROPERTY_RESTART_COUNT,
  BuildResultsSummary.JSON_PROPERTY_CUSTOM_BUILD,
  BuildResultsSummary.JSON_PROPERTY_REBUILD,
  BuildResultsSummary.JSON_PROPERTY_LOG_SIZE,
  BuildResultsSummary.JSON_PROPERTY_PROCESSING_DURATION,
  BuildResultsSummary.JSON_PROPERTY_BUILD_COMPLETED_DATE,
  BuildResultsSummary.JSON_PROPERTY_TRIGGER_REASON,
  BuildResultsSummary.JSON_PROPERTY_DELTA_STATE,
  BuildResultsSummary.JSON_PROPERTY_BUILD_CANCELLED_DATE,
  BuildResultsSummary.JSON_PROPERTY_TIME_TO_FIX,
  BuildResultsSummary.JSON_PROPERTY_TEST_RESULTS_SUMMARY,
  BuildResultsSummary.JSON_PROPERTY_BUILD_DATE,
  BuildResultsSummary.JSON_PROPERTY_QUEUE_TIME,
  BuildResultsSummary.JSON_PROPERTY_BUILD_AGENT_ID,
  BuildResultsSummary.JSON_PROPERTY_BUILD_AGENT_TYPE,
  BuildResultsSummary.JSON_PROPERTY_VARIABLE_CONTEXT_BASELINE_ID,
  BuildResultsSummary.JSON_PROPERTY_FORMAT_VERSION,
  BuildResultsSummary.JSON_PROPERTY_VARIABLE_CONTEXT_LOGS_ENCRYPTED,
  BuildResultsSummary.JSON_PROPERTY_SUBSTITUTED_VARIABLES_ENCRYPTED,
  BuildResultsSummary.JSON_PROPERTY_ONCE_OFF,
  BuildResultsSummary.JSON_PROPERTY_ID,
  BuildResultsSummary.JSON_PROPERTY_MARKED_FOR_DELETION,
  BuildResultsSummary.JSON_PROPERTY_PLAN_KEY,
  BuildResultsSummary.JSON_PROPERTY_PLAN_RESULT_KEY,
  BuildResultsSummary.JSON_PROPERTY_FAILED,
  BuildResultsSummary.JSON_PROPERTY_NOT_RUN_YET,
  BuildResultsSummary.JSON_PROPERTY_NOT_BUILT,
  BuildResultsSummary.JSON_PROPERTY_PLAN_NAME,
  BuildResultsSummary.JSON_PROPERTY_SUCCESSFUL,
  BuildResultsSummary.JSON_PROPERTY_LABEL_NAMES,
  BuildResultsSummary.JSON_PROPERTY_LIFE_CYCLE_STATE,
  BuildResultsSummary.JSON_PROPERTY_IN_PROGRESS,
  BuildResultsSummary.JSON_PROPERTY_PENDING,
  BuildResultsSummary.JSON_PROPERTY_QUEUED,
  BuildResultsSummary.JSON_PROPERTY_ACTIVE,
  BuildResultsSummary.JSON_PROPERTY_PLAN_IF_EXISTS,
  BuildResultsSummary.JSON_PROPERTY_DURATION_DESCRIPTION,
  BuildResultsSummary.JSON_PROPERTY_RELATIVE_BUILD_DATE,
  BuildResultsSummary.JSON_PROPERTY_REASON_SUMMARY,
  BuildResultsSummary.JSON_PROPERTY_FINISHED,
  BuildResultsSummary.JSON_PROPERTY_TEST_SUMMARY,
  BuildResultsSummary.JSON_PROPERTY_IMMUTABLE_CHAIN,
  BuildResultsSummary.JSON_PROPERTY_COMMITS,
  BuildResultsSummary.JSON_PROPERTY_WAITING,
  BuildResultsSummary.JSON_PROPERTY_CUSTOM_BUILD_DATA,
  BuildResultsSummary.JSON_PROPERTY_FIXING_JIRA_ISSUES,
  BuildResultsSummary.JSON_PROPERTY_RELATED_JIRA_ISSUES,
  BuildResultsSummary.JSON_PROPERTY_JIRA_ISSUE_KEYS,
  BuildResultsSummary.JSON_PROPERTY_UNIQUE_AUTHORS,
  BuildResultsSummary.JSON_PROPERTY_PROCESSING_DURATION_DESCRIPTION,
  BuildResultsSummary.JSON_PROPERTY_SHORT_REASON_SUMMARY,
  BuildResultsSummary.JSON_PROPERTY_RELATIVE_QUEUE_DATE,
  BuildResultsSummary.JSON_PROPERTY_RELATIVE_BUILD_STARTED_DATE,
  BuildResultsSummary.JSON_PROPERTY_BUILD_TIME,
  BuildResultsSummary.JSON_PROPERTY_ARTIFACT_LINKS,
  BuildResultsSummary.JSON_PROPERTY_ARTIFACT_LINKS_THAT_EXIST,
  BuildResultsSummary.JSON_PROPERTY_CHANGES_LIST_SUMMARY,
  BuildResultsSummary.JSON_PROPERTY_SUBSTITUTED_VARIABLES,
  BuildResultsSummary.JSON_PROPERTY_VARIABLE_CONTEXT_LOGS,
  BuildResultsSummary.JSON_PROPERTY_MANUALLY_OVERRIDDEN_VARIABLES,
  BuildResultsSummary.JSON_PROPERTY_FULL_PLAN_NAME,
  BuildResultsSummary.JSON_PROPERTY_JIRA_ISSUES,
  BuildResultsSummary.JSON_PROPERTY_STAT_DATE,
  BuildResultsSummary.JSON_PROPERTY_BUILD_NUMBER,
  BuildResultsSummary.JSON_PROPERTY_BUILD_STATE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-08T20:39:31.812169500-07:00[America/Vancouver]")
public class BuildResultsSummary implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_CHAIN_RESULTS_SUMMARY = "chainResultsSummary";
  private ChainResultsSummary chainResultsSummary;

  public static final String JSON_PROPERTY_FILTERED_TEST_RESULTS = "filteredTestResults";
  private FilteredTestResultsTestClassResult filteredTestResults;

  public static final String JSON_PROPERTY_EXTRA_BUILD_RESULTS_DATA = "extraBuildResultsData";
  private ExtraBuildResultsData extraBuildResultsData;

  public static final String JSON_PROPERTY_RESULT_VARIABLES = "resultVariables";
  private Object resultVariables;

  public static final String JSON_PROPERTY_VCS_UPDATE_TIME = "vcsUpdateTime";
  private Date vcsUpdateTime;

  public static final String JSON_PROPERTY_QUEUE_DURATION = "queueDuration";
  private Long queueDuration;

  public static final String JSON_PROPERTY_VCS_UPDATE_DURATION = "vcsUpdateDuration";
  private Long vcsUpdateDuration;

  public static final String JSON_PROPERTY_PRODUCED_ARTIFACT_LINKS = "producedArtifactLinks";
  private List<ArtifactLink> producedArtifactLinks;

  public static final String JSON_PROPERTY_BUILD_KEY = "buildKey";
  private String buildKey;

  public static final String JSON_PROPERTY_BUILD_RESULT_KEY = "buildResultKey";
  private String buildResultKey;

  public static final String JSON_PROPERTY_IMMUTABLE_PLAN = "immutablePlan";
  private ImmutablePlan immutablePlan;

  public static final String JSON_PROPERTY_DURATION = "duration";
  private Long duration;

  public static final String JSON_PROPERTY_RESTART_COUNT = "restartCount";
  private Integer restartCount;

  public static final String JSON_PROPERTY_CUSTOM_BUILD = "customBuild";
  private Boolean customBuild;

  public static final String JSON_PROPERTY_REBUILD = "rebuild";
  private Boolean rebuild;

  public static final String JSON_PROPERTY_LOG_SIZE = "logSize";
  private Long logSize;

  public static final String JSON_PROPERTY_PROCESSING_DURATION = "processingDuration";
  private Long processingDuration;

  public static final String JSON_PROPERTY_BUILD_COMPLETED_DATE = "buildCompletedDate";
  private Date buildCompletedDate;

  public static final String JSON_PROPERTY_TRIGGER_REASON = "triggerReason";
  private TriggerReason triggerReason;

  /**
   * Gets or Sets deltaState
   */
  public enum DeltaStateEnum {
    NONE("NONE"),
    
    PASSING("PASSING"),
    
    FAILING("FAILING"),
    
    BROKEN("BROKEN"),
    
    FIXED("FIXED");

    private String value;

    DeltaStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DeltaStateEnum fromValue(String value) {
      for (DeltaStateEnum b : DeltaStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DELTA_STATE = "deltaState";
  private DeltaStateEnum deltaState;

  public static final String JSON_PROPERTY_BUILD_CANCELLED_DATE = "buildCancelledDate";
  private Date buildCancelledDate;

  public static final String JSON_PROPERTY_TIME_TO_FIX = "timeToFix";
  private Long timeToFix;

  public static final String JSON_PROPERTY_TEST_RESULTS_SUMMARY = "testResultsSummary";
  private TestResultsSummary testResultsSummary;

  public static final String JSON_PROPERTY_BUILD_DATE = "buildDate";
  private Date buildDate;

  public static final String JSON_PROPERTY_QUEUE_TIME = "queueTime";
  private Date queueTime;

  public static final String JSON_PROPERTY_BUILD_AGENT_ID = "buildAgentId";
  private Long buildAgentId;

  /**
   * Gets or Sets buildAgentType
   */
  public enum BuildAgentTypeEnum {
    LOCAL("LOCAL"),
    
    REMOTE("REMOTE"),
    
    ELASTIC("ELASTIC"),
    
    EPHEMERAL("EPHEMERAL");

    private String value;

    BuildAgentTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static BuildAgentTypeEnum fromValue(String value) {
      for (BuildAgentTypeEnum b : BuildAgentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_BUILD_AGENT_TYPE = "buildAgentType";
  private BuildAgentTypeEnum buildAgentType;

  public static final String JSON_PROPERTY_VARIABLE_CONTEXT_BASELINE_ID = "variableContextBaselineId";
  private Long variableContextBaselineId;

  public static final String JSON_PROPERTY_FORMAT_VERSION = "formatVersion";
  private Integer formatVersion;

  public static final String JSON_PROPERTY_VARIABLE_CONTEXT_LOGS_ENCRYPTED = "variableContextLogsEncrypted";
  private List<VariableContextSnapshot> variableContextLogsEncrypted;

  public static final String JSON_PROPERTY_SUBSTITUTED_VARIABLES_ENCRYPTED = "substitutedVariablesEncrypted";
  private List<VariableSubstitution> substitutedVariablesEncrypted;

  public static final String JSON_PROPERTY_ONCE_OFF = "onceOff";
  private Boolean onceOff;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_MARKED_FOR_DELETION = "markedForDeletion";
  private Boolean markedForDeletion;

  public static final String JSON_PROPERTY_PLAN_KEY = "planKey";
  private PlanKey planKey;

  public static final String JSON_PROPERTY_PLAN_RESULT_KEY = "planResultKey";
  private PlanResultKey planResultKey;

  public static final String JSON_PROPERTY_FAILED = "failed";
  private Boolean failed;

  public static final String JSON_PROPERTY_NOT_RUN_YET = "notRunYet";
  private Boolean notRunYet;

  public static final String JSON_PROPERTY_NOT_BUILT = "notBuilt";
  private Boolean notBuilt;

  public static final String JSON_PROPERTY_PLAN_NAME = "planName";
  private String planName;

  public static final String JSON_PROPERTY_SUCCESSFUL = "successful";
  private Boolean successful;

  public static final String JSON_PROPERTY_LABEL_NAMES = "labelNames";
  private List<String> labelNames;

  /**
   * Gets or Sets lifeCycleState
   */
  public enum LifeCycleStateEnum {
    PENDING("Pending"),
    
    QUEUED("Queued"),
    
    INPROGRESS("InProgress"),
    
    FINISHED("Finished"),
    
    NOTBUILT("NotBuilt");

    private String value;

    LifeCycleStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LifeCycleStateEnum fromValue(String value) {
      for (LifeCycleStateEnum b : LifeCycleStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_LIFE_CYCLE_STATE = "lifeCycleState";
  private LifeCycleStateEnum lifeCycleState;

  public static final String JSON_PROPERTY_IN_PROGRESS = "inProgress";
  private Boolean inProgress;

  public static final String JSON_PROPERTY_PENDING = "pending";
  private Boolean pending;

  public static final String JSON_PROPERTY_QUEUED = "queued";
  private Boolean queued;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Boolean active;

  public static final String JSON_PROPERTY_PLAN_IF_EXISTS = "planIfExists";
  private ImmutablePlan planIfExists;

  public static final String JSON_PROPERTY_DURATION_DESCRIPTION = "durationDescription";
  private String durationDescription;

  public static final String JSON_PROPERTY_RELATIVE_BUILD_DATE = "relativeBuildDate";
  private String relativeBuildDate;

  public static final String JSON_PROPERTY_REASON_SUMMARY = "reasonSummary";
  private String reasonSummary;

  public static final String JSON_PROPERTY_FINISHED = "finished";
  private Boolean finished;

  public static final String JSON_PROPERTY_TEST_SUMMARY = "testSummary";
  private String testSummary;

  public static final String JSON_PROPERTY_IMMUTABLE_CHAIN = "immutableChain";
  private ImmutableChain immutableChain;

  public static final String JSON_PROPERTY_COMMITS = "commits";
  private List<Commit> commits;

  public static final String JSON_PROPERTY_WAITING = "waiting";
  private Boolean waiting;

  public static final String JSON_PROPERTY_CUSTOM_BUILD_DATA = "customBuildData";
  private Object customBuildData;

  public static final String JSON_PROPERTY_FIXING_JIRA_ISSUES = "fixingJiraIssues";
  private Set<LinkedJiraIssue> fixingJiraIssues;

  public static final String JSON_PROPERTY_RELATED_JIRA_ISSUES = "relatedJiraIssues";
  private Set<LinkedJiraIssue> relatedJiraIssues;

  public static final String JSON_PROPERTY_JIRA_ISSUE_KEYS = "jiraIssueKeys";
  private Set<String> jiraIssueKeys;

  public static final String JSON_PROPERTY_UNIQUE_AUTHORS = "uniqueAuthors";
  private Set<Author> uniqueAuthors;

  public static final String JSON_PROPERTY_PROCESSING_DURATION_DESCRIPTION = "processingDurationDescription";
  private String processingDurationDescription;

  public static final String JSON_PROPERTY_SHORT_REASON_SUMMARY = "shortReasonSummary";
  private String shortReasonSummary;

  public static final String JSON_PROPERTY_RELATIVE_QUEUE_DATE = "relativeQueueDate";
  private String relativeQueueDate;

  public static final String JSON_PROPERTY_RELATIVE_BUILD_STARTED_DATE = "relativeBuildStartedDate";
  private String relativeBuildStartedDate;

  public static final String JSON_PROPERTY_BUILD_TIME = "buildTime";
  private String buildTime;

  public static final String JSON_PROPERTY_ARTIFACT_LINKS = "artifactLinks";
  private List<ArtifactLink> artifactLinks;

  public static final String JSON_PROPERTY_ARTIFACT_LINKS_THAT_EXIST = "artifactLinksThatExist";
  private List<ArtifactLink> artifactLinksThatExist;

  public static final String JSON_PROPERTY_CHANGES_LIST_SUMMARY = "changesListSummary";
  private String changesListSummary;

  public static final String JSON_PROPERTY_SUBSTITUTED_VARIABLES = "substitutedVariables";
  private List<VariableSubstitution> substitutedVariables;

  public static final String JSON_PROPERTY_VARIABLE_CONTEXT_LOGS = "variableContextLogs";
  private List<VariableContextSnapshot> variableContextLogs;

  public static final String JSON_PROPERTY_MANUALLY_OVERRIDDEN_VARIABLES = "manuallyOverriddenVariables";
  private List<VariableSubstitution> manuallyOverriddenVariables;

  public static final String JSON_PROPERTY_FULL_PLAN_NAME = "fullPlanName";
  private String fullPlanName;

  public static final String JSON_PROPERTY_JIRA_ISSUES = "jiraIssues";
  private Set<LinkedJiraIssue> jiraIssues;

  public static final String JSON_PROPERTY_STAT_DATE = "statDate";
  private Date statDate;

  public static final String JSON_PROPERTY_BUILD_NUMBER = "buildNumber";
  private Integer buildNumber;

  /**
   * Gets or Sets buildState
   */
  public enum BuildStateEnum {
    UNKNOWN("Unknown"),
    
    SUCCESSFUL("Successful"),
    
    FAILED("Failed");

    private String value;

    BuildStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static BuildStateEnum fromValue(String value) {
      for (BuildStateEnum b : BuildStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_BUILD_STATE = "buildState";
  private BuildStateEnum buildState;

  public BuildResultsSummary() { 
  }

  public BuildResultsSummary chainResultsSummary(ChainResultsSummary chainResultsSummary) {
    this.chainResultsSummary = chainResultsSummary;
    return this;
  }

   /**
   * Get chainResultsSummary
   * @return chainResultsSummary
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CHAIN_RESULTS_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ChainResultsSummary getChainResultsSummary() {
    return chainResultsSummary;
  }


  @JsonProperty(JSON_PROPERTY_CHAIN_RESULTS_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChainResultsSummary(ChainResultsSummary chainResultsSummary) {
    this.chainResultsSummary = chainResultsSummary;
  }


  public BuildResultsSummary filteredTestResults(FilteredTestResultsTestClassResult filteredTestResults) {
    this.filteredTestResults = filteredTestResults;
    return this;
  }

   /**
   * Get filteredTestResults
   * @return filteredTestResults
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_FILTERED_TEST_RESULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FilteredTestResultsTestClassResult getFilteredTestResults() {
    return filteredTestResults;
  }


  @JsonProperty(JSON_PROPERTY_FILTERED_TEST_RESULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilteredTestResults(FilteredTestResultsTestClassResult filteredTestResults) {
    this.filteredTestResults = filteredTestResults;
  }


  public BuildResultsSummary extraBuildResultsData(ExtraBuildResultsData extraBuildResultsData) {
    this.extraBuildResultsData = extraBuildResultsData;
    return this;
  }

   /**
   * Get extraBuildResultsData
   * @return extraBuildResultsData
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_EXTRA_BUILD_RESULTS_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExtraBuildResultsData getExtraBuildResultsData() {
    return extraBuildResultsData;
  }


  @JsonProperty(JSON_PROPERTY_EXTRA_BUILD_RESULTS_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtraBuildResultsData(ExtraBuildResultsData extraBuildResultsData) {
    this.extraBuildResultsData = extraBuildResultsData;
  }


  public BuildResultsSummary resultVariables(Object resultVariables) {
    this.resultVariables = resultVariables;
    return this;
  }

   /**
   * Get resultVariables
   * @return resultVariables
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_RESULT_VARIABLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getResultVariables() {
    return resultVariables;
  }


  @JsonProperty(JSON_PROPERTY_RESULT_VARIABLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResultVariables(Object resultVariables) {
    this.resultVariables = resultVariables;
  }


  public BuildResultsSummary vcsUpdateTime(Date vcsUpdateTime) {
    this.vcsUpdateTime = vcsUpdateTime;
    return this;
  }

   /**
   * Get vcsUpdateTime
   * @return vcsUpdateTime
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_VCS_UPDATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Date getVcsUpdateTime() {
    return vcsUpdateTime;
  }


  @JsonProperty(JSON_PROPERTY_VCS_UPDATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVcsUpdateTime(Date vcsUpdateTime) {
    this.vcsUpdateTime = vcsUpdateTime;
  }


  public BuildResultsSummary queueDuration(Long queueDuration) {
    this.queueDuration = queueDuration;
    return this;
  }

   /**
   * Get queueDuration
   * @return queueDuration
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_QUEUE_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getQueueDuration() {
    return queueDuration;
  }


  @JsonProperty(JSON_PROPERTY_QUEUE_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQueueDuration(Long queueDuration) {
    this.queueDuration = queueDuration;
  }


  public BuildResultsSummary vcsUpdateDuration(Long vcsUpdateDuration) {
    this.vcsUpdateDuration = vcsUpdateDuration;
    return this;
  }

   /**
   * Get vcsUpdateDuration
   * @return vcsUpdateDuration
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_VCS_UPDATE_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getVcsUpdateDuration() {
    return vcsUpdateDuration;
  }


  @JsonProperty(JSON_PROPERTY_VCS_UPDATE_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVcsUpdateDuration(Long vcsUpdateDuration) {
    this.vcsUpdateDuration = vcsUpdateDuration;
  }


  public BuildResultsSummary producedArtifactLinks(List<ArtifactLink> producedArtifactLinks) {
    this.producedArtifactLinks = producedArtifactLinks;
    return this;
  }

  public BuildResultsSummary addProducedArtifactLinksItem(ArtifactLink producedArtifactLinksItem) {
    if (this.producedArtifactLinks == null) {
      this.producedArtifactLinks = new ArrayList<>();
    }
    this.producedArtifactLinks.add(producedArtifactLinksItem);
    return this;
  }

   /**
   * Get producedArtifactLinks
   * @return producedArtifactLinks
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PRODUCED_ARTIFACT_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ArtifactLink> getProducedArtifactLinks() {
    return producedArtifactLinks;
  }


  @JsonProperty(JSON_PROPERTY_PRODUCED_ARTIFACT_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProducedArtifactLinks(List<ArtifactLink> producedArtifactLinks) {
    this.producedArtifactLinks = producedArtifactLinks;
  }


  public BuildResultsSummary buildKey(String buildKey) {
    this.buildKey = buildKey;
    return this;
  }

   /**
   * Get buildKey
   * @return buildKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BUILD_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBuildKey() {
    return buildKey;
  }


  @JsonProperty(JSON_PROPERTY_BUILD_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildKey(String buildKey) {
    this.buildKey = buildKey;
  }


  public BuildResultsSummary buildResultKey(String buildResultKey) {
    this.buildResultKey = buildResultKey;
    return this;
  }

   /**
   * Get buildResultKey
   * @return buildResultKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BUILD_RESULT_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBuildResultKey() {
    return buildResultKey;
  }


  @JsonProperty(JSON_PROPERTY_BUILD_RESULT_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildResultKey(String buildResultKey) {
    this.buildResultKey = buildResultKey;
  }


  public BuildResultsSummary immutablePlan(ImmutablePlan immutablePlan) {
    this.immutablePlan = immutablePlan;
    return this;
  }

   /**
   * Get immutablePlan
   * @return immutablePlan
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_IMMUTABLE_PLAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ImmutablePlan getImmutablePlan() {
    return immutablePlan;
  }


  @JsonProperty(JSON_PROPERTY_IMMUTABLE_PLAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImmutablePlan(ImmutablePlan immutablePlan) {
    this.immutablePlan = immutablePlan;
  }


  public BuildResultsSummary duration(Long duration) {
    this.duration = duration;
    return this;
  }

   /**
   * Get duration
   * @return duration
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getDuration() {
    return duration;
  }


  @JsonProperty(JSON_PROPERTY_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDuration(Long duration) {
    this.duration = duration;
  }


  public BuildResultsSummary restartCount(Integer restartCount) {
    this.restartCount = restartCount;
    return this;
  }

   /**
   * Get restartCount
   * @return restartCount
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_RESTART_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getRestartCount() {
    return restartCount;
  }


  @JsonProperty(JSON_PROPERTY_RESTART_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRestartCount(Integer restartCount) {
    this.restartCount = restartCount;
  }


  public BuildResultsSummary customBuild(Boolean customBuild) {
    this.customBuild = customBuild;
    return this;
  }

   /**
   * Get customBuild
   * @return customBuild
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CUSTOM_BUILD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCustomBuild() {
    return customBuild;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOM_BUILD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomBuild(Boolean customBuild) {
    this.customBuild = customBuild;
  }


  public BuildResultsSummary rebuild(Boolean rebuild) {
    this.rebuild = rebuild;
    return this;
  }

   /**
   * Get rebuild
   * @return rebuild
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_REBUILD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRebuild() {
    return rebuild;
  }


  @JsonProperty(JSON_PROPERTY_REBUILD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRebuild(Boolean rebuild) {
    this.rebuild = rebuild;
  }


  public BuildResultsSummary logSize(Long logSize) {
    this.logSize = logSize;
    return this;
  }

   /**
   * Get logSize
   * @return logSize
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_LOG_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getLogSize() {
    return logSize;
  }


  @JsonProperty(JSON_PROPERTY_LOG_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogSize(Long logSize) {
    this.logSize = logSize;
  }


  public BuildResultsSummary processingDuration(Long processingDuration) {
    this.processingDuration = processingDuration;
    return this;
  }

   /**
   * Get processingDuration
   * @return processingDuration
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PROCESSING_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getProcessingDuration() {
    return processingDuration;
  }


  @JsonProperty(JSON_PROPERTY_PROCESSING_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessingDuration(Long processingDuration) {
    this.processingDuration = processingDuration;
  }


  public BuildResultsSummary buildCompletedDate(Date buildCompletedDate) {
    this.buildCompletedDate = buildCompletedDate;
    return this;
  }

   /**
   * Get buildCompletedDate
   * @return buildCompletedDate
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BUILD_COMPLETED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Date getBuildCompletedDate() {
    return buildCompletedDate;
  }


  @JsonProperty(JSON_PROPERTY_BUILD_COMPLETED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildCompletedDate(Date buildCompletedDate) {
    this.buildCompletedDate = buildCompletedDate;
  }


  public BuildResultsSummary triggerReason(TriggerReason triggerReason) {
    this.triggerReason = triggerReason;
    return this;
  }

   /**
   * Get triggerReason
   * @return triggerReason
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TRIGGER_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TriggerReason getTriggerReason() {
    return triggerReason;
  }


  @JsonProperty(JSON_PROPERTY_TRIGGER_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTriggerReason(TriggerReason triggerReason) {
    this.triggerReason = triggerReason;
  }


  public BuildResultsSummary deltaState(DeltaStateEnum deltaState) {
    this.deltaState = deltaState;
    return this;
  }

   /**
   * Get deltaState
   * @return deltaState
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DELTA_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DeltaStateEnum getDeltaState() {
    return deltaState;
  }


  @JsonProperty(JSON_PROPERTY_DELTA_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeltaState(DeltaStateEnum deltaState) {
    this.deltaState = deltaState;
  }


  public BuildResultsSummary buildCancelledDate(Date buildCancelledDate) {
    this.buildCancelledDate = buildCancelledDate;
    return this;
  }

   /**
   * Get buildCancelledDate
   * @return buildCancelledDate
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BUILD_CANCELLED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Date getBuildCancelledDate() {
    return buildCancelledDate;
  }


  @JsonProperty(JSON_PROPERTY_BUILD_CANCELLED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildCancelledDate(Date buildCancelledDate) {
    this.buildCancelledDate = buildCancelledDate;
  }


  public BuildResultsSummary timeToFix(Long timeToFix) {
    this.timeToFix = timeToFix;
    return this;
  }

   /**
   * Get timeToFix
   * @return timeToFix
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TIME_TO_FIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getTimeToFix() {
    return timeToFix;
  }


  @JsonProperty(JSON_PROPERTY_TIME_TO_FIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeToFix(Long timeToFix) {
    this.timeToFix = timeToFix;
  }


  public BuildResultsSummary testResultsSummary(TestResultsSummary testResultsSummary) {
    this.testResultsSummary = testResultsSummary;
    return this;
  }

   /**
   * Get testResultsSummary
   * @return testResultsSummary
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TEST_RESULTS_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TestResultsSummary getTestResultsSummary() {
    return testResultsSummary;
  }


  @JsonProperty(JSON_PROPERTY_TEST_RESULTS_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTestResultsSummary(TestResultsSummary testResultsSummary) {
    this.testResultsSummary = testResultsSummary;
  }


  public BuildResultsSummary buildDate(Date buildDate) {
    this.buildDate = buildDate;
    return this;
  }

   /**
   * Get buildDate
   * @return buildDate
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BUILD_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Date getBuildDate() {
    return buildDate;
  }


  @JsonProperty(JSON_PROPERTY_BUILD_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildDate(Date buildDate) {
    this.buildDate = buildDate;
  }


  public BuildResultsSummary queueTime(Date queueTime) {
    this.queueTime = queueTime;
    return this;
  }

   /**
   * Get queueTime
   * @return queueTime
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_QUEUE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Date getQueueTime() {
    return queueTime;
  }


  @JsonProperty(JSON_PROPERTY_QUEUE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQueueTime(Date queueTime) {
    this.queueTime = queueTime;
  }


  public BuildResultsSummary buildAgentId(Long buildAgentId) {
    this.buildAgentId = buildAgentId;
    return this;
  }

   /**
   * Get buildAgentId
   * @return buildAgentId
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BUILD_AGENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getBuildAgentId() {
    return buildAgentId;
  }


  @JsonProperty(JSON_PROPERTY_BUILD_AGENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildAgentId(Long buildAgentId) {
    this.buildAgentId = buildAgentId;
  }


  public BuildResultsSummary buildAgentType(BuildAgentTypeEnum buildAgentType) {
    this.buildAgentType = buildAgentType;
    return this;
  }

   /**
   * Get buildAgentType
   * @return buildAgentType
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BUILD_AGENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BuildAgentTypeEnum getBuildAgentType() {
    return buildAgentType;
  }


  @JsonProperty(JSON_PROPERTY_BUILD_AGENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildAgentType(BuildAgentTypeEnum buildAgentType) {
    this.buildAgentType = buildAgentType;
  }


  public BuildResultsSummary variableContextBaselineId(Long variableContextBaselineId) {
    this.variableContextBaselineId = variableContextBaselineId;
    return this;
  }

   /**
   * Get variableContextBaselineId
   * @return variableContextBaselineId
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_VARIABLE_CONTEXT_BASELINE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getVariableContextBaselineId() {
    return variableContextBaselineId;
  }


  @JsonProperty(JSON_PROPERTY_VARIABLE_CONTEXT_BASELINE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVariableContextBaselineId(Long variableContextBaselineId) {
    this.variableContextBaselineId = variableContextBaselineId;
  }


  public BuildResultsSummary formatVersion(Integer formatVersion) {
    this.formatVersion = formatVersion;
    return this;
  }

   /**
   * Get formatVersion
   * @return formatVersion
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_FORMAT_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFormatVersion() {
    return formatVersion;
  }


  @JsonProperty(JSON_PROPERTY_FORMAT_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFormatVersion(Integer formatVersion) {
    this.formatVersion = formatVersion;
  }


  public BuildResultsSummary variableContextLogsEncrypted(List<VariableContextSnapshot> variableContextLogsEncrypted) {
    this.variableContextLogsEncrypted = variableContextLogsEncrypted;
    return this;
  }

  public BuildResultsSummary addVariableContextLogsEncryptedItem(VariableContextSnapshot variableContextLogsEncryptedItem) {
    if (this.variableContextLogsEncrypted == null) {
      this.variableContextLogsEncrypted = new ArrayList<>();
    }
    this.variableContextLogsEncrypted.add(variableContextLogsEncryptedItem);
    return this;
  }

   /**
   * Get variableContextLogsEncrypted
   * @return variableContextLogsEncrypted
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_VARIABLE_CONTEXT_LOGS_ENCRYPTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<VariableContextSnapshot> getVariableContextLogsEncrypted() {
    return variableContextLogsEncrypted;
  }


  @JsonProperty(JSON_PROPERTY_VARIABLE_CONTEXT_LOGS_ENCRYPTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVariableContextLogsEncrypted(List<VariableContextSnapshot> variableContextLogsEncrypted) {
    this.variableContextLogsEncrypted = variableContextLogsEncrypted;
  }


  public BuildResultsSummary substitutedVariablesEncrypted(List<VariableSubstitution> substitutedVariablesEncrypted) {
    this.substitutedVariablesEncrypted = substitutedVariablesEncrypted;
    return this;
  }

  public BuildResultsSummary addSubstitutedVariablesEncryptedItem(VariableSubstitution substitutedVariablesEncryptedItem) {
    if (this.substitutedVariablesEncrypted == null) {
      this.substitutedVariablesEncrypted = new ArrayList<>();
    }
    this.substitutedVariablesEncrypted.add(substitutedVariablesEncryptedItem);
    return this;
  }

   /**
   * Get substitutedVariablesEncrypted
   * @return substitutedVariablesEncrypted
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SUBSTITUTED_VARIABLES_ENCRYPTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<VariableSubstitution> getSubstitutedVariablesEncrypted() {
    return substitutedVariablesEncrypted;
  }


  @JsonProperty(JSON_PROPERTY_SUBSTITUTED_VARIABLES_ENCRYPTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubstitutedVariablesEncrypted(List<VariableSubstitution> substitutedVariablesEncrypted) {
    this.substitutedVariablesEncrypted = substitutedVariablesEncrypted;
  }


  public BuildResultsSummary onceOff(Boolean onceOff) {
    this.onceOff = onceOff;
    return this;
  }

   /**
   * Get onceOff
   * @return onceOff
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ONCE_OFF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getOnceOff() {
    return onceOff;
  }


  @JsonProperty(JSON_PROPERTY_ONCE_OFF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOnceOff(Boolean onceOff) {
    this.onceOff = onceOff;
  }


  public BuildResultsSummary id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  public BuildResultsSummary markedForDeletion(Boolean markedForDeletion) {
    this.markedForDeletion = markedForDeletion;
    return this;
  }

   /**
   * Get markedForDeletion
   * @return markedForDeletion
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MARKED_FOR_DELETION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getMarkedForDeletion() {
    return markedForDeletion;
  }


  @JsonProperty(JSON_PROPERTY_MARKED_FOR_DELETION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMarkedForDeletion(Boolean markedForDeletion) {
    this.markedForDeletion = markedForDeletion;
  }


  public BuildResultsSummary planKey(PlanKey planKey) {
    this.planKey = planKey;
    return this;
  }

   /**
   * Get planKey
   * @return planKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLAN_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PlanKey getPlanKey() {
    return planKey;
  }


  @JsonProperty(JSON_PROPERTY_PLAN_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlanKey(PlanKey planKey) {
    this.planKey = planKey;
  }


  public BuildResultsSummary planResultKey(PlanResultKey planResultKey) {
    this.planResultKey = planResultKey;
    return this;
  }

   /**
   * Get planResultKey
   * @return planResultKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLAN_RESULT_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PlanResultKey getPlanResultKey() {
    return planResultKey;
  }


  @JsonProperty(JSON_PROPERTY_PLAN_RESULT_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlanResultKey(PlanResultKey planResultKey) {
    this.planResultKey = planResultKey;
  }


  public BuildResultsSummary failed(Boolean failed) {
    this.failed = failed;
    return this;
  }

   /**
   * Get failed
   * @return failed
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_FAILED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getFailed() {
    return failed;
  }


  @JsonProperty(JSON_PROPERTY_FAILED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFailed(Boolean failed) {
    this.failed = failed;
  }


  public BuildResultsSummary notRunYet(Boolean notRunYet) {
    this.notRunYet = notRunYet;
    return this;
  }

   /**
   * Get notRunYet
   * @return notRunYet
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NOT_RUN_YET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getNotRunYet() {
    return notRunYet;
  }


  @JsonProperty(JSON_PROPERTY_NOT_RUN_YET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotRunYet(Boolean notRunYet) {
    this.notRunYet = notRunYet;
  }


  public BuildResultsSummary notBuilt(Boolean notBuilt) {
    this.notBuilt = notBuilt;
    return this;
  }

   /**
   * Get notBuilt
   * @return notBuilt
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NOT_BUILT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getNotBuilt() {
    return notBuilt;
  }


  @JsonProperty(JSON_PROPERTY_NOT_BUILT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotBuilt(Boolean notBuilt) {
    this.notBuilt = notBuilt;
  }


  public BuildResultsSummary planName(String planName) {
    this.planName = planName;
    return this;
  }

   /**
   * Get planName
   * @return planName
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLAN_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPlanName() {
    return planName;
  }


  @JsonProperty(JSON_PROPERTY_PLAN_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlanName(String planName) {
    this.planName = planName;
  }


  public BuildResultsSummary successful(Boolean successful) {
    this.successful = successful;
    return this;
  }

   /**
   * Get successful
   * @return successful
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SUCCESSFUL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSuccessful() {
    return successful;
  }


  @JsonProperty(JSON_PROPERTY_SUCCESSFUL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSuccessful(Boolean successful) {
    this.successful = successful;
  }


  public BuildResultsSummary labelNames(List<String> labelNames) {
    this.labelNames = labelNames;
    return this;
  }

  public BuildResultsSummary addLabelNamesItem(String labelNamesItem) {
    if (this.labelNames == null) {
      this.labelNames = new ArrayList<>();
    }
    this.labelNames.add(labelNamesItem);
    return this;
  }

   /**
   * Get labelNames
   * @return labelNames
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_LABEL_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getLabelNames() {
    return labelNames;
  }


  @JsonProperty(JSON_PROPERTY_LABEL_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabelNames(List<String> labelNames) {
    this.labelNames = labelNames;
  }


  public BuildResultsSummary lifeCycleState(LifeCycleStateEnum lifeCycleState) {
    this.lifeCycleState = lifeCycleState;
    return this;
  }

   /**
   * Get lifeCycleState
   * @return lifeCycleState
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_LIFE_CYCLE_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LifeCycleStateEnum getLifeCycleState() {
    return lifeCycleState;
  }


  @JsonProperty(JSON_PROPERTY_LIFE_CYCLE_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLifeCycleState(LifeCycleStateEnum lifeCycleState) {
    this.lifeCycleState = lifeCycleState;
  }


  public BuildResultsSummary inProgress(Boolean inProgress) {
    this.inProgress = inProgress;
    return this;
  }

   /**
   * Get inProgress
   * @return inProgress
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_IN_PROGRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getInProgress() {
    return inProgress;
  }


  @JsonProperty(JSON_PROPERTY_IN_PROGRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInProgress(Boolean inProgress) {
    this.inProgress = inProgress;
  }


  public BuildResultsSummary pending(Boolean pending) {
    this.pending = pending;
    return this;
  }

   /**
   * Get pending
   * @return pending
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PENDING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPending() {
    return pending;
  }


  @JsonProperty(JSON_PROPERTY_PENDING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPending(Boolean pending) {
    this.pending = pending;
  }


  public BuildResultsSummary queued(Boolean queued) {
    this.queued = queued;
    return this;
  }

   /**
   * Get queued
   * @return queued
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_QUEUED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getQueued() {
    return queued;
  }


  @JsonProperty(JSON_PROPERTY_QUEUED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQueued(Boolean queued) {
    this.queued = queued;
  }


  public BuildResultsSummary active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActive(Boolean active) {
    this.active = active;
  }


  public BuildResultsSummary planIfExists(ImmutablePlan planIfExists) {
    this.planIfExists = planIfExists;
    return this;
  }

   /**
   * Get planIfExists
   * @return planIfExists
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLAN_IF_EXISTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ImmutablePlan getPlanIfExists() {
    return planIfExists;
  }


  @JsonProperty(JSON_PROPERTY_PLAN_IF_EXISTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlanIfExists(ImmutablePlan planIfExists) {
    this.planIfExists = planIfExists;
  }


  public BuildResultsSummary durationDescription(String durationDescription) {
    this.durationDescription = durationDescription;
    return this;
  }

   /**
   * Get durationDescription
   * @return durationDescription
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DURATION_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDurationDescription() {
    return durationDescription;
  }


  @JsonProperty(JSON_PROPERTY_DURATION_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDurationDescription(String durationDescription) {
    this.durationDescription = durationDescription;
  }


  public BuildResultsSummary relativeBuildDate(String relativeBuildDate) {
    this.relativeBuildDate = relativeBuildDate;
    return this;
  }

   /**
   * Get relativeBuildDate
   * @return relativeBuildDate
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_RELATIVE_BUILD_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRelativeBuildDate() {
    return relativeBuildDate;
  }


  @JsonProperty(JSON_PROPERTY_RELATIVE_BUILD_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRelativeBuildDate(String relativeBuildDate) {
    this.relativeBuildDate = relativeBuildDate;
  }


  public BuildResultsSummary reasonSummary(String reasonSummary) {
    this.reasonSummary = reasonSummary;
    return this;
  }

   /**
   * Get reasonSummary
   * @return reasonSummary
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_REASON_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReasonSummary() {
    return reasonSummary;
  }


  @JsonProperty(JSON_PROPERTY_REASON_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReasonSummary(String reasonSummary) {
    this.reasonSummary = reasonSummary;
  }


  public BuildResultsSummary finished(Boolean finished) {
    this.finished = finished;
    return this;
  }

   /**
   * Get finished
   * @return finished
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_FINISHED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getFinished() {
    return finished;
  }


  @JsonProperty(JSON_PROPERTY_FINISHED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFinished(Boolean finished) {
    this.finished = finished;
  }


  public BuildResultsSummary testSummary(String testSummary) {
    this.testSummary = testSummary;
    return this;
  }

   /**
   * Get testSummary
   * @return testSummary
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TEST_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTestSummary() {
    return testSummary;
  }


  @JsonProperty(JSON_PROPERTY_TEST_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTestSummary(String testSummary) {
    this.testSummary = testSummary;
  }


  public BuildResultsSummary immutableChain(ImmutableChain immutableChain) {
    this.immutableChain = immutableChain;
    return this;
  }

   /**
   * Get immutableChain
   * @return immutableChain
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_IMMUTABLE_CHAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ImmutableChain getImmutableChain() {
    return immutableChain;
  }


  @JsonProperty(JSON_PROPERTY_IMMUTABLE_CHAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImmutableChain(ImmutableChain immutableChain) {
    this.immutableChain = immutableChain;
  }


  public BuildResultsSummary commits(List<Commit> commits) {
    this.commits = commits;
    return this;
  }

  public BuildResultsSummary addCommitsItem(Commit commitsItem) {
    if (this.commits == null) {
      this.commits = new ArrayList<>();
    }
    this.commits.add(commitsItem);
    return this;
  }

   /**
   * Get commits
   * @return commits
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_COMMITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Commit> getCommits() {
    return commits;
  }


  @JsonProperty(JSON_PROPERTY_COMMITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommits(List<Commit> commits) {
    this.commits = commits;
  }


  public BuildResultsSummary waiting(Boolean waiting) {
    this.waiting = waiting;
    return this;
  }

   /**
   * Get waiting
   * @return waiting
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_WAITING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getWaiting() {
    return waiting;
  }


  @JsonProperty(JSON_PROPERTY_WAITING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWaiting(Boolean waiting) {
    this.waiting = waiting;
  }


  public BuildResultsSummary customBuildData(Object customBuildData) {
    this.customBuildData = customBuildData;
    return this;
  }

   /**
   * Get customBuildData
   * @return customBuildData
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CUSTOM_BUILD_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getCustomBuildData() {
    return customBuildData;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOM_BUILD_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomBuildData(Object customBuildData) {
    this.customBuildData = customBuildData;
  }


  public BuildResultsSummary fixingJiraIssues(Set<LinkedJiraIssue> fixingJiraIssues) {
    this.fixingJiraIssues = fixingJiraIssues;
    return this;
  }

  public BuildResultsSummary addFixingJiraIssuesItem(LinkedJiraIssue fixingJiraIssuesItem) {
    if (this.fixingJiraIssues == null) {
      this.fixingJiraIssues = new LinkedHashSet<>();
    }
    this.fixingJiraIssues.add(fixingJiraIssuesItem);
    return this;
  }

   /**
   * Get fixingJiraIssues
   * @return fixingJiraIssues
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_FIXING_JIRA_ISSUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<LinkedJiraIssue> getFixingJiraIssues() {
    return fixingJiraIssues;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_FIXING_JIRA_ISSUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFixingJiraIssues(Set<LinkedJiraIssue> fixingJiraIssues) {
    this.fixingJiraIssues = fixingJiraIssues;
  }


  public BuildResultsSummary relatedJiraIssues(Set<LinkedJiraIssue> relatedJiraIssues) {
    this.relatedJiraIssues = relatedJiraIssues;
    return this;
  }

  public BuildResultsSummary addRelatedJiraIssuesItem(LinkedJiraIssue relatedJiraIssuesItem) {
    if (this.relatedJiraIssues == null) {
      this.relatedJiraIssues = new LinkedHashSet<>();
    }
    this.relatedJiraIssues.add(relatedJiraIssuesItem);
    return this;
  }

   /**
   * Get relatedJiraIssues
   * @return relatedJiraIssues
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_RELATED_JIRA_ISSUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<LinkedJiraIssue> getRelatedJiraIssues() {
    return relatedJiraIssues;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_RELATED_JIRA_ISSUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRelatedJiraIssues(Set<LinkedJiraIssue> relatedJiraIssues) {
    this.relatedJiraIssues = relatedJiraIssues;
  }


  public BuildResultsSummary jiraIssueKeys(Set<String> jiraIssueKeys) {
    this.jiraIssueKeys = jiraIssueKeys;
    return this;
  }

  public BuildResultsSummary addJiraIssueKeysItem(String jiraIssueKeysItem) {
    if (this.jiraIssueKeys == null) {
      this.jiraIssueKeys = new LinkedHashSet<>();
    }
    this.jiraIssueKeys.add(jiraIssueKeysItem);
    return this;
  }

   /**
   * Get jiraIssueKeys
   * @return jiraIssueKeys
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_JIRA_ISSUE_KEYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getJiraIssueKeys() {
    return jiraIssueKeys;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_JIRA_ISSUE_KEYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setJiraIssueKeys(Set<String> jiraIssueKeys) {
    this.jiraIssueKeys = jiraIssueKeys;
  }


  public BuildResultsSummary uniqueAuthors(Set<Author> uniqueAuthors) {
    this.uniqueAuthors = uniqueAuthors;
    return this;
  }

  public BuildResultsSummary addUniqueAuthorsItem(Author uniqueAuthorsItem) {
    if (this.uniqueAuthors == null) {
      this.uniqueAuthors = new LinkedHashSet<>();
    }
    this.uniqueAuthors.add(uniqueAuthorsItem);
    return this;
  }

   /**
   * Get uniqueAuthors
   * @return uniqueAuthors
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_UNIQUE_AUTHORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<Author> getUniqueAuthors() {
    return uniqueAuthors;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_UNIQUE_AUTHORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUniqueAuthors(Set<Author> uniqueAuthors) {
    this.uniqueAuthors = uniqueAuthors;
  }


  public BuildResultsSummary processingDurationDescription(String processingDurationDescription) {
    this.processingDurationDescription = processingDurationDescription;
    return this;
  }

   /**
   * Get processingDurationDescription
   * @return processingDurationDescription
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PROCESSING_DURATION_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProcessingDurationDescription() {
    return processingDurationDescription;
  }


  @JsonProperty(JSON_PROPERTY_PROCESSING_DURATION_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessingDurationDescription(String processingDurationDescription) {
    this.processingDurationDescription = processingDurationDescription;
  }


  public BuildResultsSummary shortReasonSummary(String shortReasonSummary) {
    this.shortReasonSummary = shortReasonSummary;
    return this;
  }

   /**
   * Get shortReasonSummary
   * @return shortReasonSummary
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SHORT_REASON_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getShortReasonSummary() {
    return shortReasonSummary;
  }


  @JsonProperty(JSON_PROPERTY_SHORT_REASON_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShortReasonSummary(String shortReasonSummary) {
    this.shortReasonSummary = shortReasonSummary;
  }


  public BuildResultsSummary relativeQueueDate(String relativeQueueDate) {
    this.relativeQueueDate = relativeQueueDate;
    return this;
  }

   /**
   * Get relativeQueueDate
   * @return relativeQueueDate
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_RELATIVE_QUEUE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRelativeQueueDate() {
    return relativeQueueDate;
  }


  @JsonProperty(JSON_PROPERTY_RELATIVE_QUEUE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRelativeQueueDate(String relativeQueueDate) {
    this.relativeQueueDate = relativeQueueDate;
  }


  public BuildResultsSummary relativeBuildStartedDate(String relativeBuildStartedDate) {
    this.relativeBuildStartedDate = relativeBuildStartedDate;
    return this;
  }

   /**
   * Get relativeBuildStartedDate
   * @return relativeBuildStartedDate
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_RELATIVE_BUILD_STARTED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRelativeBuildStartedDate() {
    return relativeBuildStartedDate;
  }


  @JsonProperty(JSON_PROPERTY_RELATIVE_BUILD_STARTED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRelativeBuildStartedDate(String relativeBuildStartedDate) {
    this.relativeBuildStartedDate = relativeBuildStartedDate;
  }


  public BuildResultsSummary buildTime(String buildTime) {
    this.buildTime = buildTime;
    return this;
  }

   /**
   * Get buildTime
   * @return buildTime
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BUILD_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBuildTime() {
    return buildTime;
  }


  @JsonProperty(JSON_PROPERTY_BUILD_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildTime(String buildTime) {
    this.buildTime = buildTime;
  }


  public BuildResultsSummary artifactLinks(List<ArtifactLink> artifactLinks) {
    this.artifactLinks = artifactLinks;
    return this;
  }

  public BuildResultsSummary addArtifactLinksItem(ArtifactLink artifactLinksItem) {
    if (this.artifactLinks == null) {
      this.artifactLinks = new ArrayList<>();
    }
    this.artifactLinks.add(artifactLinksItem);
    return this;
  }

   /**
   * Get artifactLinks
   * @return artifactLinks
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ARTIFACT_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ArtifactLink> getArtifactLinks() {
    return artifactLinks;
  }


  @JsonProperty(JSON_PROPERTY_ARTIFACT_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArtifactLinks(List<ArtifactLink> artifactLinks) {
    this.artifactLinks = artifactLinks;
  }


  public BuildResultsSummary artifactLinksThatExist(List<ArtifactLink> artifactLinksThatExist) {
    this.artifactLinksThatExist = artifactLinksThatExist;
    return this;
  }

  public BuildResultsSummary addArtifactLinksThatExistItem(ArtifactLink artifactLinksThatExistItem) {
    if (this.artifactLinksThatExist == null) {
      this.artifactLinksThatExist = new ArrayList<>();
    }
    this.artifactLinksThatExist.add(artifactLinksThatExistItem);
    return this;
  }

   /**
   * Get artifactLinksThatExist
   * @return artifactLinksThatExist
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ARTIFACT_LINKS_THAT_EXIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ArtifactLink> getArtifactLinksThatExist() {
    return artifactLinksThatExist;
  }


  @JsonProperty(JSON_PROPERTY_ARTIFACT_LINKS_THAT_EXIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArtifactLinksThatExist(List<ArtifactLink> artifactLinksThatExist) {
    this.artifactLinksThatExist = artifactLinksThatExist;
  }


  public BuildResultsSummary changesListSummary(String changesListSummary) {
    this.changesListSummary = changesListSummary;
    return this;
  }

   /**
   * Get changesListSummary
   * @return changesListSummary
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CHANGES_LIST_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getChangesListSummary() {
    return changesListSummary;
  }


  @JsonProperty(JSON_PROPERTY_CHANGES_LIST_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChangesListSummary(String changesListSummary) {
    this.changesListSummary = changesListSummary;
  }


  public BuildResultsSummary substitutedVariables(List<VariableSubstitution> substitutedVariables) {
    this.substitutedVariables = substitutedVariables;
    return this;
  }

  public BuildResultsSummary addSubstitutedVariablesItem(VariableSubstitution substitutedVariablesItem) {
    if (this.substitutedVariables == null) {
      this.substitutedVariables = new ArrayList<>();
    }
    this.substitutedVariables.add(substitutedVariablesItem);
    return this;
  }

   /**
   * Get substitutedVariables
   * @return substitutedVariables
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SUBSTITUTED_VARIABLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<VariableSubstitution> getSubstitutedVariables() {
    return substitutedVariables;
  }


  @JsonProperty(JSON_PROPERTY_SUBSTITUTED_VARIABLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubstitutedVariables(List<VariableSubstitution> substitutedVariables) {
    this.substitutedVariables = substitutedVariables;
  }


  public BuildResultsSummary variableContextLogs(List<VariableContextSnapshot> variableContextLogs) {
    this.variableContextLogs = variableContextLogs;
    return this;
  }

  public BuildResultsSummary addVariableContextLogsItem(VariableContextSnapshot variableContextLogsItem) {
    if (this.variableContextLogs == null) {
      this.variableContextLogs = new ArrayList<>();
    }
    this.variableContextLogs.add(variableContextLogsItem);
    return this;
  }

   /**
   * Get variableContextLogs
   * @return variableContextLogs
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_VARIABLE_CONTEXT_LOGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<VariableContextSnapshot> getVariableContextLogs() {
    return variableContextLogs;
  }


  @JsonProperty(JSON_PROPERTY_VARIABLE_CONTEXT_LOGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVariableContextLogs(List<VariableContextSnapshot> variableContextLogs) {
    this.variableContextLogs = variableContextLogs;
  }


  public BuildResultsSummary manuallyOverriddenVariables(List<VariableSubstitution> manuallyOverriddenVariables) {
    this.manuallyOverriddenVariables = manuallyOverriddenVariables;
    return this;
  }

  public BuildResultsSummary addManuallyOverriddenVariablesItem(VariableSubstitution manuallyOverriddenVariablesItem) {
    if (this.manuallyOverriddenVariables == null) {
      this.manuallyOverriddenVariables = new ArrayList<>();
    }
    this.manuallyOverriddenVariables.add(manuallyOverriddenVariablesItem);
    return this;
  }

   /**
   * Get manuallyOverriddenVariables
   * @return manuallyOverriddenVariables
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_MANUALLY_OVERRIDDEN_VARIABLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<VariableSubstitution> getManuallyOverriddenVariables() {
    return manuallyOverriddenVariables;
  }


  @JsonProperty(JSON_PROPERTY_MANUALLY_OVERRIDDEN_VARIABLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setManuallyOverriddenVariables(List<VariableSubstitution> manuallyOverriddenVariables) {
    this.manuallyOverriddenVariables = manuallyOverriddenVariables;
  }


  public BuildResultsSummary fullPlanName(String fullPlanName) {
    this.fullPlanName = fullPlanName;
    return this;
  }

   /**
   * Get fullPlanName
   * @return fullPlanName
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_FULL_PLAN_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFullPlanName() {
    return fullPlanName;
  }


  @JsonProperty(JSON_PROPERTY_FULL_PLAN_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFullPlanName(String fullPlanName) {
    this.fullPlanName = fullPlanName;
  }


  public BuildResultsSummary jiraIssues(Set<LinkedJiraIssue> jiraIssues) {
    this.jiraIssues = jiraIssues;
    return this;
  }

  public BuildResultsSummary addJiraIssuesItem(LinkedJiraIssue jiraIssuesItem) {
    if (this.jiraIssues == null) {
      this.jiraIssues = new LinkedHashSet<>();
    }
    this.jiraIssues.add(jiraIssuesItem);
    return this;
  }

   /**
   * Get jiraIssues
   * @return jiraIssues
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_JIRA_ISSUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<LinkedJiraIssue> getJiraIssues() {
    return jiraIssues;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_JIRA_ISSUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setJiraIssues(Set<LinkedJiraIssue> jiraIssues) {
    this.jiraIssues = jiraIssues;
  }


  public BuildResultsSummary statDate(Date statDate) {
    this.statDate = statDate;
    return this;
  }

   /**
   * Get statDate
   * @return statDate
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_STAT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Date getStatDate() {
    return statDate;
  }


  @JsonProperty(JSON_PROPERTY_STAT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatDate(Date statDate) {
    this.statDate = statDate;
  }


  public BuildResultsSummary buildNumber(Integer buildNumber) {
    this.buildNumber = buildNumber;
    return this;
  }

   /**
   * Get buildNumber
   * @return buildNumber
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BUILD_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getBuildNumber() {
    return buildNumber;
  }


  @JsonProperty(JSON_PROPERTY_BUILD_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildNumber(Integer buildNumber) {
    this.buildNumber = buildNumber;
  }


  public BuildResultsSummary buildState(BuildStateEnum buildState) {
    this.buildState = buildState;
    return this;
  }

   /**
   * Get buildState
   * @return buildState
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BUILD_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BuildStateEnum getBuildState() {
    return buildState;
  }


  @JsonProperty(JSON_PROPERTY_BUILD_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildState(BuildStateEnum buildState) {
    this.buildState = buildState;
  }


  /**
   * Return true if this BuildResultsSummary object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildResultsSummary buildResultsSummary = (BuildResultsSummary) o;
    return Objects.equals(this.chainResultsSummary, buildResultsSummary.chainResultsSummary) &&
        Objects.equals(this.filteredTestResults, buildResultsSummary.filteredTestResults) &&
        Objects.equals(this.extraBuildResultsData, buildResultsSummary.extraBuildResultsData) &&
        Objects.equals(this.resultVariables, buildResultsSummary.resultVariables) &&
        Objects.equals(this.vcsUpdateTime, buildResultsSummary.vcsUpdateTime) &&
        Objects.equals(this.queueDuration, buildResultsSummary.queueDuration) &&
        Objects.equals(this.vcsUpdateDuration, buildResultsSummary.vcsUpdateDuration) &&
        Objects.equals(this.producedArtifactLinks, buildResultsSummary.producedArtifactLinks) &&
        Objects.equals(this.buildKey, buildResultsSummary.buildKey) &&
        Objects.equals(this.buildResultKey, buildResultsSummary.buildResultKey) &&
        Objects.equals(this.immutablePlan, buildResultsSummary.immutablePlan) &&
        Objects.equals(this.duration, buildResultsSummary.duration) &&
        Objects.equals(this.restartCount, buildResultsSummary.restartCount) &&
        Objects.equals(this.customBuild, buildResultsSummary.customBuild) &&
        Objects.equals(this.rebuild, buildResultsSummary.rebuild) &&
        Objects.equals(this.logSize, buildResultsSummary.logSize) &&
        Objects.equals(this.processingDuration, buildResultsSummary.processingDuration) &&
        Objects.equals(this.buildCompletedDate, buildResultsSummary.buildCompletedDate) &&
        Objects.equals(this.triggerReason, buildResultsSummary.triggerReason) &&
        Objects.equals(this.deltaState, buildResultsSummary.deltaState) &&
        Objects.equals(this.buildCancelledDate, buildResultsSummary.buildCancelledDate) &&
        Objects.equals(this.timeToFix, buildResultsSummary.timeToFix) &&
        Objects.equals(this.testResultsSummary, buildResultsSummary.testResultsSummary) &&
        Objects.equals(this.buildDate, buildResultsSummary.buildDate) &&
        Objects.equals(this.queueTime, buildResultsSummary.queueTime) &&
        Objects.equals(this.buildAgentId, buildResultsSummary.buildAgentId) &&
        Objects.equals(this.buildAgentType, buildResultsSummary.buildAgentType) &&
        Objects.equals(this.variableContextBaselineId, buildResultsSummary.variableContextBaselineId) &&
        Objects.equals(this.formatVersion, buildResultsSummary.formatVersion) &&
        Objects.equals(this.variableContextLogsEncrypted, buildResultsSummary.variableContextLogsEncrypted) &&
        Objects.equals(this.substitutedVariablesEncrypted, buildResultsSummary.substitutedVariablesEncrypted) &&
        Objects.equals(this.onceOff, buildResultsSummary.onceOff) &&
        Objects.equals(this.id, buildResultsSummary.id) &&
        Objects.equals(this.markedForDeletion, buildResultsSummary.markedForDeletion) &&
        Objects.equals(this.planKey, buildResultsSummary.planKey) &&
        Objects.equals(this.planResultKey, buildResultsSummary.planResultKey) &&
        Objects.equals(this.failed, buildResultsSummary.failed) &&
        Objects.equals(this.notRunYet, buildResultsSummary.notRunYet) &&
        Objects.equals(this.notBuilt, buildResultsSummary.notBuilt) &&
        Objects.equals(this.planName, buildResultsSummary.planName) &&
        Objects.equals(this.successful, buildResultsSummary.successful) &&
        Objects.equals(this.labelNames, buildResultsSummary.labelNames) &&
        Objects.equals(this.lifeCycleState, buildResultsSummary.lifeCycleState) &&
        Objects.equals(this.inProgress, buildResultsSummary.inProgress) &&
        Objects.equals(this.pending, buildResultsSummary.pending) &&
        Objects.equals(this.queued, buildResultsSummary.queued) &&
        Objects.equals(this.active, buildResultsSummary.active) &&
        Objects.equals(this.planIfExists, buildResultsSummary.planIfExists) &&
        Objects.equals(this.durationDescription, buildResultsSummary.durationDescription) &&
        Objects.equals(this.relativeBuildDate, buildResultsSummary.relativeBuildDate) &&
        Objects.equals(this.reasonSummary, buildResultsSummary.reasonSummary) &&
        Objects.equals(this.finished, buildResultsSummary.finished) &&
        Objects.equals(this.testSummary, buildResultsSummary.testSummary) &&
        Objects.equals(this.immutableChain, buildResultsSummary.immutableChain) &&
        Objects.equals(this.commits, buildResultsSummary.commits) &&
        Objects.equals(this.waiting, buildResultsSummary.waiting) &&
        Objects.equals(this.customBuildData, buildResultsSummary.customBuildData) &&
        Objects.equals(this.fixingJiraIssues, buildResultsSummary.fixingJiraIssues) &&
        Objects.equals(this.relatedJiraIssues, buildResultsSummary.relatedJiraIssues) &&
        Objects.equals(this.jiraIssueKeys, buildResultsSummary.jiraIssueKeys) &&
        Objects.equals(this.uniqueAuthors, buildResultsSummary.uniqueAuthors) &&
        Objects.equals(this.processingDurationDescription, buildResultsSummary.processingDurationDescription) &&
        Objects.equals(this.shortReasonSummary, buildResultsSummary.shortReasonSummary) &&
        Objects.equals(this.relativeQueueDate, buildResultsSummary.relativeQueueDate) &&
        Objects.equals(this.relativeBuildStartedDate, buildResultsSummary.relativeBuildStartedDate) &&
        Objects.equals(this.buildTime, buildResultsSummary.buildTime) &&
        Objects.equals(this.artifactLinks, buildResultsSummary.artifactLinks) &&
        Objects.equals(this.artifactLinksThatExist, buildResultsSummary.artifactLinksThatExist) &&
        Objects.equals(this.changesListSummary, buildResultsSummary.changesListSummary) &&
        Objects.equals(this.substitutedVariables, buildResultsSummary.substitutedVariables) &&
        Objects.equals(this.variableContextLogs, buildResultsSummary.variableContextLogs) &&
        Objects.equals(this.manuallyOverriddenVariables, buildResultsSummary.manuallyOverriddenVariables) &&
        Objects.equals(this.fullPlanName, buildResultsSummary.fullPlanName) &&
        Objects.equals(this.jiraIssues, buildResultsSummary.jiraIssues) &&
        Objects.equals(this.statDate, buildResultsSummary.statDate) &&
        Objects.equals(this.buildNumber, buildResultsSummary.buildNumber) &&
        Objects.equals(this.buildState, buildResultsSummary.buildState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chainResultsSummary, filteredTestResults, extraBuildResultsData, resultVariables, vcsUpdateTime, queueDuration, vcsUpdateDuration, producedArtifactLinks, buildKey, buildResultKey, immutablePlan, duration, restartCount, customBuild, rebuild, logSize, processingDuration, buildCompletedDate, triggerReason, deltaState, buildCancelledDate, timeToFix, testResultsSummary, buildDate, queueTime, buildAgentId, buildAgentType, variableContextBaselineId, formatVersion, variableContextLogsEncrypted, substitutedVariablesEncrypted, onceOff, id, markedForDeletion, planKey, planResultKey, failed, notRunYet, notBuilt, planName, successful, labelNames, lifeCycleState, inProgress, pending, queued, active, planIfExists, durationDescription, relativeBuildDate, reasonSummary, finished, testSummary, immutableChain, commits, waiting, customBuildData, fixingJiraIssues, relatedJiraIssues, jiraIssueKeys, uniqueAuthors, processingDurationDescription, shortReasonSummary, relativeQueueDate, relativeBuildStartedDate, buildTime, artifactLinks, artifactLinksThatExist, changesListSummary, substitutedVariables, variableContextLogs, manuallyOverriddenVariables, fullPlanName, jiraIssues, statDate, buildNumber, buildState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildResultsSummary {\n");
    sb.append("    chainResultsSummary: ").append(toIndentedString(chainResultsSummary)).append("\n");
    sb.append("    filteredTestResults: ").append(toIndentedString(filteredTestResults)).append("\n");
    sb.append("    extraBuildResultsData: ").append(toIndentedString(extraBuildResultsData)).append("\n");
    sb.append("    resultVariables: ").append(toIndentedString(resultVariables)).append("\n");
    sb.append("    vcsUpdateTime: ").append(toIndentedString(vcsUpdateTime)).append("\n");
    sb.append("    queueDuration: ").append(toIndentedString(queueDuration)).append("\n");
    sb.append("    vcsUpdateDuration: ").append(toIndentedString(vcsUpdateDuration)).append("\n");
    sb.append("    producedArtifactLinks: ").append(toIndentedString(producedArtifactLinks)).append("\n");
    sb.append("    buildKey: ").append(toIndentedString(buildKey)).append("\n");
    sb.append("    buildResultKey: ").append(toIndentedString(buildResultKey)).append("\n");
    sb.append("    immutablePlan: ").append(toIndentedString(immutablePlan)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    restartCount: ").append(toIndentedString(restartCount)).append("\n");
    sb.append("    customBuild: ").append(toIndentedString(customBuild)).append("\n");
    sb.append("    rebuild: ").append(toIndentedString(rebuild)).append("\n");
    sb.append("    logSize: ").append(toIndentedString(logSize)).append("\n");
    sb.append("    processingDuration: ").append(toIndentedString(processingDuration)).append("\n");
    sb.append("    buildCompletedDate: ").append(toIndentedString(buildCompletedDate)).append("\n");
    sb.append("    triggerReason: ").append(toIndentedString(triggerReason)).append("\n");
    sb.append("    deltaState: ").append(toIndentedString(deltaState)).append("\n");
    sb.append("    buildCancelledDate: ").append(toIndentedString(buildCancelledDate)).append("\n");
    sb.append("    timeToFix: ").append(toIndentedString(timeToFix)).append("\n");
    sb.append("    testResultsSummary: ").append(toIndentedString(testResultsSummary)).append("\n");
    sb.append("    buildDate: ").append(toIndentedString(buildDate)).append("\n");
    sb.append("    queueTime: ").append(toIndentedString(queueTime)).append("\n");
    sb.append("    buildAgentId: ").append(toIndentedString(buildAgentId)).append("\n");
    sb.append("    buildAgentType: ").append(toIndentedString(buildAgentType)).append("\n");
    sb.append("    variableContextBaselineId: ").append(toIndentedString(variableContextBaselineId)).append("\n");
    sb.append("    formatVersion: ").append(toIndentedString(formatVersion)).append("\n");
    sb.append("    variableContextLogsEncrypted: ").append(toIndentedString(variableContextLogsEncrypted)).append("\n");
    sb.append("    substitutedVariablesEncrypted: ").append(toIndentedString(substitutedVariablesEncrypted)).append("\n");
    sb.append("    onceOff: ").append(toIndentedString(onceOff)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    markedForDeletion: ").append(toIndentedString(markedForDeletion)).append("\n");
    sb.append("    planKey: ").append(toIndentedString(planKey)).append("\n");
    sb.append("    planResultKey: ").append(toIndentedString(planResultKey)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    notRunYet: ").append(toIndentedString(notRunYet)).append("\n");
    sb.append("    notBuilt: ").append(toIndentedString(notBuilt)).append("\n");
    sb.append("    planName: ").append(toIndentedString(planName)).append("\n");
    sb.append("    successful: ").append(toIndentedString(successful)).append("\n");
    sb.append("    labelNames: ").append(toIndentedString(labelNames)).append("\n");
    sb.append("    lifeCycleState: ").append(toIndentedString(lifeCycleState)).append("\n");
    sb.append("    inProgress: ").append(toIndentedString(inProgress)).append("\n");
    sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
    sb.append("    queued: ").append(toIndentedString(queued)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    planIfExists: ").append(toIndentedString(planIfExists)).append("\n");
    sb.append("    durationDescription: ").append(toIndentedString(durationDescription)).append("\n");
    sb.append("    relativeBuildDate: ").append(toIndentedString(relativeBuildDate)).append("\n");
    sb.append("    reasonSummary: ").append(toIndentedString(reasonSummary)).append("\n");
    sb.append("    finished: ").append(toIndentedString(finished)).append("\n");
    sb.append("    testSummary: ").append(toIndentedString(testSummary)).append("\n");
    sb.append("    immutableChain: ").append(toIndentedString(immutableChain)).append("\n");
    sb.append("    commits: ").append(toIndentedString(commits)).append("\n");
    sb.append("    waiting: ").append(toIndentedString(waiting)).append("\n");
    sb.append("    customBuildData: ").append(toIndentedString(customBuildData)).append("\n");
    sb.append("    fixingJiraIssues: ").append(toIndentedString(fixingJiraIssues)).append("\n");
    sb.append("    relatedJiraIssues: ").append(toIndentedString(relatedJiraIssues)).append("\n");
    sb.append("    jiraIssueKeys: ").append(toIndentedString(jiraIssueKeys)).append("\n");
    sb.append("    uniqueAuthors: ").append(toIndentedString(uniqueAuthors)).append("\n");
    sb.append("    processingDurationDescription: ").append(toIndentedString(processingDurationDescription)).append("\n");
    sb.append("    shortReasonSummary: ").append(toIndentedString(shortReasonSummary)).append("\n");
    sb.append("    relativeQueueDate: ").append(toIndentedString(relativeQueueDate)).append("\n");
    sb.append("    relativeBuildStartedDate: ").append(toIndentedString(relativeBuildStartedDate)).append("\n");
    sb.append("    buildTime: ").append(toIndentedString(buildTime)).append("\n");
    sb.append("    artifactLinks: ").append(toIndentedString(artifactLinks)).append("\n");
    sb.append("    artifactLinksThatExist: ").append(toIndentedString(artifactLinksThatExist)).append("\n");
    sb.append("    changesListSummary: ").append(toIndentedString(changesListSummary)).append("\n");
    sb.append("    substitutedVariables: ").append(toIndentedString(substitutedVariables)).append("\n");
    sb.append("    variableContextLogs: ").append(toIndentedString(variableContextLogs)).append("\n");
    sb.append("    manuallyOverriddenVariables: ").append(toIndentedString(manuallyOverriddenVariables)).append("\n");
    sb.append("    fullPlanName: ").append(toIndentedString(fullPlanName)).append("\n");
    sb.append("    jiraIssues: ").append(toIndentedString(jiraIssues)).append("\n");
    sb.append("    statDate: ").append(toIndentedString(statDate)).append("\n");
    sb.append("    buildNumber: ").append(toIndentedString(buildNumber)).append("\n");
    sb.append("    buildState: ").append(toIndentedString(buildState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

