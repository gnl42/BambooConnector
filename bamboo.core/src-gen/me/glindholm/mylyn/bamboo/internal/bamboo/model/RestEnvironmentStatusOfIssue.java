/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.bamboo.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestDeploymentVersionLink;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * RestEnvironmentStatusOfIssue
 */
@JsonPropertyOrder({
  RestEnvironmentStatusOfIssue.JSON_PROPERTY_NAME,
  RestEnvironmentStatusOfIssue.JSON_PROPERTY_ID,
  RestEnvironmentStatusOfIssue.JSON_PROPERTY_ISSUE_STATUS,
  RestEnvironmentStatusOfIssue.JSON_PROPERTY_STATUS_OK,
  RestEnvironmentStatusOfIssue.JSON_PROPERTY_VERSION,
  RestEnvironmentStatusOfIssue.JSON_PROPERTY_URL
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-08T20:39:31.812169500-07:00[America/Vancouver]")
public class RestEnvironmentStatusOfIssue implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  /**
   * Gets or Sets issueStatus
   */
  public enum IssueStatusEnum {
    NOT_AVAILABLE("NOT_AVAILABLE"),
    
    PARTIALLY_AVAILABLE("PARTIALLY_AVAILABLE"),
    
    AVAILABLE("AVAILABLE");

    private String value;

    IssueStatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IssueStatusEnum fromValue(String value) {
      for (IssueStatusEnum b : IssueStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ISSUE_STATUS = "issueStatus";
  private IssueStatusEnum issueStatus;

  public static final String JSON_PROPERTY_STATUS_OK = "statusOk";
  private Boolean statusOk;

  public static final String JSON_PROPERTY_VERSION = "version";
  private RestDeploymentVersionLink version;

  public static final String JSON_PROPERTY_URL = "url";
  private String url;

  public RestEnvironmentStatusOfIssue() { 
  }

  public RestEnvironmentStatusOfIssue name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public RestEnvironmentStatusOfIssue id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  public RestEnvironmentStatusOfIssue issueStatus(IssueStatusEnum issueStatus) {
    this.issueStatus = issueStatus;
    return this;
  }

   /**
   * Get issueStatus
   * @return issueStatus
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ISSUE_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public IssueStatusEnum getIssueStatus() {
    return issueStatus;
  }


  @JsonProperty(JSON_PROPERTY_ISSUE_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIssueStatus(IssueStatusEnum issueStatus) {
    this.issueStatus = issueStatus;
  }


  public RestEnvironmentStatusOfIssue statusOk(Boolean statusOk) {
    this.statusOk = statusOk;
    return this;
  }

   /**
   * Get statusOk
   * @return statusOk
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_STATUS_OK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getStatusOk() {
    return statusOk;
  }


  @JsonProperty(JSON_PROPERTY_STATUS_OK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatusOk(Boolean statusOk) {
    this.statusOk = statusOk;
  }


  public RestEnvironmentStatusOfIssue version(RestDeploymentVersionLink version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestDeploymentVersionLink getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersion(RestDeploymentVersionLink version) {
    this.version = version;
  }


  public RestEnvironmentStatusOfIssue url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUrl(String url) {
    this.url = url;
  }


  /**
   * Return true if this RestEnvironmentStatusOfIssue object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestEnvironmentStatusOfIssue restEnvironmentStatusOfIssue = (RestEnvironmentStatusOfIssue) o;
    return Objects.equals(this.name, restEnvironmentStatusOfIssue.name) &&
        Objects.equals(this.id, restEnvironmentStatusOfIssue.id) &&
        Objects.equals(this.issueStatus, restEnvironmentStatusOfIssue.issueStatus) &&
        Objects.equals(this.statusOk, restEnvironmentStatusOfIssue.statusOk) &&
        Objects.equals(this.version, restEnvironmentStatusOfIssue.version) &&
        Objects.equals(this.url, restEnvironmentStatusOfIssue.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, id, issueStatus, statusOk, version, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestEnvironmentStatusOfIssue {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issueStatus: ").append(toIndentedString(issueStatus)).append("\n");
    sb.append("    statusOk: ").append(toIndentedString(statusOk)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

