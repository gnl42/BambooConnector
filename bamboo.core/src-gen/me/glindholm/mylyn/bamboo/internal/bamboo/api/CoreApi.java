/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package me.glindholm.mylyn.bamboo.internal.bamboo.api;

import me.glindholm.mylyn.bamboo.internal.bamboo.invoker.ApiClient;
import me.glindholm.mylyn.bamboo.internal.bamboo.invoker.ApiException;
import me.glindholm.mylyn.bamboo.internal.bamboo.invoker.ApiResponse;
import me.glindholm.mylyn.bamboo.internal.bamboo.invoker.Pair;

import me.glindholm.mylyn.bamboo.internal.bamboo.model.GetEnvironmentsExecutableByAgent200Response;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestAgentAssignmentExecutorDetails;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestAgentAssignmentExecutorDetailsList;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestAgentSummary;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestDeploymentResultList;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestDockerPipelineConfiguration;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestEnvironmentWithConfigCounts;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestErrorCollection;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestRequirement;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestVariable;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestVariableDefinitionContext;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-08T20:39:31.812169500-07:00[America/Vancouver]")
public class CoreApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public CoreApi() {
    this(new ApiClient());
  }

  public CoreApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * Add agent assignment for environment. agentAssignmentKey is a map with one key-value: name - agentAssignmentKey.  agentAssignmentKey is parsed by ExecutorKey.
   * @param environmentId environment id (required)
   * @param body A map with &#39;name&#39; key which reference agent assignment key as &#39;value&#39; (optional)
   * @return RestAgentAssignmentExecutorDetails
   * @throws ApiException if fails to make API call
   */
  public RestAgentAssignmentExecutorDetails addAgentAssignmentForEnvironment(String environmentId, String body) throws ApiException {
    ApiResponse<RestAgentAssignmentExecutorDetails> localVarResponse = addAgentAssignmentForEnvironmentWithHttpInfo(environmentId, body);
    return localVarResponse.getData();
  }

  /**
   * 
   * Add agent assignment for environment. agentAssignmentKey is a map with one key-value: name - agentAssignmentKey.  agentAssignmentKey is parsed by ExecutorKey.
   * @param environmentId environment id (required)
   * @param body A map with &#39;name&#39; key which reference agent assignment key as &#39;value&#39; (optional)
   * @return ApiResponse&lt;RestAgentAssignmentExecutorDetails&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestAgentAssignmentExecutorDetails> addAgentAssignmentForEnvironmentWithHttpInfo(String environmentId, String body) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addAgentAssignmentForEnvironmentRequestBuilder(environmentId, body);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addAgentAssignmentForEnvironment", localVarResponse);
        }
        return new ApiResponse<RestAgentAssignmentExecutorDetails>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestAgentAssignmentExecutorDetails>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addAgentAssignmentForEnvironmentRequestBuilder(String environmentId, String body) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling addAgentAssignmentForEnvironment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/environment/{environmentId}/agent-assignment"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(body));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Add agent assignment for job. agentAssignmentKey is a map with one key-value: name - agentAssignmentKey.  agentAssignmentKey is parsed by ExecutorKey.
   * @param jobKey job key (required)
   * @param body A map with &#39;name&#39; key which reference agent assignment key as &#39;value&#39; (optional)
   * @return RestAgentAssignmentExecutorDetails
   * @throws ApiException if fails to make API call
   */
  public RestAgentAssignmentExecutorDetails addAgentAssignmentForJob(String jobKey, String body) throws ApiException {
    ApiResponse<RestAgentAssignmentExecutorDetails> localVarResponse = addAgentAssignmentForJobWithHttpInfo(jobKey, body);
    return localVarResponse.getData();
  }

  /**
   * 
   * Add agent assignment for job. agentAssignmentKey is a map with one key-value: name - agentAssignmentKey.  agentAssignmentKey is parsed by ExecutorKey.
   * @param jobKey job key (required)
   * @param body A map with &#39;name&#39; key which reference agent assignment key as &#39;value&#39; (optional)
   * @return ApiResponse&lt;RestAgentAssignmentExecutorDetails&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestAgentAssignmentExecutorDetails> addAgentAssignmentForJobWithHttpInfo(String jobKey, String body) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addAgentAssignmentForJobRequestBuilder(jobKey, body);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addAgentAssignmentForJob", localVarResponse);
        }
        return new ApiResponse<RestAgentAssignmentExecutorDetails>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestAgentAssignmentExecutorDetails>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addAgentAssignmentForJobRequestBuilder(String jobKey, String body) throws ApiException {
    // verify the required parameter 'jobKey' is set
    if (jobKey == null) {
      throw new ApiException(400, "Missing the required parameter 'jobKey' when calling addAgentAssignmentForJob");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/config/job/{jobKey}/agent-assignment"
        .replace("{jobKey}", ApiClient.urlEncode(jobKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofString(body));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Adds a requirement for a given environment.
   * @param environmentId environment id (required)
   * @param restRequirement A representation of the requirement (optional)
   * @return RestRequirement
   * @throws ApiException if fails to make API call
   */
  public RestRequirement addRequirementForEnvironment(String environmentId, RestRequirement restRequirement) throws ApiException {
    ApiResponse<RestRequirement> localVarResponse = addRequirementForEnvironmentWithHttpInfo(environmentId, restRequirement);
    return localVarResponse.getData();
  }

  /**
   * 
   * Adds a requirement for a given environment.
   * @param environmentId environment id (required)
   * @param restRequirement A representation of the requirement (optional)
   * @return ApiResponse&lt;RestRequirement&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestRequirement> addRequirementForEnvironmentWithHttpInfo(String environmentId, RestRequirement restRequirement) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addRequirementForEnvironmentRequestBuilder(environmentId, restRequirement);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addRequirementForEnvironment", localVarResponse);
        }
        return new ApiResponse<RestRequirement>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestRequirement>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addRequirementForEnvironmentRequestBuilder(String environmentId, RestRequirement restRequirement) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling addRequirementForEnvironment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/environment/{environmentId}/requirement"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restRequirement);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Create the environment variable.
   * @param environmentId environment id (required)
   * @param restVariable The new variable. (optional)
   * @return RestVariableDefinitionContext
   * @throws ApiException if fails to make API call
   */
  public RestVariableDefinitionContext createEnvironmentVariable(String environmentId, RestVariable restVariable) throws ApiException {
    ApiResponse<RestVariableDefinitionContext> localVarResponse = createEnvironmentVariableWithHttpInfo(environmentId, restVariable);
    return localVarResponse.getData();
  }

  /**
   * 
   * Create the environment variable.
   * @param environmentId environment id (required)
   * @param restVariable The new variable. (optional)
   * @return ApiResponse&lt;RestVariableDefinitionContext&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestVariableDefinitionContext> createEnvironmentVariableWithHttpInfo(String environmentId, RestVariable restVariable) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createEnvironmentVariableRequestBuilder(environmentId, restVariable);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createEnvironmentVariable", localVarResponse);
        }
        return new ApiResponse<RestVariableDefinitionContext>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestVariableDefinitionContext>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createEnvironmentVariableRequestBuilder(String environmentId, RestVariable restVariable) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling createEnvironmentVariable");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/environment/{environmentId}/variable"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restVariable);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Delete the environment variable.
   * @param variableName variable name (required)
   * @param environmentId environment id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteEnvironmentVariable(String variableName, String environmentId) throws ApiException {
    deleteEnvironmentVariableWithHttpInfo(variableName, environmentId);
  }

  /**
   * 
   * Delete the environment variable.
   * @param variableName variable name (required)
   * @param environmentId environment id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteEnvironmentVariableWithHttpInfo(String variableName, String environmentId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteEnvironmentVariableRequestBuilder(variableName, environmentId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteEnvironmentVariable", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteEnvironmentVariableRequestBuilder(String variableName, String environmentId) throws ApiException {
    // verify the required parameter 'variableName' is set
    if (variableName == null) {
      throw new ApiException(400, "Missing the required parameter 'variableName' when calling deleteEnvironmentVariable");
    }
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling deleteEnvironmentVariable");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/environment/{environmentId}/variable/{variableName}"
        .replace("{variableName}", ApiClient.urlEncode(variableName.toString()))
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get a list of agents/images assigned to given environment.
   * @param environmentId environment id (required)
   * @return List&lt;RestAgentAssignmentExecutorDetails&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RestAgentAssignmentExecutorDetails> findAssignedAgentsByEnvironment(String environmentId) throws ApiException {
    ApiResponse<List<RestAgentAssignmentExecutorDetails>> localVarResponse = findAssignedAgentsByEnvironmentWithHttpInfo(environmentId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get a list of agents/images assigned to given environment.
   * @param environmentId environment id (required)
   * @return ApiResponse&lt;List&lt;RestAgentAssignmentExecutorDetails&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RestAgentAssignmentExecutorDetails>> findAssignedAgentsByEnvironmentWithHttpInfo(String environmentId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = findAssignedAgentsByEnvironmentRequestBuilder(environmentId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("findAssignedAgentsByEnvironment", localVarResponse);
        }
        return new ApiResponse<List<RestAgentAssignmentExecutorDetails>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RestAgentAssignmentExecutorDetails>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder findAssignedAgentsByEnvironmentRequestBuilder(String environmentId) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling findAssignedAgentsByEnvironment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/environment/{environmentId}/agent-assignment"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get a list of agents/images assigned to given job.
   * @param jobKey job key (required)
   * @return List&lt;RestAgentAssignmentExecutorDetails&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RestAgentAssignmentExecutorDetails> findAssignedAgentsByJob(String jobKey) throws ApiException {
    ApiResponse<List<RestAgentAssignmentExecutorDetails>> localVarResponse = findAssignedAgentsByJobWithHttpInfo(jobKey);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get a list of agents/images assigned to given job.
   * @param jobKey job key (required)
   * @return ApiResponse&lt;List&lt;RestAgentAssignmentExecutorDetails&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RestAgentAssignmentExecutorDetails>> findAssignedAgentsByJobWithHttpInfo(String jobKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = findAssignedAgentsByJobRequestBuilder(jobKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("findAssignedAgentsByJob", localVarResponse);
        }
        return new ApiResponse<List<RestAgentAssignmentExecutorDetails>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RestAgentAssignmentExecutorDetails>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder findAssignedAgentsByJobRequestBuilder(String jobKey) throws ApiException {
    // verify the required parameter 'jobKey' is set
    if (jobKey == null) {
      throw new ApiException(400, "Missing the required parameter 'jobKey' when calling findAssignedAgentsByJob");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/config/job/{jobKey}/agent-assignment"
        .replace("{jobKey}", ApiClient.urlEncode(jobKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get a list of agents/images/templates which can be dedicated for given environment.
   * @param environmentId environment id (required)
   * @param maxResult Maximum count of elements (optional)
   * @param searchTerm Part of the agent or image name to filter response. Use empty value to receive all agents/images/templates. (optional)
   * @param startIndex Start index of elements (optional)
   * @return RestAgentAssignmentExecutorDetailsList
   * @throws ApiException if fails to make API call
   */
  public RestAgentAssignmentExecutorDetailsList findPossibleAgentsForEnvironment(String environmentId, Integer maxResult, String searchTerm, Integer startIndex) throws ApiException {
    ApiResponse<RestAgentAssignmentExecutorDetailsList> localVarResponse = findPossibleAgentsForEnvironmentWithHttpInfo(environmentId, maxResult, searchTerm, startIndex);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get a list of agents/images/templates which can be dedicated for given environment.
   * @param environmentId environment id (required)
   * @param maxResult Maximum count of elements (optional)
   * @param searchTerm Part of the agent or image name to filter response. Use empty value to receive all agents/images/templates. (optional)
   * @param startIndex Start index of elements (optional)
   * @return ApiResponse&lt;RestAgentAssignmentExecutorDetailsList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestAgentAssignmentExecutorDetailsList> findPossibleAgentsForEnvironmentWithHttpInfo(String environmentId, Integer maxResult, String searchTerm, Integer startIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = findPossibleAgentsForEnvironmentRequestBuilder(environmentId, maxResult, searchTerm, startIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("findPossibleAgentsForEnvironment", localVarResponse);
        }
        return new ApiResponse<RestAgentAssignmentExecutorDetailsList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestAgentAssignmentExecutorDetailsList>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder findPossibleAgentsForEnvironmentRequestBuilder(String environmentId, Integer maxResult, String searchTerm, Integer startIndex) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling findPossibleAgentsForEnvironment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/environment/{environmentId}/possible-agent-assignment"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "max-result";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-result", maxResult));
    localVarQueryParameterBaseName = "searchTerm";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchTerm", searchTerm));
    localVarQueryParameterBaseName = "start-index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start-index", startIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get a list of agents/images/templates which can be dedicated for given job.
   * @param jobKey job key (required)
   * @param maxResult Maximum count of agents (optional)
   * @param searchTerm Part of the agent/image/template name to filter response. Use empty value to receive all agents/images/templates. (optional)
   * @param startIndex Start index of agents (optional)
   * @return RestAgentAssignmentExecutorDetailsList
   * @throws ApiException if fails to make API call
   */
  public RestAgentAssignmentExecutorDetailsList findPossibleAgentsForJob(String jobKey, Integer maxResult, String searchTerm, Integer startIndex) throws ApiException {
    ApiResponse<RestAgentAssignmentExecutorDetailsList> localVarResponse = findPossibleAgentsForJobWithHttpInfo(jobKey, maxResult, searchTerm, startIndex);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get a list of agents/images/templates which can be dedicated for given job.
   * @param jobKey job key (required)
   * @param maxResult Maximum count of agents (optional)
   * @param searchTerm Part of the agent/image/template name to filter response. Use empty value to receive all agents/images/templates. (optional)
   * @param startIndex Start index of agents (optional)
   * @return ApiResponse&lt;RestAgentAssignmentExecutorDetailsList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestAgentAssignmentExecutorDetailsList> findPossibleAgentsForJobWithHttpInfo(String jobKey, Integer maxResult, String searchTerm, Integer startIndex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = findPossibleAgentsForJobRequestBuilder(jobKey, maxResult, searchTerm, startIndex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("findPossibleAgentsForJob", localVarResponse);
        }
        return new ApiResponse<RestAgentAssignmentExecutorDetailsList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestAgentAssignmentExecutorDetailsList>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder findPossibleAgentsForJobRequestBuilder(String jobKey, Integer maxResult, String searchTerm, Integer startIndex) throws ApiException {
    // verify the required parameter 'jobKey' is set
    if (jobKey == null) {
      throw new ApiException(400, "Missing the required parameter 'jobKey' when calling findPossibleAgentsForJob");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/config/job/{jobKey}/agent-assignment/possible-agent-assignment"
        .replace("{jobKey}", ApiClient.urlEncode(jobKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "max-result";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max-result", maxResult));
    localVarQueryParameterBaseName = "searchTerm";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchTerm", searchTerm));
    localVarQueryParameterBaseName = "start-index";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start-index", startIndex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Gets a summary of the agents that are capable of running an environment, based of its requirements.
   * @param environmentId environment id (required)
   * @return RestAgentSummary
   * @throws ApiException if fails to make API call
   */
  public RestAgentSummary getAgentMatchesForEnvironment(String environmentId) throws ApiException {
    ApiResponse<RestAgentSummary> localVarResponse = getAgentMatchesForEnvironmentWithHttpInfo(environmentId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Gets a summary of the agents that are capable of running an environment, based of its requirements.
   * @param environmentId environment id (required)
   * @return ApiResponse&lt;RestAgentSummary&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestAgentSummary> getAgentMatchesForEnvironmentWithHttpInfo(String environmentId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAgentMatchesForEnvironmentRequestBuilder(environmentId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAgentMatchesForEnvironment", localVarResponse);
        }
        return new ApiResponse<RestAgentSummary>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestAgentSummary>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAgentMatchesForEnvironmentRequestBuilder(String environmentId) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling getAgentMatchesForEnvironment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/environment/{environmentId}/requirement/summary"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get a list of environment variables.
   * @param environmentId environment id (required)
   * @return List&lt;RestVariable&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RestVariable> getAllEnvironmentVariables(String environmentId) throws ApiException {
    ApiResponse<List<RestVariable>> localVarResponse = getAllEnvironmentVariablesWithHttpInfo(environmentId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get a list of environment variables.
   * @param environmentId environment id (required)
   * @return ApiResponse&lt;List&lt;RestVariable&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RestVariable>> getAllEnvironmentVariablesWithHttpInfo(String environmentId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAllEnvironmentVariablesRequestBuilder(environmentId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAllEnvironmentVariables", localVarResponse);
        }
        return new ApiResponse<List<RestVariable>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RestVariable>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAllEnvironmentVariablesRequestBuilder(String environmentId) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling getAllEnvironmentVariables");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/environment/{environmentId}/variables"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get a list of versions deployed to the environment. Sorted by started date: newest first.
   * @param environmentId environment id (required)
   * @param expand Expands deployment versions. Possible values are: results (optional)
   * @return RestDeploymentResultList
   * @throws ApiException if fails to make API call
   */
  public RestDeploymentResultList getDeploymentResultList(String environmentId, String expand) throws ApiException {
    ApiResponse<RestDeploymentResultList> localVarResponse = getDeploymentResultListWithHttpInfo(environmentId, expand);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get a list of versions deployed to the environment. Sorted by started date: newest first.
   * @param environmentId environment id (required)
   * @param expand Expands deployment versions. Possible values are: results (optional)
   * @return ApiResponse&lt;RestDeploymentResultList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestDeploymentResultList> getDeploymentResultListWithHttpInfo(String environmentId, String expand) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDeploymentResultListRequestBuilder(environmentId, expand);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDeploymentResultList", localVarResponse);
        }
        return new ApiResponse<RestDeploymentResultList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestDeploymentResultList>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDeploymentResultListRequestBuilder(String environmentId, String expand) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling getDeploymentResultList");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/environment/{environmentId}/results"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "expand";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("expand", expand));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Gets a detailed summary of the agents that are capable of running an environment, based of its requirements.
   * @param environmentId environment id (required)
   * @return RestAgentSummary
   * @throws ApiException if fails to make API call
   */
  public RestAgentSummary getDetailedAgentMatchesForEnvironment(String environmentId) throws ApiException {
    ApiResponse<RestAgentSummary> localVarResponse = getDetailedAgentMatchesForEnvironmentWithHttpInfo(environmentId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Gets a detailed summary of the agents that are capable of running an environment, based of its requirements.
   * @param environmentId environment id (required)
   * @return ApiResponse&lt;RestAgentSummary&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestAgentSummary> getDetailedAgentMatchesForEnvironmentWithHttpInfo(String environmentId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDetailedAgentMatchesForEnvironmentRequestBuilder(environmentId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDetailedAgentMatchesForEnvironment", localVarResponse);
        }
        return new ApiResponse<RestAgentSummary>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestAgentSummary>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDetailedAgentMatchesForEnvironmentRequestBuilder(String environmentId) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling getDetailedAgentMatchesForEnvironment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/environment/{environmentId}/requirement/detailedSummary"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get Docker configuration for given environment.
   * @param environmentId environment id (required)
   * @return RestDockerPipelineConfiguration
   * @throws ApiException if fails to make API call
   */
  public RestDockerPipelineConfiguration getDockerPipelinesConfiguration(String environmentId) throws ApiException {
    ApiResponse<RestDockerPipelineConfiguration> localVarResponse = getDockerPipelinesConfigurationWithHttpInfo(environmentId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get Docker configuration for given environment.
   * @param environmentId environment id (required)
   * @return ApiResponse&lt;RestDockerPipelineConfiguration&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestDockerPipelineConfiguration> getDockerPipelinesConfigurationWithHttpInfo(String environmentId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDockerPipelinesConfigurationRequestBuilder(environmentId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDockerPipelinesConfiguration", localVarResponse);
        }
        return new ApiResponse<RestDockerPipelineConfiguration>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestDockerPipelineConfiguration>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDockerPipelinesConfigurationRequestBuilder(String environmentId) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling getDockerPipelinesConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/environment/{environmentId}/docker"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get a summary of a single environment.
   * @param environmentId environment id (required)
   * @return RestEnvironmentWithConfigCounts
   * @throws ApiException if fails to make API call
   */
  public RestEnvironmentWithConfigCounts getEnvironment(String environmentId) throws ApiException {
    ApiResponse<RestEnvironmentWithConfigCounts> localVarResponse = getEnvironmentWithHttpInfo(environmentId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get a summary of a single environment.
   * @param environmentId environment id (required)
   * @return ApiResponse&lt;RestEnvironmentWithConfigCounts&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestEnvironmentWithConfigCounts> getEnvironmentWithHttpInfo(String environmentId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getEnvironmentRequestBuilder(environmentId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getEnvironment", localVarResponse);
        }
        return new ApiResponse<RestEnvironmentWithConfigCounts>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestEnvironmentWithConfigCounts>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getEnvironmentRequestBuilder(String environmentId) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling getEnvironment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/environment/{environmentId}"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Get the environment variable by its name.
   * @param variableName variable name (required)
   * @param environmentId environment id (required)
   * @return RestVariable
   * @throws ApiException if fails to make API call
   */
  public RestVariable getEnvironmentVariable(String variableName, String environmentId) throws ApiException {
    ApiResponse<RestVariable> localVarResponse = getEnvironmentVariableWithHttpInfo(variableName, environmentId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Get the environment variable by its name.
   * @param variableName variable name (required)
   * @param environmentId environment id (required)
   * @return ApiResponse&lt;RestVariable&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestVariable> getEnvironmentVariableWithHttpInfo(String variableName, String environmentId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getEnvironmentVariableRequestBuilder(variableName, environmentId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getEnvironmentVariable", localVarResponse);
        }
        return new ApiResponse<RestVariable>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestVariable>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getEnvironmentVariableRequestBuilder(String variableName, String environmentId) throws ApiException {
    // verify the required parameter 'variableName' is set
    if (variableName == null) {
      throw new ApiException(400, "Missing the required parameter 'variableName' when calling getEnvironmentVariable");
    }
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling getEnvironmentVariable");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/environment/{environmentId}/variable/{variableName}"
        .replace("{variableName}", ApiClient.urlEncode(variableName.toString()))
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Provide a paginated list of minimal information about environments executable by a given agent.
   * @param agentId id of an agent the environment requirements are checked against (required)
   * @param filter string the environments and deployment projects will be filtered by (optional)
   * @param limit Page request size (optional)
   * @param start Page request start index (optional)
   * @return GetEnvironmentsExecutableByAgent200Response
   * @throws ApiException if fails to make API call
   */
  public GetEnvironmentsExecutableByAgent200Response getEnvironmentsExecutableByAgent(String agentId, String filter, Integer limit, Integer start) throws ApiException {
    ApiResponse<GetEnvironmentsExecutableByAgent200Response> localVarResponse = getEnvironmentsExecutableByAgentWithHttpInfo(agentId, filter, limit, start);
    return localVarResponse.getData();
  }

  /**
   * 
   * Provide a paginated list of minimal information about environments executable by a given agent.
   * @param agentId id of an agent the environment requirements are checked against (required)
   * @param filter string the environments and deployment projects will be filtered by (optional)
   * @param limit Page request size (optional)
   * @param start Page request start index (optional)
   * @return ApiResponse&lt;GetEnvironmentsExecutableByAgent200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetEnvironmentsExecutableByAgent200Response> getEnvironmentsExecutableByAgentWithHttpInfo(String agentId, String filter, Integer limit, Integer start) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getEnvironmentsExecutableByAgentRequestBuilder(agentId, filter, limit, start);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getEnvironmentsExecutableByAgent", localVarResponse);
        }
        return new ApiResponse<GetEnvironmentsExecutableByAgent200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetEnvironmentsExecutableByAgent200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getEnvironmentsExecutableByAgentRequestBuilder(String agentId, String filter, Integer limit, Integer start) throws ApiException {
    // verify the required parameter 'agentId' is set
    if (agentId == null) {
      throw new ApiException(400, "Missing the required parameter 'agentId' when calling getEnvironmentsExecutableByAgent");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/environment/agent/{agentId}"
        .replace("{agentId}", ApiClient.urlEncode(agentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Provide a paginated list of minimal information about environments executable by a given elastic image configuration.
   * @param configurationId Id of elastic image configuration the environment requirements are checked against (required)
   * @param filter String the environments and deployment projects will be filtered by (optional)
   * @param limit Page request size (optional)
   * @param start Page request start index (optional)
   * @return GetEnvironmentsExecutableByAgent200Response
   * @throws ApiException if fails to make API call
   */
  public GetEnvironmentsExecutableByAgent200Response getEnvironmentsExecutableByElasticConfiguration(String configurationId, String filter, Integer limit, Integer start) throws ApiException {
    ApiResponse<GetEnvironmentsExecutableByAgent200Response> localVarResponse = getEnvironmentsExecutableByElasticConfigurationWithHttpInfo(configurationId, filter, limit, start);
    return localVarResponse.getData();
  }

  /**
   * 
   * Provide a paginated list of minimal information about environments executable by a given elastic image configuration.
   * @param configurationId Id of elastic image configuration the environment requirements are checked against (required)
   * @param filter String the environments and deployment projects will be filtered by (optional)
   * @param limit Page request size (optional)
   * @param start Page request start index (optional)
   * @return ApiResponse&lt;GetEnvironmentsExecutableByAgent200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetEnvironmentsExecutableByAgent200Response> getEnvironmentsExecutableByElasticConfigurationWithHttpInfo(String configurationId, String filter, Integer limit, Integer start) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getEnvironmentsExecutableByElasticConfigurationRequestBuilder(configurationId, filter, limit, start);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getEnvironmentsExecutableByElasticConfiguration", localVarResponse);
        }
        return new ApiResponse<GetEnvironmentsExecutableByAgent200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetEnvironmentsExecutableByAgent200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getEnvironmentsExecutableByElasticConfigurationRequestBuilder(String configurationId, String filter, Integer limit, Integer start) throws ApiException {
    // verify the required parameter 'configurationId' is set
    if (configurationId == null) {
      throw new ApiException(400, "Missing the required parameter 'configurationId' when calling getEnvironmentsExecutableByElasticConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/environment/elasticImageConfiguration/{configurationId}"
        .replace("{configurationId}", ApiClient.urlEncode(configurationId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Provide a paginated list of minimal information about environments executable by a given ephemeral agent template.
   * @param templateId Id of ephemeral agent template the environment requirements are checked against (required)
   * @param filter String the environments and deployment projects will be filtered by (optional)
   * @param limit Page request size (optional)
   * @param start Page request start index (optional)
   * @return GetEnvironmentsExecutableByAgent200Response
   * @throws ApiException if fails to make API call
   */
  public GetEnvironmentsExecutableByAgent200Response getEnvironmentsExecutableByEphemeralAgentTemplate(String templateId, String filter, Integer limit, Integer start) throws ApiException {
    ApiResponse<GetEnvironmentsExecutableByAgent200Response> localVarResponse = getEnvironmentsExecutableByEphemeralAgentTemplateWithHttpInfo(templateId, filter, limit, start);
    return localVarResponse.getData();
  }

  /**
   * 
   * Provide a paginated list of minimal information about environments executable by a given ephemeral agent template.
   * @param templateId Id of ephemeral agent template the environment requirements are checked against (required)
   * @param filter String the environments and deployment projects will be filtered by (optional)
   * @param limit Page request size (optional)
   * @param start Page request start index (optional)
   * @return ApiResponse&lt;GetEnvironmentsExecutableByAgent200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetEnvironmentsExecutableByAgent200Response> getEnvironmentsExecutableByEphemeralAgentTemplateWithHttpInfo(String templateId, String filter, Integer limit, Integer start) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getEnvironmentsExecutableByEphemeralAgentTemplateRequestBuilder(templateId, filter, limit, start);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getEnvironmentsExecutableByEphemeralAgentTemplate", localVarResponse);
        }
        return new ApiResponse<GetEnvironmentsExecutableByAgent200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetEnvironmentsExecutableByAgent200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getEnvironmentsExecutableByEphemeralAgentTemplateRequestBuilder(String templateId, String filter, Integer limit, Integer start) throws ApiException {
    // verify the required parameter 'templateId' is set
    if (templateId == null) {
      throw new ApiException(400, "Missing the required parameter 'templateId' when calling getEnvironmentsExecutableByEphemeralAgentTemplate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/environment/ephemeral/{templateId}"
        .replace("{templateId}", ApiClient.urlEncode(templateId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Gets the details of a requirement for a given environment.
   * @param environmentId environment id (required)
   * @param requirementId unique identifier of the requirement to get details of (required)
   * @return RestRequirement
   * @throws ApiException if fails to make API call
   */
  public RestRequirement getRequirementForEnvironment(String environmentId, String requirementId) throws ApiException {
    ApiResponse<RestRequirement> localVarResponse = getRequirementForEnvironmentWithHttpInfo(environmentId, requirementId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Gets the details of a requirement for a given environment.
   * @param environmentId environment id (required)
   * @param requirementId unique identifier of the requirement to get details of (required)
   * @return ApiResponse&lt;RestRequirement&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestRequirement> getRequirementForEnvironmentWithHttpInfo(String environmentId, String requirementId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getRequirementForEnvironmentRequestBuilder(environmentId, requirementId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getRequirementForEnvironment", localVarResponse);
        }
        return new ApiResponse<RestRequirement>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestRequirement>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getRequirementForEnvironmentRequestBuilder(String environmentId, String requirementId) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling getRequirementForEnvironment");
    }
    // verify the required parameter 'requirementId' is set
    if (requirementId == null) {
      throw new ApiException(400, "Missing the required parameter 'requirementId' when calling getRequirementForEnvironment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/environment/{environmentId}/requirement/{requirementId}"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()))
        .replace("{requirementId}", ApiClient.urlEncode(requirementId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Gets all the requirements of an environment.
   * @param environmentId environment id (required)
   * @return List&lt;RestRequirement&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RestRequirement> getRequirementsForEnvironment(String environmentId) throws ApiException {
    ApiResponse<List<RestRequirement>> localVarResponse = getRequirementsForEnvironmentWithHttpInfo(environmentId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Gets all the requirements of an environment.
   * @param environmentId environment id (required)
   * @return ApiResponse&lt;List&lt;RestRequirement&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RestRequirement>> getRequirementsForEnvironmentWithHttpInfo(String environmentId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getRequirementsForEnvironmentRequestBuilder(environmentId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getRequirementsForEnvironment", localVarResponse);
        }
        return new ApiResponse<List<RestRequirement>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RestRequirement>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getRequirementsForEnvironmentRequestBuilder(String environmentId) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling getRequirementsForEnvironment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/environment/{environmentId}/requirement"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Change environment position within deployment project.
   * @param environmentId environment id (required)
   * @param relativeEnvironmentId environment id which referenced environment should be placed before or after (required)
   * @param position position; possible values: AFTER or BEFORE (required)
   * @throws ApiException if fails to make API call
   */
  public void moveEnvironment(String environmentId, String relativeEnvironmentId, String position) throws ApiException {
    moveEnvironmentWithHttpInfo(environmentId, relativeEnvironmentId, position);
  }

  /**
   * 
   * Change environment position within deployment project.
   * @param environmentId environment id (required)
   * @param relativeEnvironmentId environment id which referenced environment should be placed before or after (required)
   * @param position position; possible values: AFTER or BEFORE (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> moveEnvironmentWithHttpInfo(String environmentId, String relativeEnvironmentId, String position) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = moveEnvironmentRequestBuilder(environmentId, relativeEnvironmentId, position);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("moveEnvironment", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder moveEnvironmentRequestBuilder(String environmentId, String relativeEnvironmentId, String position) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling moveEnvironment");
    }
    // verify the required parameter 'relativeEnvironmentId' is set
    if (relativeEnvironmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'relativeEnvironmentId' when calling moveEnvironment");
    }
    // verify the required parameter 'position' is set
    if (position == null) {
      throw new ApiException(400, "Missing the required parameter 'position' when calling moveEnvironment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/environment/{environmentId}/move/{position}/{relativeEnvironmentId}"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()))
        .replace("{relativeEnvironmentId}", ApiClient.urlEncode(relativeEnvironmentId.toString()))
        .replace("{position}", ApiClient.urlEncode(position.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Remove agent/image from list of dedicated executors for given environment.
   * @param environmentId environment id (required)
   * @param executorKey key is parsed by ExecutorKey (required)
   * @throws ApiException if fails to make API call
   */
  public void removeAgentAssignmentFromEnvironment(String environmentId, String executorKey) throws ApiException {
    removeAgentAssignmentFromEnvironmentWithHttpInfo(environmentId, executorKey);
  }

  /**
   * 
   * Remove agent/image from list of dedicated executors for given environment.
   * @param environmentId environment id (required)
   * @param executorKey key is parsed by ExecutorKey (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removeAgentAssignmentFromEnvironmentWithHttpInfo(String environmentId, String executorKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeAgentAssignmentFromEnvironmentRequestBuilder(environmentId, executorKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removeAgentAssignmentFromEnvironment", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeAgentAssignmentFromEnvironmentRequestBuilder(String environmentId, String executorKey) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling removeAgentAssignmentFromEnvironment");
    }
    // verify the required parameter 'executorKey' is set
    if (executorKey == null) {
      throw new ApiException(400, "Missing the required parameter 'executorKey' when calling removeAgentAssignmentFromEnvironment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/environment/{environmentId}/agent-assignment/{executorKey}"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()))
        .replace("{executorKey}", ApiClient.urlEncode(executorKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Remove agent/image from list of dedicated executors for given job.
   * @param executorKey key is parsed by ExecutorKey (required)
   * @param jobKey job key (required)
   * @throws ApiException if fails to make API call
   */
  public void removeAgentAssignmentFromJob(String executorKey, String jobKey) throws ApiException {
    removeAgentAssignmentFromJobWithHttpInfo(executorKey, jobKey);
  }

  /**
   * 
   * Remove agent/image from list of dedicated executors for given job.
   * @param executorKey key is parsed by ExecutorKey (required)
   * @param jobKey job key (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removeAgentAssignmentFromJobWithHttpInfo(String executorKey, String jobKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeAgentAssignmentFromJobRequestBuilder(executorKey, jobKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removeAgentAssignmentFromJob", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeAgentAssignmentFromJobRequestBuilder(String executorKey, String jobKey) throws ApiException {
    // verify the required parameter 'executorKey' is set
    if (executorKey == null) {
      throw new ApiException(400, "Missing the required parameter 'executorKey' when calling removeAgentAssignmentFromJob");
    }
    // verify the required parameter 'jobKey' is set
    if (jobKey == null) {
      throw new ApiException(400, "Missing the required parameter 'jobKey' when calling removeAgentAssignmentFromJob");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/config/job/{jobKey}/agent-assignment/{executorKey}"
        .replace("{executorKey}", ApiClient.urlEncode(executorKey.toString()))
        .replace("{jobKey}", ApiClient.urlEncode(jobKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Removes a requirement for an environment.
   * @param environmentId environment id (required)
   * @param requirementId unique identifier of the requirement to delete (required)
   * @throws ApiException if fails to make API call
   */
  public void removeRequirementFromEnvironment(String environmentId, String requirementId) throws ApiException {
    removeRequirementFromEnvironmentWithHttpInfo(environmentId, requirementId);
  }

  /**
   * 
   * Removes a requirement for an environment.
   * @param environmentId environment id (required)
   * @param requirementId unique identifier of the requirement to delete (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removeRequirementFromEnvironmentWithHttpInfo(String environmentId, String requirementId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeRequirementFromEnvironmentRequestBuilder(environmentId, requirementId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removeRequirementFromEnvironment", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeRequirementFromEnvironmentRequestBuilder(String environmentId, String requirementId) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling removeRequirementFromEnvironment");
    }
    // verify the required parameter 'requirementId' is set
    if (requirementId == null) {
      throw new ApiException(400, "Missing the required parameter 'requirementId' when calling removeRequirementFromEnvironment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/environment/{environmentId}/requirement/{requirementId}"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()))
        .replace("{requirementId}", ApiClient.urlEncode(requirementId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Save Docker configuration for given environment.
   * @param environmentId environment id (required)
   * @param restDockerPipelineConfiguration Docker pipelines configuration (optional)
   * @throws ApiException if fails to make API call
   */
  public void saveDockerPipelinesConfiguration(String environmentId, RestDockerPipelineConfiguration restDockerPipelineConfiguration) throws ApiException {
    saveDockerPipelinesConfigurationWithHttpInfo(environmentId, restDockerPipelineConfiguration);
  }

  /**
   * 
   * Save Docker configuration for given environment.
   * @param environmentId environment id (required)
   * @param restDockerPipelineConfiguration Docker pipelines configuration (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> saveDockerPipelinesConfigurationWithHttpInfo(String environmentId, RestDockerPipelineConfiguration restDockerPipelineConfiguration) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = saveDockerPipelinesConfigurationRequestBuilder(environmentId, restDockerPipelineConfiguration);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("saveDockerPipelinesConfiguration", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder saveDockerPipelinesConfigurationRequestBuilder(String environmentId, RestDockerPipelineConfiguration restDockerPipelineConfiguration) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling saveDockerPipelinesConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/environment/{environmentId}/docker"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restDockerPipelineConfiguration);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Update the environment variable.
   * @param variableName variable name (required)
   * @param environmentId environment id (required)
   * @param restVariable The updated variable. (optional)
   * @return RestVariableDefinitionContext
   * @throws ApiException if fails to make API call
   */
  public RestVariableDefinitionContext updateEnvironmentVariable(String variableName, String environmentId, RestVariable restVariable) throws ApiException {
    ApiResponse<RestVariableDefinitionContext> localVarResponse = updateEnvironmentVariableWithHttpInfo(variableName, environmentId, restVariable);
    return localVarResponse.getData();
  }

  /**
   * 
   * Update the environment variable.
   * @param variableName variable name (required)
   * @param environmentId environment id (required)
   * @param restVariable The updated variable. (optional)
   * @return ApiResponse&lt;RestVariableDefinitionContext&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestVariableDefinitionContext> updateEnvironmentVariableWithHttpInfo(String variableName, String environmentId, RestVariable restVariable) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateEnvironmentVariableRequestBuilder(variableName, environmentId, restVariable);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateEnvironmentVariable", localVarResponse);
        }
        return new ApiResponse<RestVariableDefinitionContext>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestVariableDefinitionContext>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateEnvironmentVariableRequestBuilder(String variableName, String environmentId, RestVariable restVariable) throws ApiException {
    // verify the required parameter 'variableName' is set
    if (variableName == null) {
      throw new ApiException(400, "Missing the required parameter 'variableName' when calling updateEnvironmentVariable");
    }
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling updateEnvironmentVariable");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/environment/{environmentId}/variable/{variableName}"
        .replace("{variableName}", ApiClient.urlEncode(variableName.toString()))
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restVariable);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Updates a requirement for a given environment.
   * @param environmentId environment id (required)
   * @param requirementId unique identifier of the requirement to update (required)
   * @param restRequirement A representation of the requirement (optional)
   * @return RestRequirement
   * @throws ApiException if fails to make API call
   */
  public RestRequirement updateRequirementForEnvironment(String environmentId, String requirementId, RestRequirement restRequirement) throws ApiException {
    ApiResponse<RestRequirement> localVarResponse = updateRequirementForEnvironmentWithHttpInfo(environmentId, requirementId, restRequirement);
    return localVarResponse.getData();
  }

  /**
   * 
   * Updates a requirement for a given environment.
   * @param environmentId environment id (required)
   * @param requirementId unique identifier of the requirement to update (required)
   * @param restRequirement A representation of the requirement (optional)
   * @return ApiResponse&lt;RestRequirement&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestRequirement> updateRequirementForEnvironmentWithHttpInfo(String environmentId, String requirementId, RestRequirement restRequirement) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateRequirementForEnvironmentRequestBuilder(environmentId, requirementId, restRequirement);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateRequirementForEnvironment", localVarResponse);
        }
        return new ApiResponse<RestRequirement>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestRequirement>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateRequirementForEnvironmentRequestBuilder(String environmentId, String requirementId, RestRequirement restRequirement) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling updateRequirementForEnvironment");
    }
    // verify the required parameter 'requirementId' is set
    if (requirementId == null) {
      throw new ApiException(400, "Missing the required parameter 'requirementId' when calling updateRequirementForEnvironment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/deploy/environment/{environmentId}/requirement/{requirementId}"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()))
        .replace("{requirementId}", ApiClient.urlEncode(requirementId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restRequirement);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
