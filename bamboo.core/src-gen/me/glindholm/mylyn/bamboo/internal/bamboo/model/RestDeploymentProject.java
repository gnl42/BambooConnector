/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.bamboo.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.DeploymentKey;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.ImmutableVcsBambooSpecsSource;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.PlanKey;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestEnvironment;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestOperations;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * RestDeploymentProject
 */
@JsonPropertyOrder({
  RestDeploymentProject.JSON_PROPERTY_ID,
  RestDeploymentProject.JSON_PROPERTY_OID,
  RestDeploymentProject.JSON_PROPERTY_KEY,
  RestDeploymentProject.JSON_PROPERTY_NAME,
  RestDeploymentProject.JSON_PROPERTY_PLAN_KEY,
  RestDeploymentProject.JSON_PROPERTY_DESCRIPTION,
  RestDeploymentProject.JSON_PROPERTY_ENVIRONMENTS,
  RestDeploymentProject.JSON_PROPERTY_OPERATIONS,
  RestDeploymentProject.JSON_PROPERTY_REPOSITORY_SPECS_MANAGED,
  RestDeploymentProject.JSON_PROPERTY_VCS_BAMBOO_SPECS_SOURCE,
  RestDeploymentProject.JSON_PROPERTY_ENTITY_TYPE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-08T20:39:31.812169500-07:00[America/Vancouver]")
public class RestDeploymentProject implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_OID = "oid";
  private String oid;

  public static final String JSON_PROPERTY_KEY = "key";
  private DeploymentKey key;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_PLAN_KEY = "planKey";
  private PlanKey planKey;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_ENVIRONMENTS = "environments";
  private List<RestEnvironment> environments;

  public static final String JSON_PROPERTY_OPERATIONS = "operations";
  private RestOperations operations;

  public static final String JSON_PROPERTY_REPOSITORY_SPECS_MANAGED = "repositorySpecsManaged";
  private Boolean repositorySpecsManaged;

  public static final String JSON_PROPERTY_VCS_BAMBOO_SPECS_SOURCE = "vcsBambooSpecsSource";
  private ImmutableVcsBambooSpecsSource vcsBambooSpecsSource;

  /**
   * Gets or Sets entityType
   */
  public enum EntityTypeEnum {
    CHAIN("CHAIN"),
    
    STAGE("STAGE"),
    
    JOB("JOB"),
    
    REPOSITORY("REPOSITORY"),
    
    CHAIN_BRANCH("CHAIN_BRANCH"),
    
    JOB_BRANCH("JOB_BRANCH"),
    
    TASK("TASK"),
    
    PROJECT("PROJECT"),
    
    ARTIFACT_DEFINITION("ARTIFACT_DEFINITION"),
    
    DEPLOYMENT_PROJECT("DEPLOYMENT_PROJECT"),
    
    SHARED_CREDENTIAL("SHARED_CREDENTIAL");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ENTITY_TYPE = "entityType";
  private EntityTypeEnum entityType;

  public RestDeploymentProject() { 
  }

  public RestDeploymentProject id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  public RestDeploymentProject oid(String oid) {
    this.oid = oid;
    return this;
  }

   /**
   * Get oid
   * @return oid
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_OID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOid() {
    return oid;
  }


  @JsonProperty(JSON_PROPERTY_OID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOid(String oid) {
    this.oid = oid;
  }


  public RestDeploymentProject key(DeploymentKey key) {
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DeploymentKey getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKey(DeploymentKey key) {
    this.key = key;
  }


  public RestDeploymentProject name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public RestDeploymentProject planKey(PlanKey planKey) {
    this.planKey = planKey;
    return this;
  }

   /**
   * Get planKey
   * @return planKey
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLAN_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PlanKey getPlanKey() {
    return planKey;
  }


  @JsonProperty(JSON_PROPERTY_PLAN_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlanKey(PlanKey planKey) {
    this.planKey = planKey;
  }


  public RestDeploymentProject description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public RestDeploymentProject environments(List<RestEnvironment> environments) {
    this.environments = environments;
    return this;
  }

  public RestDeploymentProject addEnvironmentsItem(RestEnvironment environmentsItem) {
    if (this.environments == null) {
      this.environments = new ArrayList<>();
    }
    this.environments.add(environmentsItem);
    return this;
  }

   /**
   * Get environments
   * @return environments
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ENVIRONMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<RestEnvironment> getEnvironments() {
    return environments;
  }


  @JsonProperty(JSON_PROPERTY_ENVIRONMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnvironments(List<RestEnvironment> environments) {
    this.environments = environments;
  }


  public RestDeploymentProject operations(RestOperations operations) {
    this.operations = operations;
    return this;
  }

   /**
   * Get operations
   * @return operations
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_OPERATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestOperations getOperations() {
    return operations;
  }


  @JsonProperty(JSON_PROPERTY_OPERATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperations(RestOperations operations) {
    this.operations = operations;
  }


  public RestDeploymentProject repositorySpecsManaged(Boolean repositorySpecsManaged) {
    this.repositorySpecsManaged = repositorySpecsManaged;
    return this;
  }

   /**
   * Get repositorySpecsManaged
   * @return repositorySpecsManaged
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_REPOSITORY_SPECS_MANAGED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRepositorySpecsManaged() {
    return repositorySpecsManaged;
  }


  @JsonProperty(JSON_PROPERTY_REPOSITORY_SPECS_MANAGED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRepositorySpecsManaged(Boolean repositorySpecsManaged) {
    this.repositorySpecsManaged = repositorySpecsManaged;
  }


  public RestDeploymentProject vcsBambooSpecsSource(ImmutableVcsBambooSpecsSource vcsBambooSpecsSource) {
    this.vcsBambooSpecsSource = vcsBambooSpecsSource;
    return this;
  }

   /**
   * Get vcsBambooSpecsSource
   * @return vcsBambooSpecsSource
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_VCS_BAMBOO_SPECS_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ImmutableVcsBambooSpecsSource getVcsBambooSpecsSource() {
    return vcsBambooSpecsSource;
  }


  @JsonProperty(JSON_PROPERTY_VCS_BAMBOO_SPECS_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVcsBambooSpecsSource(ImmutableVcsBambooSpecsSource vcsBambooSpecsSource) {
    this.vcsBambooSpecsSource = vcsBambooSpecsSource;
  }


  public RestDeploymentProject entityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * Get entityType
   * @return entityType
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EntityTypeEnum getEntityType() {
    return entityType;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
  }


  /**
   * Return true if this RestDeploymentProject object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestDeploymentProject restDeploymentProject = (RestDeploymentProject) o;
    return Objects.equals(this.id, restDeploymentProject.id) &&
        Objects.equals(this.oid, restDeploymentProject.oid) &&
        Objects.equals(this.key, restDeploymentProject.key) &&
        Objects.equals(this.name, restDeploymentProject.name) &&
        Objects.equals(this.planKey, restDeploymentProject.planKey) &&
        Objects.equals(this.description, restDeploymentProject.description) &&
        Objects.equals(this.environments, restDeploymentProject.environments) &&
        Objects.equals(this.operations, restDeploymentProject.operations) &&
        Objects.equals(this.repositorySpecsManaged, restDeploymentProject.repositorySpecsManaged) &&
        Objects.equals(this.vcsBambooSpecsSource, restDeploymentProject.vcsBambooSpecsSource) &&
        Objects.equals(this.entityType, restDeploymentProject.entityType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, oid, key, name, planKey, description, environments, operations, repositorySpecsManaged, vcsBambooSpecsSource, entityType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestDeploymentProject {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    oid: ").append(toIndentedString(oid)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    planKey: ").append(toIndentedString(planKey)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    environments: ").append(toIndentedString(environments)).append("\n");
    sb.append("    operations: ").append(toIndentedString(operations)).append("\n");
    sb.append("    repositorySpecsManaged: ").append(toIndentedString(repositorySpecsManaged)).append("\n");
    sb.append("    vcsBambooSpecsSource: ").append(toIndentedString(vcsBambooSpecsSource)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

