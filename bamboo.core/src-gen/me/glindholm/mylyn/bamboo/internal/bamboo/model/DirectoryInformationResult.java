/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.bamboo.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * DirectoryInformationResult
 */
@JsonPropertyOrder({
  DirectoryInformationResult.JSON_PROPERTY_PLAN_NAME,
  DirectoryInformationResult.JSON_PROPERTY_ARTIFACT_PLAN_ROOTS,
  DirectoryInformationResult.JSON_PROPERTY_BUILD_LOG_JOB_ROOTS,
  DirectoryInformationResult.JSON_PROPERTY_IS_BRANCH_BUILD,
  DirectoryInformationResult.JSON_PROPERTY_STORAGE_TAG
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-08T20:39:31.812169500-07:00[America/Vancouver]")
public class DirectoryInformationResult implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_PLAN_NAME = "planName";
  private String planName;

  public static final String JSON_PROPERTY_ARTIFACT_PLAN_ROOTS = "artifact_plan_roots";
  private List<String> artifactPlanRoots;

  public static final String JSON_PROPERTY_BUILD_LOG_JOB_ROOTS = "build_log_job_roots";
  private Map<String, List<String>> buildLogJobRoots = new HashMap<>();

  public static final String JSON_PROPERTY_IS_BRANCH_BUILD = "isBranchBuild";
  private Boolean isBranchBuild;

  public static final String JSON_PROPERTY_STORAGE_TAG = "storageTag";
  private String storageTag;

  public DirectoryInformationResult() { 
  }

  public DirectoryInformationResult planName(String planName) {
    this.planName = planName;
    return this;
  }

   /**
   * Get planName
   * @return planName
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PLAN_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPlanName() {
    return planName;
  }


  @JsonProperty(JSON_PROPERTY_PLAN_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlanName(String planName) {
    this.planName = planName;
  }


  public DirectoryInformationResult artifactPlanRoots(List<String> artifactPlanRoots) {
    this.artifactPlanRoots = artifactPlanRoots;
    return this;
  }

  public DirectoryInformationResult addArtifactPlanRootsItem(String artifactPlanRootsItem) {
    if (this.artifactPlanRoots == null) {
      this.artifactPlanRoots = new ArrayList<>();
    }
    this.artifactPlanRoots.add(artifactPlanRootsItem);
    return this;
  }

   /**
   * Get artifactPlanRoots
   * @return artifactPlanRoots
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ARTIFACT_PLAN_ROOTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getArtifactPlanRoots() {
    return artifactPlanRoots;
  }


  @JsonProperty(JSON_PROPERTY_ARTIFACT_PLAN_ROOTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArtifactPlanRoots(List<String> artifactPlanRoots) {
    this.artifactPlanRoots = artifactPlanRoots;
  }


  public DirectoryInformationResult buildLogJobRoots(Map<String, List<String>> buildLogJobRoots) {
    this.buildLogJobRoots = buildLogJobRoots;
    return this;
  }

  public DirectoryInformationResult putBuildLogJobRootsItem(String key, List<String> buildLogJobRootsItem) {
    if (this.buildLogJobRoots == null) {
      this.buildLogJobRoots = new HashMap<>();
    }
    this.buildLogJobRoots.put(key, buildLogJobRootsItem);
    return this;
  }

   /**
   * Get buildLogJobRoots
   * @return buildLogJobRoots
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_BUILD_LOG_JOB_ROOTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, List<String>> getBuildLogJobRoots() {
    return buildLogJobRoots;
  }


  @JsonProperty(JSON_PROPERTY_BUILD_LOG_JOB_ROOTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildLogJobRoots(Map<String, List<String>> buildLogJobRoots) {
    this.buildLogJobRoots = buildLogJobRoots;
  }


  public DirectoryInformationResult isBranchBuild(Boolean isBranchBuild) {
    this.isBranchBuild = isBranchBuild;
    return this;
  }

   /**
   * Get isBranchBuild
   * @return isBranchBuild
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_IS_BRANCH_BUILD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsBranchBuild() {
    return isBranchBuild;
  }


  @JsonProperty(JSON_PROPERTY_IS_BRANCH_BUILD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsBranchBuild(Boolean isBranchBuild) {
    this.isBranchBuild = isBranchBuild;
  }


  public DirectoryInformationResult storageTag(String storageTag) {
    this.storageTag = storageTag;
    return this;
  }

   /**
   * Get storageTag
   * @return storageTag
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_STORAGE_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStorageTag() {
    return storageTag;
  }


  @JsonProperty(JSON_PROPERTY_STORAGE_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStorageTag(String storageTag) {
    this.storageTag = storageTag;
  }


  /**
   * Return true if this DirectoryInformationResult object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectoryInformationResult directoryInformationResult = (DirectoryInformationResult) o;
    return Objects.equals(this.planName, directoryInformationResult.planName) &&
        Objects.equals(this.artifactPlanRoots, directoryInformationResult.artifactPlanRoots) &&
        Objects.equals(this.buildLogJobRoots, directoryInformationResult.buildLogJobRoots) &&
        Objects.equals(this.isBranchBuild, directoryInformationResult.isBranchBuild) &&
        Objects.equals(this.storageTag, directoryInformationResult.storageTag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(planName, artifactPlanRoots, buildLogJobRoots, isBranchBuild, storageTag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectoryInformationResult {\n");
    sb.append("    planName: ").append(toIndentedString(planName)).append("\n");
    sb.append("    artifactPlanRoots: ").append(toIndentedString(artifactPlanRoots)).append("\n");
    sb.append("    buildLogJobRoots: ").append(toIndentedString(buildLogJobRoots)).append("\n");
    sb.append("    isBranchBuild: ").append(toIndentedString(isBranchBuild)).append("\n");
    sb.append("    storageTag: ").append(toIndentedString(storageTag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

