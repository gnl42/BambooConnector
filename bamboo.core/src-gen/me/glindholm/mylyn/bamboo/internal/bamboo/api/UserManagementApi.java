/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package me.glindholm.mylyn.bamboo.internal.bamboo.api;

import me.glindholm.mylyn.bamboo.internal.bamboo.invoker.ApiClient;
import me.glindholm.mylyn.bamboo.internal.bamboo.invoker.ApiException;
import me.glindholm.mylyn.bamboo.internal.bamboo.invoker.ApiResponse;
import me.glindholm.mylyn.bamboo.internal.bamboo.invoker.Pair;

import me.glindholm.mylyn.bamboo.internal.bamboo.model.FindAssignedGroups200Response;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.FindUnassignedUserRepositoryAliases200Response;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.GetUserAccessTokens200Response;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.GetUsers200Response;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestErrorCollection;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestGroup;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestNewUser;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestUserAlias;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestUserPasswordUpdate;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RestUserRenameRequest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-08T20:39:31.812169500-07:00[America/Vancouver]")
public class UserManagementApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public UserManagementApi() {
    this(new ApiClient());
  }

  public UserManagementApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * Add multiple users to a group. The list of usernames should be passed as request body. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The name identifying the group (required)
   * @param requestBody Usernames of users to add (optional
   * @throws ApiException if fails to make API call
   */
  public void addUsersToGroup(String name, List<String> requestBody) throws ApiException {
    addUsersToGroupWithHttpInfo(name, requestBody);
  }

  /**
   * 
   * Add multiple users to a group. The list of usernames should be passed as request body. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The name identifying the group (required)
   * @param requestBody Usernames of users to add (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addUsersToGroupWithHttpInfo(String name, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addUsersToGroupRequestBuilder(name, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addUsersToGroup", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addUsersToGroupRequestBuilder(String name, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling addUsersToGroup");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/admin/groups/{name}/add-users"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Add a user to multiple groups. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The name identifying the user (required)
   * @param requestBody Group names (required)
   * @throws ApiException if fails to make API call
   */
  public void assignGroups(String name, List<String> requestBody) throws ApiException {
    assignGroupsWithHttpInfo(name, requestBody);
  }

  /**
   * 
   * Add a user to multiple groups. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The name identifying the user (required)
   * @param requestBody Group names (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> assignGroupsWithHttpInfo(String name, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = assignGroupsRequestBuilder(name, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("assignGroups", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder assignGroupsRequestBuilder(String name, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling assignGroups");
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'requestBody' when calling assignGroups");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/admin/users/{name}/groups"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Change password of specified user. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param restUserPasswordUpdate User password change request (required)
   * @throws ApiException if fails to make API call
   */
  public void changeUserPassword(RestUserPasswordUpdate restUserPasswordUpdate) throws ApiException {
    changeUserPasswordWithHttpInfo(restUserPasswordUpdate);
  }

  /**
   * 
   * Change password of specified user. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param restUserPasswordUpdate User password change request (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> changeUserPasswordWithHttpInfo(RestUserPasswordUpdate restUserPasswordUpdate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = changeUserPasswordRequestBuilder(restUserPasswordUpdate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("changeUserPassword", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder changeUserPasswordRequestBuilder(RestUserPasswordUpdate restUserPasswordUpdate) throws ApiException {
    // verify the required parameter 'restUserPasswordUpdate' is set
    if (restUserPasswordUpdate == null) {
      throw new ApiException(400, "Missing the required parameter 'restUserPasswordUpdate' when calling changeUserPassword");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/admin/users/credentials";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restUserPasswordUpdate);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Create a new group. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param restGroup Group to create (required)
   * @throws ApiException if fails to make API call
   */
  public void createGroup1(RestGroup restGroup) throws ApiException {
    createGroup1WithHttpInfo(restGroup);
  }

  /**
   * 
   * Create a new group. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param restGroup Group to create (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> createGroup1WithHttpInfo(RestGroup restGroup) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createGroup1RequestBuilder(restGroup);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createGroup1", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createGroup1RequestBuilder(RestGroup restGroup) throws ApiException {
    // verify the required parameter 'restGroup' is set
    if (restGroup == null) {
      throw new ApiException(400, "Missing the required parameter 'restGroup' when calling createGroup1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/admin/groups";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restGroup);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Create a new user. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param restNewUser User to create (required)
   * @throws ApiException if fails to make API call
   */
  public void createUser(RestNewUser restNewUser) throws ApiException {
    createUserWithHttpInfo(restNewUser);
  }

  /**
   * 
   * Create a new user. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param restNewUser User to create (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> createUserWithHttpInfo(RestNewUser restNewUser) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createUserRequestBuilder(restNewUser);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createUser", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createUserRequestBuilder(RestNewUser restNewUser) throws ApiException {
    // verify the required parameter 'restNewUser' is set
    if (restNewUser == null) {
      throw new ApiException(400, "Missing the required parameter 'restNewUser' when calling createUser");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/admin/users";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restNewUser);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Link existing unlined alias or create the new one. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The name identifying the user (required)
   * @param requestBody Aliases array (required)
   * @throws ApiException if fails to make API call
   */
  public void createUserRepositoryAlias(String name, List<String> requestBody) throws ApiException {
    createUserRepositoryAliasWithHttpInfo(name, requestBody);
  }

  /**
   * 
   * Link existing unlined alias or create the new one. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The name identifying the user (required)
   * @param requestBody Aliases array (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> createUserRepositoryAliasWithHttpInfo(String name, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createUserRepositoryAliasRequestBuilder(name, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createUserRepositoryAlias", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createUserRepositoryAliasRequestBuilder(String name, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling createUserRepositoryAlias");
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'requestBody' when calling createUserRepositoryAlias");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/admin/users/{name}/alias"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Deletes the specified group, removing it from the system. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The name identifying the group to delete (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteGroup(String name) throws ApiException {
    deleteGroupWithHttpInfo(name);
  }

  /**
   * 
   * Deletes the specified group, removing it from the system. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The name identifying the group to delete (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteGroupWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteGroupRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteGroup", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteGroupRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling deleteGroup");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/admin/groups/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Deletes the specified user, removing them from the system. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The name identifying the user to delete (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteUser(String name) throws ApiException {
    deleteUserWithHttpInfo(name);
  }

  /**
   * 
   * Deletes the specified user, removing them from the system. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The name identifying the user to delete (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteUserWithHttpInfo(String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteUserRequestBuilder(name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteUser", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteUserRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling deleteUser");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/admin/users/{name}"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieves a list of groups to which the user belongs. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The name identifying the user (required)
   * @param filter If specified, only groups with names containing the supplied string will be returned (optional)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return FindAssignedGroups200Response
   * @throws ApiException if fails to make API call
   */
  public FindAssignedGroups200Response findAssignedGroups(String name, String filter, Integer limit, Integer start) throws ApiException {
    ApiResponse<FindAssignedGroups200Response> localVarResponse = findAssignedGroupsWithHttpInfo(name, filter, limit, start);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieves a list of groups to which the user belongs. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The name identifying the user (required)
   * @param filter If specified, only groups with names containing the supplied string will be returned (optional)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return ApiResponse&lt;FindAssignedGroups200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FindAssignedGroups200Response> findAssignedGroupsWithHttpInfo(String name, String filter, Integer limit, Integer start) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = findAssignedGroupsRequestBuilder(name, filter, limit, start);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("findAssignedGroups", localVarResponse);
        }
        return new ApiResponse<FindAssignedGroups200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FindAssignedGroups200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder findAssignedGroupsRequestBuilder(String name, String filter, Integer limit, Integer start) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling findAssignedGroups");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/admin/users/{name}/assigned-groups"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieves a list of groups to which the user does not belong. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The name identifying the user (required)
   * @param filter If specified, only groups with names containing the supplied string will be returned (optional)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return FindAssignedGroups200Response
   * @throws ApiException if fails to make API call
   */
  public FindAssignedGroups200Response findUnassignedGroups(String name, String filter, Integer limit, Integer start) throws ApiException {
    ApiResponse<FindAssignedGroups200Response> localVarResponse = findUnassignedGroupsWithHttpInfo(name, filter, limit, start);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieves a list of groups to which the user does not belong. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The name identifying the user (required)
   * @param filter If specified, only groups with names containing the supplied string will be returned (optional)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return ApiResponse&lt;FindAssignedGroups200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FindAssignedGroups200Response> findUnassignedGroupsWithHttpInfo(String name, String filter, Integer limit, Integer start) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = findUnassignedGroupsRequestBuilder(name, filter, limit, start);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("findUnassignedGroups", localVarResponse);
        }
        return new ApiResponse<FindAssignedGroups200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FindAssignedGroups200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder findUnassignedGroupsRequestBuilder(String name, String filter, Integer limit, Integer start) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling findUnassignedGroups");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/admin/users/{name}/unassigned-groups"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieves a list of unlinked aliases to which the user does not belong. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The name identifying the user (required)
   * @param filter If specified, only aliases with names containing the supplied string will be returned (optional)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return FindUnassignedUserRepositoryAliases200Response
   * @throws ApiException if fails to make API call
   */
  public FindUnassignedUserRepositoryAliases200Response findUnassignedUserRepositoryAliases(String name, String filter, Integer limit, Integer start) throws ApiException {
    ApiResponse<FindUnassignedUserRepositoryAliases200Response> localVarResponse = findUnassignedUserRepositoryAliasesWithHttpInfo(name, filter, limit, start);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieves a list of unlinked aliases to which the user does not belong. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The name identifying the user (required)
   * @param filter If specified, only aliases with names containing the supplied string will be returned (optional)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return ApiResponse&lt;FindUnassignedUserRepositoryAliases200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FindUnassignedUserRepositoryAliases200Response> findUnassignedUserRepositoryAliasesWithHttpInfo(String name, String filter, Integer limit, Integer start) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = findUnassignedUserRepositoryAliasesRequestBuilder(name, filter, limit, start);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("findUnassignedUserRepositoryAliases", localVarResponse);
        }
        return new ApiResponse<FindUnassignedUserRepositoryAliases200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FindUnassignedUserRepositoryAliases200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder findUnassignedUserRepositoryAliasesRequestBuilder(String name, String filter, Integer limit, Integer start) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling findUnassignedUserRepositoryAliases");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/admin/users/{name}/unassigned-aliases"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieves a list of users that are members of a specified group. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The group which should be used to locate members (required)
   * @param filter If specified only users with usernames, display names or email addresses containing the supplied string (case insensitive) will be returned (optional)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return GetUsers200Response
   * @throws ApiException if fails to make API call
   */
  public GetUsers200Response findUsersInGroup(String name, String filter, Integer limit, Integer start) throws ApiException {
    ApiResponse<GetUsers200Response> localVarResponse = findUsersInGroupWithHttpInfo(name, filter, limit, start);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieves a list of users that are members of a specified group. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The group which should be used to locate members (required)
   * @param filter If specified only users with usernames, display names or email addresses containing the supplied string (case insensitive) will be returned (optional)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return ApiResponse&lt;GetUsers200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetUsers200Response> findUsersInGroupWithHttpInfo(String name, String filter, Integer limit, Integer start) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = findUsersInGroupRequestBuilder(name, filter, limit, start);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("findUsersInGroup", localVarResponse);
        }
        return new ApiResponse<GetUsers200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetUsers200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder findUsersInGroupRequestBuilder(String name, String filter, Integer limit, Integer start) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling findUsersInGroup");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/admin/groups/{name}/more-members"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieves a list of users that are not members of a specified group. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The group which should be used to locate non-members (required)
   * @param filter If specified only users with usernames, display names or email addresses containing the supplied string will be returned (optional)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return GetUsers200Response
   * @throws ApiException if fails to make API call
   */
  public GetUsers200Response findUsersNotInGroup(String name, String filter, Integer limit, Integer start) throws ApiException {
    ApiResponse<GetUsers200Response> localVarResponse = findUsersNotInGroupWithHttpInfo(name, filter, limit, start);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieves a list of users that are not members of a specified group. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The group which should be used to locate non-members (required)
   * @param filter If specified only users with usernames, display names or email addresses containing the supplied string will be returned (optional)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return ApiResponse&lt;GetUsers200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetUsers200Response> findUsersNotInGroupWithHttpInfo(String name, String filter, Integer limit, Integer start) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = findUsersNotInGroupRequestBuilder(name, filter, limit, start);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("findUsersNotInGroup", localVarResponse);
        }
        return new ApiResponse<GetUsers200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetUsers200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder findUsersNotInGroupRequestBuilder(String name, String filter, Integer limit, Integer start) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling findUsersNotInGroup");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/admin/groups/{name}/more-non-members"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a paginated list of groups. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param filter If specified only group names containing the supplied string (case insensitive) will be returned (optional)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return FindAssignedGroups200Response
   * @throws ApiException if fails to make API call
   */
  public FindAssignedGroups200Response getGroups(String filter, Integer limit, Integer start) throws ApiException {
    ApiResponse<FindAssignedGroups200Response> localVarResponse = getGroupsWithHttpInfo(filter, limit, start);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a paginated list of groups. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param filter If specified only group names containing the supplied string (case insensitive) will be returned (optional)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return ApiResponse&lt;FindAssignedGroups200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FindAssignedGroups200Response> getGroupsWithHttpInfo(String filter, Integer limit, Integer start) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getGroupsRequestBuilder(filter, limit, start);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getGroups", localVarResponse);
        }
        return new ApiResponse<FindAssignedGroups200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FindAssignedGroups200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getGroupsRequestBuilder(String filter, Integer limit, Integer start) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/admin/groups";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a page of user&#39;s access tokens. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The name identifying the user (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return GetUserAccessTokens200Response
   * @throws ApiException if fails to make API call
   */
  public GetUserAccessTokens200Response getUserAccessTokens(String name, Integer limit, Integer start) throws ApiException {
    ApiResponse<GetUserAccessTokens200Response> localVarResponse = getUserAccessTokensWithHttpInfo(name, limit, start);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a page of user&#39;s access tokens. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The name identifying the user (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return ApiResponse&lt;GetUserAccessTokens200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetUserAccessTokens200Response> getUserAccessTokensWithHttpInfo(String name, Integer limit, Integer start) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getUserAccessTokensRequestBuilder(name, limit, start);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getUserAccessTokens", localVarResponse);
        }
        return new ApiResponse<GetUserAccessTokens200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetUserAccessTokens200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getUserAccessTokensRequestBuilder(String name, Integer limit, Integer start) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getUserAccessTokens");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/admin/users/{name}/access-token"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a page of aliases. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The name identifying the user (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return FindUnassignedUserRepositoryAliases200Response
   * @throws ApiException if fails to make API call
   */
  public FindUnassignedUserRepositoryAliases200Response getUserRepositoryAliases(String name, Integer limit, Integer start) throws ApiException {
    ApiResponse<FindUnassignedUserRepositoryAliases200Response> localVarResponse = getUserRepositoryAliasesWithHttpInfo(name, limit, start);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a page of aliases. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The name identifying the user (required)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return ApiResponse&lt;FindUnassignedUserRepositoryAliases200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FindUnassignedUserRepositoryAliases200Response> getUserRepositoryAliasesWithHttpInfo(String name, Integer limit, Integer start) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getUserRepositoryAliasesRequestBuilder(name, limit, start);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getUserRepositoryAliases", localVarResponse);
        }
        return new ApiResponse<FindUnassignedUserRepositoryAliases200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FindUnassignedUserRepositoryAliases200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getUserRepositoryAliasesRequestBuilder(String name, Integer limit, Integer start) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling getUserRepositoryAliases");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/admin/users/{name}/alias"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Retrieve a page of users. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param filter If specified only users, whose username, full name or email contain the supplied string (case insensitive) will be returned (optional)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return GetUsers200Response
   * @throws ApiException if fails to make API call
   */
  public GetUsers200Response getUsers(String filter, Integer limit, Integer start) throws ApiException {
    ApiResponse<GetUsers200Response> localVarResponse = getUsersWithHttpInfo(filter, limit, start);
    return localVarResponse.getData();
  }

  /**
   * 
   * Retrieve a page of users. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param filter If specified only users, whose username, full name or email contain the supplied string (case insensitive) will be returned (optional)
   * @param limit Page request size (optional, default to 25)
   * @param start Page request start index (optional)
   * @return ApiResponse&lt;GetUsers200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetUsers200Response> getUsersWithHttpInfo(String filter, Integer limit, Integer start) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getUsersRequestBuilder(filter, limit, start);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getUsers", localVarResponse);
        }
        return new ApiResponse<GetUsers200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetUsers200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getUsersRequestBuilder(String filter, Integer limit, Integer start) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/admin/users";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "start";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start", start));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Remove multiple users from a group. The list of usernames should be passed as request body. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The name identifying the group (required)
   * @param requestBody Usernames of users to remove (optional
   * @throws ApiException if fails to make API call
   */
  public void removeUsersFromGroup(String name, List<String> requestBody) throws ApiException {
    removeUsersFromGroupWithHttpInfo(name, requestBody);
  }

  /**
   * 
   * Remove multiple users from a group. The list of usernames should be passed as request body. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The name identifying the group (required)
   * @param requestBody Usernames of users to remove (optional
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removeUsersFromGroupWithHttpInfo(String name, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeUsersFromGroupRequestBuilder(name, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removeUsersFromGroup", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeUsersFromGroupRequestBuilder(String name, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling removeUsersFromGroup");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/admin/groups/{name}/remove-users"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Renames specified user. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param restUserRenameRequest User rename request (required)
   * @throws ApiException if fails to make API call
   */
  public void renameUser(RestUserRenameRequest restUserRenameRequest) throws ApiException {
    renameUserWithHttpInfo(restUserRenameRequest);
  }

  /**
   * 
   * Renames specified user. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param restUserRenameRequest User rename request (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> renameUserWithHttpInfo(RestUserRenameRequest restUserRenameRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = renameUserRequestBuilder(restUserRenameRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("renameUser", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder renameUserRequestBuilder(RestUserRenameRequest restUserRenameRequest) throws ApiException {
    // verify the required parameter 'restUserRenameRequest' is set
    if (restUserRenameRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'restUserRenameRequest' when calling renameUser");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/admin/users/rename";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restUserRenameRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Renames specified user.
   * @param restUserRenameRequest User rename request (required)
   * @param externalRename Set to true if the rename has been done externally and Bamboo is notified of it (optional)
   * @throws ApiException if fails to make API call
   */
  public void renameUserPost(RestUserRenameRequest restUserRenameRequest, String externalRename) throws ApiException {
    renameUserPostWithHttpInfo(restUserRenameRequest, externalRename);
  }

  /**
   * 
   * Renames specified user.
   * @param restUserRenameRequest User rename request (required)
   * @param externalRename Set to true if the rename has been done externally and Bamboo is notified of it (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> renameUserPostWithHttpInfo(RestUserRenameRequest restUserRenameRequest, String externalRename) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = renameUserPostRequestBuilder(restUserRenameRequest, externalRename);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("renameUserPost", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder renameUserPostRequestBuilder(RestUserRenameRequest restUserRenameRequest, String externalRename) throws ApiException {
    // verify the required parameter 'restUserRenameRequest' is set
    if (restUserRenameRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'restUserRenameRequest' when calling renameUserPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/user";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "externalRename";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("externalRename", externalRename));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restUserRenameRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Renames specified user.
   * @param newUserName User&#39;s new username (required)
   * @param restUserRenameRequest User rename request (required)
   * @param externalRename Set to true if the rename has been done externally and Bamboo is notified of it (optional)
   * @throws ApiException if fails to make API call
   */
  public void renameUserPut(String newUserName, RestUserRenameRequest restUserRenameRequest, String externalRename) throws ApiException {
    renameUserPutWithHttpInfo(newUserName, restUserRenameRequest, externalRename);
  }

  /**
   * 
   * Renames specified user.
   * @param newUserName User&#39;s new username (required)
   * @param restUserRenameRequest User rename request (required)
   * @param externalRename Set to true if the rename has been done externally and Bamboo is notified of it (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> renameUserPutWithHttpInfo(String newUserName, RestUserRenameRequest restUserRenameRequest, String externalRename) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = renameUserPutRequestBuilder(newUserName, restUserRenameRequest, externalRename);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("renameUserPut", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder renameUserPutRequestBuilder(String newUserName, RestUserRenameRequest restUserRenameRequest, String externalRename) throws ApiException {
    // verify the required parameter 'newUserName' is set
    if (newUserName == null) {
      throw new ApiException(400, "Missing the required parameter 'newUserName' when calling renameUserPut");
    }
    // verify the required parameter 'restUserRenameRequest' is set
    if (restUserRenameRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'restUserRenameRequest' when calling renameUserPut");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/admin/latest/user/{newUserName}"
        .replace("{newUserName}", ApiClient.urlEncode(newUserName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "externalRename";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("externalRename", externalRename));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restUserRenameRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Revoke user&#39;s access token. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param tokenId id of token (required)
   * @param name The name identifying the user (required)
   * @throws ApiException if fails to make API call
   */
  public void revokeUserToken(String tokenId, String name) throws ApiException {
    revokeUserTokenWithHttpInfo(tokenId, name);
  }

  /**
   * 
   * Revoke user&#39;s access token. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param tokenId id of token (required)
   * @param name The name identifying the user (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> revokeUserTokenWithHttpInfo(String tokenId, String name) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = revokeUserTokenRequestBuilder(tokenId, name);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("revokeUserToken", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder revokeUserTokenRequestBuilder(String tokenId, String name) throws ApiException {
    // verify the required parameter 'tokenId' is set
    if (tokenId == null) {
      throw new ApiException(400, "Missing the required parameter 'tokenId' when calling revokeUserToken");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling revokeUserToken");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/admin/users/{name}/access-token/{tokenId}"
        .replace("{tokenId}", ApiClient.urlEncode(tokenId.toString()))
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Remove a user from multiple groups.  The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The name identifying the user (required)
   * @param requestBody User groups to unassign from (required)
   * @throws ApiException if fails to make API call
   */
  public void unassignGroups(String name, List<String> requestBody) throws ApiException {
    unassignGroupsWithHttpInfo(name, requestBody);
  }

  /**
   * 
   * Remove a user from multiple groups.  The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The name identifying the user (required)
   * @param requestBody User groups to unassign from (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> unassignGroupsWithHttpInfo(String name, List<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = unassignGroupsRequestBuilder(name, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("unassignGroups", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder unassignGroupsRequestBuilder(String name, List<String> requestBody) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling unassignGroups");
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'requestBody' when calling unassignGroups");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/admin/users/{name}/groups"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Unlink the specified alias from user, removing them from the system. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The name identifying the user (required)
   * @param restUserAlias Alias to unlink (required)
   * @throws ApiException if fails to make API call
   */
  public void unlinkUserRepositoryAlias(String name, RestUserAlias restUserAlias) throws ApiException {
    unlinkUserRepositoryAliasWithHttpInfo(name, restUserAlias);
  }

  /**
   * 
   * Unlink the specified alias from user, removing them from the system. The authenticated user must have restricted administrative permission or higher to use this resource.
   * @param name The name identifying the user (required)
   * @param restUserAlias Alias to unlink (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> unlinkUserRepositoryAliasWithHttpInfo(String name, RestUserAlias restUserAlias) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = unlinkUserRepositoryAliasRequestBuilder(name, restUserAlias);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("unlinkUserRepositoryAlias", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder unlinkUserRepositoryAliasRequestBuilder(String name, RestUserAlias restUserAlias) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling unlinkUserRepositoryAlias");
    }
    // verify the required parameter 'restUserAlias' is set
    if (restUserAlias == null) {
      throw new ApiException(400, "Missing the required parameter 'restUserAlias' when calling unlinkUserRepositoryAlias");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/latest/admin/users/{name}/alias"
        .replace("{name}", ApiClient.urlEncode(name.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(restUserAlias);
      localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
