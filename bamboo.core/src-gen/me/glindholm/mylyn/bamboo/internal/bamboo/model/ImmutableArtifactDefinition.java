/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.bamboo.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.BambooEntityOid;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.ImmutableArtifactSubscription;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.ImmutableJob;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * ImmutableArtifactDefinition
 */
@JsonPropertyOrder({
  ImmutableArtifactDefinition.JSON_PROPERTY_PRODUCER_JOB,
  ImmutableArtifactDefinition.JSON_PROPERTY_SUBSCRIPTIONS,
  ImmutableArtifactDefinition.JSON_PROPERTY_COPY_PATTERNS,
  ImmutableArtifactDefinition.JSON_PROPERTY_SHARED_ARTIFACT,
  ImmutableArtifactDefinition.JSON_PROPERTY_ENTITY_TYPE,
  ImmutableArtifactDefinition.JSON_PROPERTY_EXCLUSION_PATTERNS,
  ImmutableArtifactDefinition.JSON_PROPERTY_COPY_PATTERN,
  ImmutableArtifactDefinition.JSON_PROPERTY_HTTP_COMPRESSION_ON,
  ImmutableArtifactDefinition.JSON_PROPERTY_REQUIRED,
  ImmutableArtifactDefinition.JSON_PROPERTY_NAME,
  ImmutableArtifactDefinition.JSON_PROPERTY_LOCATION,
  ImmutableArtifactDefinition.JSON_PROPERTY_ID,
  ImmutableArtifactDefinition.JSON_PROPERTY_OID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-08T20:39:31.812169500-07:00[America/Vancouver]")
public class ImmutableArtifactDefinition implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_PRODUCER_JOB = "producerJob";
  private ImmutableJob producerJob;

  public static final String JSON_PROPERTY_SUBSCRIPTIONS = "subscriptions";
  private List<ImmutableArtifactSubscription> subscriptions;

  public static final String JSON_PROPERTY_COPY_PATTERNS = "copyPatterns";
  private List<String> copyPatterns;

  public static final String JSON_PROPERTY_SHARED_ARTIFACT = "sharedArtifact";
  private Boolean sharedArtifact;

  /**
   * Gets or Sets entityType
   */
  public enum EntityTypeEnum {
    CHAIN("CHAIN"),
    
    STAGE("STAGE"),
    
    JOB("JOB"),
    
    REPOSITORY("REPOSITORY"),
    
    CHAIN_BRANCH("CHAIN_BRANCH"),
    
    JOB_BRANCH("JOB_BRANCH"),
    
    TASK("TASK"),
    
    PROJECT("PROJECT"),
    
    ARTIFACT_DEFINITION("ARTIFACT_DEFINITION"),
    
    DEPLOYMENT_PROJECT("DEPLOYMENT_PROJECT"),
    
    SHARED_CREDENTIAL("SHARED_CREDENTIAL");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ENTITY_TYPE = "entityType";
  private EntityTypeEnum entityType;

  public static final String JSON_PROPERTY_EXCLUSION_PATTERNS = "exclusionPatterns";
  private List<String> exclusionPatterns;

  public static final String JSON_PROPERTY_COPY_PATTERN = "copyPattern";
  private String copyPattern;

  public static final String JSON_PROPERTY_HTTP_COMPRESSION_ON = "httpCompressionOn";
  private Boolean httpCompressionOn;

  public static final String JSON_PROPERTY_REQUIRED = "required";
  private Boolean required;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_LOCATION = "location";
  private String location;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_OID = "oid";
  private BambooEntityOid oid;

  public ImmutableArtifactDefinition() { 
  }

  public ImmutableArtifactDefinition producerJob(ImmutableJob producerJob) {
    this.producerJob = producerJob;
    return this;
  }

   /**
   * Get producerJob
   * @return producerJob
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PRODUCER_JOB)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ImmutableJob getProducerJob() {
    return producerJob;
  }


  @JsonProperty(JSON_PROPERTY_PRODUCER_JOB)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProducerJob(ImmutableJob producerJob) {
    this.producerJob = producerJob;
  }


  public ImmutableArtifactDefinition subscriptions(List<ImmutableArtifactSubscription> subscriptions) {
    this.subscriptions = subscriptions;
    return this;
  }

  public ImmutableArtifactDefinition addSubscriptionsItem(ImmutableArtifactSubscription subscriptionsItem) {
    if (this.subscriptions == null) {
      this.subscriptions = new ArrayList<>();
    }
    this.subscriptions.add(subscriptionsItem);
    return this;
  }

   /**
   * Get subscriptions
   * @return subscriptions
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SUBSCRIPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ImmutableArtifactSubscription> getSubscriptions() {
    return subscriptions;
  }


  @JsonProperty(JSON_PROPERTY_SUBSCRIPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubscriptions(List<ImmutableArtifactSubscription> subscriptions) {
    this.subscriptions = subscriptions;
  }


  public ImmutableArtifactDefinition copyPatterns(List<String> copyPatterns) {
    this.copyPatterns = copyPatterns;
    return this;
  }

  public ImmutableArtifactDefinition addCopyPatternsItem(String copyPatternsItem) {
    if (this.copyPatterns == null) {
      this.copyPatterns = new ArrayList<>();
    }
    this.copyPatterns.add(copyPatternsItem);
    return this;
  }

   /**
   * Get copyPatterns
   * @return copyPatterns
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_COPY_PATTERNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getCopyPatterns() {
    return copyPatterns;
  }


  @JsonProperty(JSON_PROPERTY_COPY_PATTERNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCopyPatterns(List<String> copyPatterns) {
    this.copyPatterns = copyPatterns;
  }


  public ImmutableArtifactDefinition sharedArtifact(Boolean sharedArtifact) {
    this.sharedArtifact = sharedArtifact;
    return this;
  }

   /**
   * Get sharedArtifact
   * @return sharedArtifact
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SHARED_ARTIFACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSharedArtifact() {
    return sharedArtifact;
  }


  @JsonProperty(JSON_PROPERTY_SHARED_ARTIFACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSharedArtifact(Boolean sharedArtifact) {
    this.sharedArtifact = sharedArtifact;
  }


  public ImmutableArtifactDefinition entityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * Get entityType
   * @return entityType
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EntityTypeEnum getEntityType() {
    return entityType;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
  }


  public ImmutableArtifactDefinition exclusionPatterns(List<String> exclusionPatterns) {
    this.exclusionPatterns = exclusionPatterns;
    return this;
  }

  public ImmutableArtifactDefinition addExclusionPatternsItem(String exclusionPatternsItem) {
    if (this.exclusionPatterns == null) {
      this.exclusionPatterns = new ArrayList<>();
    }
    this.exclusionPatterns.add(exclusionPatternsItem);
    return this;
  }

   /**
   * Get exclusionPatterns
   * @return exclusionPatterns
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_EXCLUSION_PATTERNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getExclusionPatterns() {
    return exclusionPatterns;
  }


  @JsonProperty(JSON_PROPERTY_EXCLUSION_PATTERNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExclusionPatterns(List<String> exclusionPatterns) {
    this.exclusionPatterns = exclusionPatterns;
  }


  public ImmutableArtifactDefinition copyPattern(String copyPattern) {
    this.copyPattern = copyPattern;
    return this;
  }

   /**
   * Get copyPattern
   * @return copyPattern
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_COPY_PATTERN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCopyPattern() {
    return copyPattern;
  }


  @JsonProperty(JSON_PROPERTY_COPY_PATTERN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCopyPattern(String copyPattern) {
    this.copyPattern = copyPattern;
  }


  public ImmutableArtifactDefinition httpCompressionOn(Boolean httpCompressionOn) {
    this.httpCompressionOn = httpCompressionOn;
    return this;
  }

   /**
   * Get httpCompressionOn
   * @return httpCompressionOn
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_HTTP_COMPRESSION_ON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHttpCompressionOn() {
    return httpCompressionOn;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_COMPRESSION_ON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpCompressionOn(Boolean httpCompressionOn) {
    this.httpCompressionOn = httpCompressionOn;
  }


  public ImmutableArtifactDefinition required(Boolean required) {
    this.required = required;
    return this;
  }

   /**
   * Get required
   * @return required
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRequired() {
    return required;
  }


  @JsonProperty(JSON_PROPERTY_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequired(Boolean required) {
    this.required = required;
  }


  public ImmutableArtifactDefinition name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public ImmutableArtifactDefinition location(String location) {
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLocation() {
    return location;
  }


  @JsonProperty(JSON_PROPERTY_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocation(String location) {
    this.location = location;
  }


  public ImmutableArtifactDefinition id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  public ImmutableArtifactDefinition oid(BambooEntityOid oid) {
    this.oid = oid;
    return this;
  }

   /**
   * Get oid
   * @return oid
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_OID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BambooEntityOid getOid() {
    return oid;
  }


  @JsonProperty(JSON_PROPERTY_OID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOid(BambooEntityOid oid) {
    this.oid = oid;
  }


  /**
   * Return true if this ImmutableArtifactDefinition object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImmutableArtifactDefinition immutableArtifactDefinition = (ImmutableArtifactDefinition) o;
    return Objects.equals(this.producerJob, immutableArtifactDefinition.producerJob) &&
        Objects.equals(this.subscriptions, immutableArtifactDefinition.subscriptions) &&
        Objects.equals(this.copyPatterns, immutableArtifactDefinition.copyPatterns) &&
        Objects.equals(this.sharedArtifact, immutableArtifactDefinition.sharedArtifact) &&
        Objects.equals(this.entityType, immutableArtifactDefinition.entityType) &&
        Objects.equals(this.exclusionPatterns, immutableArtifactDefinition.exclusionPatterns) &&
        Objects.equals(this.copyPattern, immutableArtifactDefinition.copyPattern) &&
        Objects.equals(this.httpCompressionOn, immutableArtifactDefinition.httpCompressionOn) &&
        Objects.equals(this.required, immutableArtifactDefinition.required) &&
        Objects.equals(this.name, immutableArtifactDefinition.name) &&
        Objects.equals(this.location, immutableArtifactDefinition.location) &&
        Objects.equals(this.id, immutableArtifactDefinition.id) &&
        Objects.equals(this.oid, immutableArtifactDefinition.oid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(producerJob, subscriptions, copyPatterns, sharedArtifact, entityType, exclusionPatterns, copyPattern, httpCompressionOn, required, name, location, id, oid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImmutableArtifactDefinition {\n");
    sb.append("    producerJob: ").append(toIndentedString(producerJob)).append("\n");
    sb.append("    subscriptions: ").append(toIndentedString(subscriptions)).append("\n");
    sb.append("    copyPatterns: ").append(toIndentedString(copyPatterns)).append("\n");
    sb.append("    sharedArtifact: ").append(toIndentedString(sharedArtifact)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    exclusionPatterns: ").append(toIndentedString(exclusionPatterns)).append("\n");
    sb.append("    copyPattern: ").append(toIndentedString(copyPattern)).append("\n");
    sb.append("    httpCompressionOn: ").append(toIndentedString(httpCompressionOn)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    oid: ").append(toIndentedString(oid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

