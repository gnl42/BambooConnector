/*
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package me.glindholm.mylyn.bamboo.internal.bamboo.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.Author;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.AuthorContext;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.CommitFile;
import me.glindholm.mylyn.bamboo.internal.bamboo.model.RepositoryChangeset;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Commit
 */
@JsonPropertyOrder({
  Commit.JSON_PROPERTY_FILES,
  Commit.JSON_PROPERTY_AUTHOR,
  Commit.JSON_PROPERTY_REPOSITORY_CHANGESET,
  Commit.JSON_PROPERTY_FOREIGN_COMMIT,
  Commit.JSON_PROPERTY_ID,
  Commit.JSON_PROPERTY_DATE,
  Commit.JSON_PROPERTY_COMMENT,
  Commit.JSON_PROPERTY_AUTHOR_CONTEXT,
  Commit.JSON_PROPERTY_CHANGE_SET_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-08T20:39:31.812169500-07:00[America/Vancouver]")
public class Commit implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_FILES = "files";
  private List<CommitFile> files;

  public static final String JSON_PROPERTY_AUTHOR = "author";
  private Author author;

  public static final String JSON_PROPERTY_REPOSITORY_CHANGESET = "repositoryChangeset";
  private RepositoryChangeset repositoryChangeset;

  public static final String JSON_PROPERTY_FOREIGN_COMMIT = "foreignCommit";
  private Boolean foreignCommit;

  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_DATE = "date";
  private Date date;

  public static final String JSON_PROPERTY_COMMENT = "comment";
  private String comment;

  public static final String JSON_PROPERTY_AUTHOR_CONTEXT = "authorContext";
  private AuthorContext authorContext;

  public static final String JSON_PROPERTY_CHANGE_SET_ID = "changeSetId";
  private String changeSetId;

  public Commit() { 
  }

  public Commit files(List<CommitFile> files) {
    this.files = files;
    return this;
  }

  public Commit addFilesItem(CommitFile filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

   /**
   * Get files
   * @return files
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CommitFile> getFiles() {
    return files;
  }


  @JsonProperty(JSON_PROPERTY_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFiles(List<CommitFile> files) {
    this.files = files;
  }


  public Commit author(Author author) {
    this.author = author;
    return this;
  }

   /**
   * Get author
   * @return author
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_AUTHOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Author getAuthor() {
    return author;
  }


  @JsonProperty(JSON_PROPERTY_AUTHOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthor(Author author) {
    this.author = author;
  }


  public Commit repositoryChangeset(RepositoryChangeset repositoryChangeset) {
    this.repositoryChangeset = repositoryChangeset;
    return this;
  }

   /**
   * Get repositoryChangeset
   * @return repositoryChangeset
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_REPOSITORY_CHANGESET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RepositoryChangeset getRepositoryChangeset() {
    return repositoryChangeset;
  }


  @JsonProperty(JSON_PROPERTY_REPOSITORY_CHANGESET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRepositoryChangeset(RepositoryChangeset repositoryChangeset) {
    this.repositoryChangeset = repositoryChangeset;
  }


  public Commit foreignCommit(Boolean foreignCommit) {
    this.foreignCommit = foreignCommit;
    return this;
  }

   /**
   * Get foreignCommit
   * @return foreignCommit
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_FOREIGN_COMMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getForeignCommit() {
    return foreignCommit;
  }


  @JsonProperty(JSON_PROPERTY_FOREIGN_COMMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setForeignCommit(Boolean foreignCommit) {
    this.foreignCommit = foreignCommit;
  }


  public Commit id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Long id) {
    this.id = id;
  }


  public Commit date(Date date) {
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Date getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDate(Date date) {
    this.date = date;
  }


  public Commit comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getComment() {
    return comment;
  }


  @JsonProperty(JSON_PROPERTY_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setComment(String comment) {
    this.comment = comment;
  }


  public Commit authorContext(AuthorContext authorContext) {
    this.authorContext = authorContext;
    return this;
  }

   /**
   * Get authorContext
   * @return authorContext
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_AUTHOR_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AuthorContext getAuthorContext() {
    return authorContext;
  }


  @JsonProperty(JSON_PROPERTY_AUTHOR_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthorContext(AuthorContext authorContext) {
    this.authorContext = authorContext;
  }


  public Commit changeSetId(String changeSetId) {
    this.changeSetId = changeSetId;
    return this;
  }

   /**
   * Get changeSetId
   * @return changeSetId
  **/
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CHANGE_SET_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getChangeSetId() {
    return changeSetId;
  }


  @JsonProperty(JSON_PROPERTY_CHANGE_SET_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChangeSetId(String changeSetId) {
    this.changeSetId = changeSetId;
  }


  /**
   * Return true if this Commit object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Commit commit = (Commit) o;
    return Objects.equals(this.files, commit.files) &&
        Objects.equals(this.author, commit.author) &&
        Objects.equals(this.repositoryChangeset, commit.repositoryChangeset) &&
        Objects.equals(this.foreignCommit, commit.foreignCommit) &&
        Objects.equals(this.id, commit.id) &&
        Objects.equals(this.date, commit.date) &&
        Objects.equals(this.comment, commit.comment) &&
        Objects.equals(this.authorContext, commit.authorContext) &&
        Objects.equals(this.changeSetId, commit.changeSetId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(files, author, repositoryChangeset, foreignCommit, id, date, comment, authorContext, changeSetId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Commit {\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    repositoryChangeset: ").append(toIndentedString(repositoryChangeset)).append("\n");
    sb.append("    foreignCommit: ").append(toIndentedString(foreignCommit)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    authorContext: ").append(toIndentedString(authorContext)).append("\n");
    sb.append("    changeSetId: ").append(toIndentedString(changeSetId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

